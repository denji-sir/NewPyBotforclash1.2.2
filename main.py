"""
NewPyBot –¥–ª—è Clash of Clans v1.2.2
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
"""

import asyncio
import logging
import os
import sys
from typing import Optional
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
from bot.config.clan_config import init_clan_config, get_coc_api_keys
from bot.services.clan_system_manager import init_clan_system

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
from bot.integrations.greeting_integration import initialize_greeting_system, shutdown_greeting_system
from bot.handlers.greeting_commands import router as greeting_router
from bot.handlers.greeting_events import router as greeting_events_router

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
try:
    from bot.integrations.achievement_integration import achievement_integration_manager
    from bot.handlers.achievement_commands import router as achievement_router
    ACHIEVEMENTS_AVAILABLE = True
except ImportError:
    ACHIEVEMENTS_AVAILABLE = False
    logging.warning("Achievement system not found, running without achievements")

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
try:
    from bot.handlers.passport_commands import passport_router
    PASSPORT_AVAILABLE = True
except ImportError:
    PASSPORT_AVAILABLE = False
    logging.warning("Passport system not found, running without passports")

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
try:
    from bot.services.daily_baseline_scheduler import daily_baseline_scheduler
    DAILY_RESOURCES_AVAILABLE = True
except ImportError:
    DAILY_RESOURCES_AVAILABLE = False
    logging.warning("Daily resources system not found, running without daily resources tracking")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


class NewPyBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ NewPyBot –¥–ª—è Clash of Clans
    """
    
    def __init__(self, token: str, coc_api_keys: list, database_path: str = "data/bot.db"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token: Telegram Bot Token
            coc_api_keys: –°–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π Clash of Clans
            database_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.token = token
        self.coc_api_keys = coc_api_keys
        self.database_path = database_path
        
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.clan_manager = None
        
        self._initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –±–æ—Ç–∞"""
        
        if self._initialized:
            logger.warning("Bot already initialized")
            return
        
        try:
            logger.info("üöÄ Initializing NewPyBot v1.2.2...")
            
            # 1. –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            self.bot = Bot(token=self.token)
            self.dp = Dispatcher(storage=MemoryStorage())
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∞–Ω–æ–≤
            clan_config = init_clan_config(
                coc_api_keys=self.coc_api_keys,
                database_path=self.database_path,
                max_clans_per_chat=10
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            validation_errors = clan_config.validate()
            if validation_errors:
                logger.error("‚ùå Clan configuration errors:")
                for error in validation_errors:
                    logger.error(f"  - {error}")
                raise ValueError("Invalid clan configuration")
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∫–ª–∞–Ω–æ–≤
            logger.info("üìä Initializing clan system...")
            self.clan_manager = await init_clan_system(
                bot=self.bot,
                dp=self.dp,
                coc_api_keys=self.coc_api_keys,
                db_path=self.database_path
            )
            
            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
            logger.info("ü§ù Initializing greeting system...")
            await initialize_greeting_system(self.bot)
            
            # 5. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
            self.dp.include_router(greeting_router)
            self.dp.include_router(greeting_events_router)
            logger.info("‚úÖ Greeting system handlers registered")
            
            # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if ACHIEVEMENTS_AVAILABLE:
                logger.info("üèÜ Initializing achievement system...")
                await achievement_integration_manager.initialize(self.bot, self.dp)
                self.dp.include_router(achievement_router)
                logger.info("‚úÖ Achievement system initialized")
            
            # 7. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if PASSPORT_AVAILABLE:
                logger.info("üìã Registering passport system...")
                self.dp.include_router(passport_router)
                logger.info("‚úÖ Passport system registered")
            
            # 8. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–∞–∑–∏—Å–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if DAILY_RESOURCES_AVAILABLE:
                logger.info("‚è∞ Starting daily baseline scheduler...")
                await daily_baseline_scheduler.start()
                logger.info("‚úÖ Daily baseline scheduler started")
            
            # 9. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            await self._setup_bot_commands()
            
            # 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            await self._check_systems_status()
            
            self._initialized = True
            logger.info("‚úÖ NewPyBot fully initialized!")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize bot: {e}")
            await self.shutdown()
            raise
    
    async def _setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        
        commands = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand(command="help", description="üìö –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
            BotCommand(command="status", description="üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
            
            # –ö–æ–º–∞–Ω–¥—ã –∫–ª–∞–Ω–æ–≤
            BotCommand(command="register_clan", description="üè∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–Ω–∞"),
            BotCommand(command="clan_list", description="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤"),
            BotCommand(command="clan_info", description="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ"),
            BotCommand(command="clan_members", description="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞"),
            BotCommand(command="clan_stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞"),
            
            # –ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
            BotCommand(command="greeting", description="ü§ù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"),
            BotCommand(command="greeting_on", description="‚úÖ –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"),
            BotCommand(command="greeting_off", description="‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"),
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if ACHIEVEMENTS_AVAILABLE:
            commands.extend([
                BotCommand(command="achievements", description="üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"),
                BotCommand(command="my_progress", description="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if PASSPORT_AVAILABLE:
            commands.extend([
                BotCommand(command="create_passport", description="üìã –°–æ–∑–¥–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç"),
                BotCommand(command="passport", description="üë§ –ú–æ–π –ø–∞—Å–ø–æ—Ä—Ç"),
                BotCommand(command="passport_list", description="üìÑ –°–ø–∏—Å–æ–∫ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤"),
            ])
        
        await self.bot.set_my_commands(commands)
        logger.info(f"‚úÖ Set {len(commands)} bot commands")
    
    async def _check_systems_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        
        status_report = []
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞–Ω–æ–≤
        if self.clan_manager:
            clan_status = await self.clan_manager.get_system_status()
            status_report.append(f"üè∞ Clan System: {clan_status}")
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        try:
            from bot.integrations.greeting_integration import greeting_integration
            greeting_info = await greeting_integration.get_greeting_statistics_summary()
            if greeting_info:
                status_report.append(f"ü§ù Greeting System: {greeting_info.get('enabled_chats', 0)} active chats")
            else:
                status_report.append("ü§ù Greeting System: Active")
        except Exception as e:
            status_report.append(f"ü§ù Greeting System: Error - {e}")
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if ACHIEVEMENTS_AVAILABLE:
            status_report.append("üèÜ Achievement System: Active")
        else:
            status_report.append("üèÜ Achievement System: Not Available")
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
        if PASSPORT_AVAILABLE:
            status_report.append("üìã Passport System: Active")
        else:
            status_report.append("üìã Passport System: Not Available")
        
        logger.info("üìä Systems Status Report:")
        for status in status_report:
            logger.info(f"  {status}")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –±–æ—Ç–∞"""
        
        if not self._initialized:
            await self.initialize()
        
        try:
            logger.info("üöÄ Starting bot polling...")
            await self.dp.start_polling(self.bot)
        except KeyboardInterrupt:
            logger.info("üëã Bot stopped by user")
        except Exception as e:
            logger.error(f"‚ùå Polling error: {e}")
            raise
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        
        try:
            logger.info("üõë Shutting down NewPyBot...")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
            try:
                await shutdown_greeting_system()
                logger.info("‚úÖ Greeting system shut down")
            except Exception as e:
                logger.error(f"‚ùå Error shutting down greeting system: {e}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            if ACHIEVEMENTS_AVAILABLE:
                try:
                    await achievement_integration_manager.shutdown()
                    logger.info("‚úÖ Achievement system shut down")
                except Exception as e:
                    logger.error(f"‚ùå Error shutting down achievement system: {e}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–∞–∑–∏—Å–æ–≤
            if DAILY_RESOURCES_AVAILABLE:
                try:
                    await daily_baseline_scheduler.stop()
                    logger.info("‚úÖ Daily baseline scheduler stopped")
                except Exception as e:
                    logger.error(f"‚ùå Error stopping daily baseline scheduler: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            if self.bot:
                await self.bot.session.close()
                logger.info("‚úÖ Bot session closed")
            
            logger.info("üëã NewPyBot shutdown complete")
            
        except Exception as e:
            logger.error(f"‚ùå Error during shutdown: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN environment variable is required")
        return
    
    # API –∫–ª—é—á–∏ Clash of Clans
    coc_api_keys = []
    for i in range(1, 6):  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–æ 5 –∫–ª—é—á–µ–π
        key = os.getenv(f'COC_API_KEY_{i}')
        if key:
            coc_api_keys.append(key)
    
    if not coc_api_keys:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∫–ª—é—á
        single_key = os.getenv('COC_API_KEY')
        if single_key:
            coc_api_keys.append(single_key)
        else:
            logger.warning("‚ö†Ô∏è No CoC API keys provided, clan functionality will be limited")
            coc_api_keys = ["dummy_key"]  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ CoC API
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_path = os.getenv('DATABASE_PATH', 'data/bot.db')
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    os.makedirs(os.path.dirname(database_path), exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = NewPyBot(
        token=token,
        coc_api_keys=coc_api_keys,
        database_path=database_path
    )
    
    try:
        await bot.start_polling()
    finally:
        await bot.shutdown()


def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    run_bot()