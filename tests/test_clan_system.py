"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞–Ω–æ–≤
"""
import asyncio
import pytest
from pathlib import Path
import tempfile
import os

# –¢–µ—Å—Ç—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–≥–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
try:
    from bot.services.database_init import init_clan_database
    from bot.models.clan_models import ClanData, ClanInfo
    from bot.utils.validators import ClanTagValidator, ValidationHelper
    DEPENDENCIES_AVAILABLE = True
except ImportError:
    DEPENDENCIES_AVAILABLE = False

# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
pytestmark = pytest.mark.skipif(
    not DEPENDENCIES_AVAILABLE, 
    reason="Dependencies not installed"
)


class TestClanTagValidator:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Ç–µ–≥–æ–≤ –∫–ª–∞–Ω–æ–≤"""
    
    def test_valid_clan_tags(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ–≥–æ–≤"""
        valid_tags = [
            "#2PP0JCCL",
            "#ABC123", 
            "#9RJCUV",
            "#28QG2RR22"
        ]
        
        for tag in valid_tags:
            is_valid, error = ClanTagValidator.validate_clan_tag(tag)
            assert is_valid, f"Tag {tag} should be valid, got error: {error}"
    
    def test_invalid_clan_tags(self):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ–≥–æ–≤"""
        invalid_tags = [
            "",  # –ü—É—Å—Ç–æ–π
            "#",  # –¢–æ–ª—å–∫–æ —Ä–µ—à–µ—Ç–∫–∞
            "ABC123",  # –ë–µ–∑ —Ä–µ—à–µ—Ç–∫–∏
            "#AB",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
            "#TOOLONGTAGNAME",  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            "#ABC123XYZ456",  # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        ]
        
        for tag in invalid_tags:
            is_valid, error = ClanTagValidator.validate_clan_tag(tag)
            assert not is_valid, f"Tag {tag} should be invalid"
            assert error is not None, f"Error message should be provided for {tag}"
    
    def test_normalize_clan_tag(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤"""
        test_cases = [
            ("2pp0jccl", "#2PP0JCCL"),
            ("#abc123", "#ABC123"),
            ("  #xyz456  ", "#XYZ456"),
            ("9rjcuv", "#9RJCUV"),
        ]
        
        for input_tag, expected in test_cases:
            normalized = ClanTagValidator.normalize_clan_tag(input_tag)
            assert normalized == expected, f"Expected {expected}, got {normalized}"


class TestClanModels:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_clan_data_from_api_response(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è ClanData –∏–∑ –æ—Ç–≤–µ—Ç–∞ API"""
        api_response = {
            'tag': '#2PP0JCCL',
            'name': 'Russians Kings',
            'description': 'Test clan',
            'clanLevel': 15,
            'clanPoints': 45000,
            'members': 47,
            'warWins': 250,
            'warWinStreak': 5,
            'location': {'name': 'Russia'},
            'badgeUrls': {'medium': 'https://example.com/badge.png'}
        }
        
        clan_data = ClanData.from_api_response(api_response)
        
        assert clan_data.tag == '#2PP0JCCL'
        assert clan_data.name == 'Russians Kings'
        assert clan_data.level == 15
        assert clan_data.points == 45000
        assert clan_data.member_count == 47
        assert clan_data.war_wins == 250
        assert clan_data.war_win_streak == 5
        assert clan_data.location == 'Russia'


@pytest.mark.asyncio
class TestDatabase:
    """–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    async def test_database_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_file:
            db_path = tmp_file.name
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
            initializer = await init_clan_database(db_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
            integrity_ok = await initializer.check_database_integrity()
            assert integrity_ok, "Database integrity check should pass"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
            db_info = await initializer.get_database_info()
            assert db_info['database_path'] == db_path
            assert 'tables' in db_info
            assert db_info['tables']['registered_clans'] == 0
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
            if os.path.exists(db_path):
                os.unlink(db_path)


class TestValidationHelper:
    """–¢–µ—Å—Ç—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤"""
    
    def test_validate_chat_context(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞"""
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º)
        is_valid, error = ValidationHelper.validate_chat_context(12345, 67890)
        assert not is_valid
        assert "–≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö" in error
        
        # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º)
        is_valid, error = ValidationHelper.validate_chat_context(-12345, 67890)
        assert is_valid
        assert error is None
    
    def test_validate_clan_number(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∫–ª–∞–Ω–∞"""
        # –í–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä
        is_valid, error, number = ValidationHelper.validate_clan_number("2", 5)
        assert is_valid
        assert error is None
        assert number == 2
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä (–Ω–µ —á–∏—Å–ª–æ)
        is_valid, error, number = ValidationHelper.validate_clan_number("abc", 5)
        assert not is_valid
        assert "—á–∏—Å–ª–æ–º" in error
        assert number is None
        
        # –ù–æ–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        is_valid, error, number = ValidationHelper.validate_clan_number("10", 5)
        assert not is_valid
        assert "–±–æ–ª—å—à–µ 5" in error


def run_basic_tests():
    """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ pytest"""
    print("üß™ Running basic clan system tests...")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Ç–µ–≥–æ–≤
    print("‚úÖ Testing clan tag validator...")
    validator = TestClanTagValidator()
    validator.test_valid_clan_tags()
    validator.test_invalid_clan_tags()
    validator.test_normalize_clan_tag()
    
    # –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π
    print("‚úÖ Testing clan models...")
    models_test = TestClanModels()
    models_test.test_clan_data_from_api_response()
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    print("‚úÖ Testing validation helpers...")
    validation_test = TestValidationHelper()
    validation_test.test_validate_chat_context()
    validation_test.test_validate_clan_number()
    
    print("üéâ All basic tests passed!")


if __name__ == "__main__":
    if DEPENDENCIES_AVAILABLE:
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç asyncio
        async def run_async_tests():
            db_test = TestDatabase()
            await db_test.test_database_initialization()
            print("‚úÖ Database tests passed!")
        
        run_basic_tests()
        asyncio.run(run_async_tests())
    else:
        print("‚ö†Ô∏è  Dependencies not available, skipping tests")
        print("Install dependencies with: pip install -r requirements.txt")