"""
–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
"""

from dataclasses import dataclass
from datetime import datetime
from typing import Optional, Dict, Any
import json


@dataclass
class GreetingSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —á–∞—Ç–∞"""
    
    chat_id: int
    is_enabled: bool = False
    greeting_text: Optional[str] = None
    welcome_sticker: Optional[str] = None
    delete_after_seconds: Optional[int] = None  # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ N —Å–µ–∫—É–Ω–¥
    mention_user: bool = True  # –£–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏
    show_rules_button: bool = False  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    rules_text: Optional[str] = None
    created_by: Optional[int] = None  # ID –∞–¥–º–∏–Ω–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    created_date: datetime = None
    updated_date: datetime = None
    
    def __post_init__(self):
        if self.created_date is None:
            self.created_date = datetime.now()
        if self.updated_date is None:
            self.updated_date = datetime.now()
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
        return {
            'chat_id': self.chat_id,
            'is_enabled': self.is_enabled,
            'greeting_text': self.greeting_text,
            'welcome_sticker': self.welcome_sticker,
            'delete_after_seconds': self.delete_after_seconds,
            'mention_user': self.mention_user,
            'show_rules_button': self.show_rules_button,
            'rules_text': self.rules_text,
            'created_by': self.created_by,
            'created_date': self.created_date.isoformat() if self.created_date else None,
            'updated_date': self.updated_date.isoformat() if self.updated_date else None
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'GreetingSettings':
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            chat_id=data['chat_id'],
            is_enabled=data.get('is_enabled', False),
            greeting_text=data.get('greeting_text'),
            welcome_sticker=data.get('welcome_sticker'),
            delete_after_seconds=data.get('delete_after_seconds'),
            mention_user=data.get('mention_user', True),
            show_rules_button=data.get('show_rules_button', False),
            rules_text=data.get('rules_text'),
            created_by=data.get('created_by'),
            created_date=datetime.fromisoformat(data['created_date']) if data.get('created_date') else None,
            updated_date=datetime.fromisoformat(data['updated_date']) if data.get('updated_date') else None
        )
    
    def format_greeting_for_user(self, user_first_name: str, username: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if not self.greeting_text:
            # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            mention = f"@{username}" if username else user_first_name
            return f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç, {mention}!"
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
        formatted_text = self.greeting_text
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:
        placeholders = {
            '{name}': user_first_name,
            '{username}': f"@{username}" if username else user_first_name,
            '{mention}': f"@{username}" if username else user_first_name,
            '{first_name}': user_first_name
        }
        
        for placeholder, value in placeholders.items():
            formatted_text = formatted_text.replace(placeholder, value)
        
        return formatted_text
    
    def update_settings(self, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        
        for key, value in kwargs.items():
            if hasattr(self, key):
                setattr(self, key, value)
        
        self.updated_date = datetime.now()


@dataclass
class GreetingStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    
    chat_id: int
    total_greetings_sent: int = 0
    last_greeting_date: Optional[datetime] = None
    average_new_members_per_day: float = 0.0
    most_active_day: Optional[str] = None  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    greeting_effectiveness: float = 0.0  # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    
    def increment_greeting_count(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
        self.total_greetings_sent += 1
        self.last_greeting_date = datetime.now()
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'chat_id': self.chat_id,
            'total_greetings_sent': self.total_greetings_sent,
            'last_greeting_date': self.last_greeting_date.isoformat() if self.last_greeting_date else None,
            'average_new_members_per_day': self.average_new_members_per_day,
            'most_active_day': self.most_active_day,
            'greeting_effectiveness': self.greeting_effectiveness
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'GreetingStats':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            chat_id=data['chat_id'],
            total_greetings_sent=data.get('total_greetings_sent', 0),
            last_greeting_date=datetime.fromisoformat(data['last_greeting_date']) if data.get('last_greeting_date') else None,
            average_new_members_per_day=data.get('average_new_members_per_day', 0.0),
            most_active_day=data.get('most_active_day'),
            greeting_effectiveness=data.get('greeting_effectiveness', 0.0)
        )


# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
GREETING_TEMPLATES = {
    'friendly': 'üëã –ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π —á–∞—Ç! –ù–∞–¥–µ–µ–º—Å—è, —Ç–µ–±–µ –∑–¥–µ—Å—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è! üòä',
    
    'clan_welcome': 'üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∞–Ω, {name}! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–∏—Ö —Ä—è–¥–∞—Ö. –ì–æ—Ç–æ–≤ –∫ –≤–µ–ª–∏–∫–∏–º —Å—Ä–∞–∂–µ–Ω–∏—è–º? ‚öîÔ∏è',
    
    'formal': 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç, {name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.',
    
    'gaming': 'üéÆ –ô–æ, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∏–≥—Ä–æ–≤—É—é —Ç—É—Å–æ–≤–∫—É! –ì–æ—Ç–æ–≤ –∫ —ç–ø–∏—á–µ—Å–∫–∏–º –±–∞—Ç–ª–∞–º –≤ Clash of Clans? üî•',
    
    'helpful': 'üëã –ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ Clash of Clans –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –æ–±—Ä–∞—â–∞–π—Å—è! üí™',
    
    'community': 'üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, {name}! –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –¥—Ä—É–∑–µ–π, —Å–æ–≤–µ—Ç—ã –∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üí¨'
}