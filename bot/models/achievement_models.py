"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
–§–∞–∑–∞ 6: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Any, Set
import json

class AchievementCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    SOCIAL = "social"              # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ, –ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º)
    GAME_PROGRESS = "game_progress"  # –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–∫—É–±–∫–∏, —É—Ä–æ–≤–µ–Ω—å, –∞—Ç–∞–∫–∏)
    CLAN_CONTRIBUTION = "clan_contribution"  # –í–∫–ª–∞–¥ –≤ –∫–ª–∞–Ω (—É—á–∞—Å—Ç–∏–µ –≤ –≤–æ–π–Ω–∞—Ö, –¥–æ–Ω–∞—Ç—ã)
    SYSTEM_MASTERY = "system_mastery"  # –û—Å–≤–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞, –ø—Ä–∏–≤—è–∑–∫–∏)
    LEADERSHIP = "leadership"      # –õ–∏–¥–µ—Ä—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–º, –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ)
    SPECIAL_EVENTS = "special_events"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    MILESTONES = "milestones"     # –í–∞–∂–Ω—ã–µ –≤–µ—Ö–∏ –∏ —é–±–∏–ª–µ–∏


class AchievementDifficulty(Enum):
    """–°–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    BRONZE = "bronze"     # –õ–µ–≥–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
    SILVER = "silver"     # –°—Ä–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
    GOLD = "gold"         # –°–ª–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    PLATINUM = "platinum" # –û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    DIAMOND = "diamond"   # –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö


class AchievementStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    LOCKED = "locked"         # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (—É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)
    AVAILABLE = "available"   # –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    IN_PROGRESS = "in_progress"  # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    COMPLETED = "completed"   # –ó–∞–≤–µ—Ä—à–µ–Ω–æ
    CLAIMED = "claimed"       # –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞


class RewardType(Enum):
    """–¢–∏–ø—ã –Ω–∞–≥—Ä–∞–¥"""
    TITLE = "title"           # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏—Ç—É–ª/–∑–≤–∞–Ω–∏–µ
    BADGE = "badge"           # –ó–Ω–∞—á–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    POINTS = "points"         # –û—á–∫–∏ –æ–ø—ã—Ç–∞/—Ä–µ–π—Ç–∏–Ω–≥–∞
    PRIVILEGE = "privilege"   # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
    COSMETIC = "cosmetic"     # –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
    ACCESS = "access"         # –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º


@dataclass
class AchievementReward:
    """–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"""
    reward_type: RewardType
    reward_id: str
    name: str
    description: str
    value: Any = None  # –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤)
    icon: str = "üèÜ"
    is_permanent: bool = True
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            'reward_type': self.reward_type.value,
            'reward_id': self.reward_id,
            'name': self.name,
            'description': self.description,
            'value': self.value,
            'icon': self.icon,
            'is_permanent': self.is_permanent
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'AchievementReward':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            reward_type=RewardType(data['reward_type']),
            reward_id=data['reward_id'],
            name=data['name'],
            description=data['description'],
            value=data.get('value'),
            icon=data.get('icon', 'üèÜ'),
            is_permanent=data.get('is_permanent', True)
        )


@dataclass
class AchievementRequirement:
    """–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    requirement_type: str  # –¢–∏–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (messages_count, clan_wars_won, etc.)
    target_value: Any      # –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    current_value: Any = 0 # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    comparison: str = "gte"  # –¢–∏–ø —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (gte, eq, lt, etc.)
    
    def is_completed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        if self.comparison == "gte":
            return self.current_value >= self.target_value
        elif self.comparison == "eq":
            return self.current_value == self.target_value
        elif self.comparison == "lt":
            return self.current_value < self.target_value
        elif self.comparison == "lte":
            return self.current_value <= self.target_value
        elif self.comparison == "gt":
            return self.current_value > self.target_value
        return False
    
    def get_progress_percentage(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if self.comparison in ["eq", "lt", "lte", "gt"]:
            return 100.0 if self.is_completed() else 0.0
        
        try:
            if isinstance(self.target_value, (int, float)) and self.target_value > 0:
                progress = min(self.current_value / self.target_value * 100, 100)
                return max(progress, 0)
        except (TypeError, ZeroDivisionError):
            pass
        
        return 0.0
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'requirement_type': self.requirement_type,
            'target_value': self.target_value,
            'current_value': self.current_value,
            'comparison': self.comparison
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'AchievementRequirement':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            requirement_type=data['requirement_type'],
            target_value=data['target_value'],
            current_value=data.get('current_value', 0),
            comparison=data.get('comparison', 'gte')
        )


@dataclass
class Achievement:
    """–ú–æ–¥–µ–ª—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    achievement_id: str
    name: str
    description: str
    category: AchievementCategory
    difficulty: AchievementDifficulty
    requirements: List[AchievementRequirement]
    rewards: List[AchievementReward]
    icon: str = "üèÜ"
    hidden: bool = False  # –°–∫—Ä—ã—Ç–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    prerequisites: List[str] = field(default_factory=list)  # ID –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    max_progress: int = 100
    
    def get_overall_progress(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        if not self.requirements:
            return 100.0
        
        total_progress = sum(req.get_progress_percentage() for req in self.requirements)
        return total_progress / len(self.requirements)
    
    def is_completed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        return all(req.is_completed() for req in self.requirements)
    
    def get_status_description(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        progress = self.get_overall_progress()
        
        if progress == 100:
            return "–ó–∞–≤–µ—Ä—à–µ–Ω–æ!"
        elif progress > 0:
            return f"–í –ø—Ä–æ—Ü–µ—Å—Å–µ ({progress:.0f}%)"
        else:
            return "–ù–µ –Ω–∞—á–∞—Ç–æ"
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            'achievement_id': self.achievement_id,
            'name': self.name,
            'description': self.description,
            'category': self.category.value,
            'difficulty': self.difficulty.value,
            'requirements': [req.to_dict() for req in self.requirements],
            'rewards': [reward.to_dict() for reward in self.rewards],
            'icon': self.icon,
            'hidden': self.hidden,
            'prerequisites': self.prerequisites,
            'max_progress': self.max_progress
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Achievement':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            achievement_id=data['achievement_id'],
            name=data['name'],
            description=data['description'],
            category=AchievementCategory(data['category']),
            difficulty=AchievementDifficulty(data['difficulty']),
            requirements=[AchievementRequirement.from_dict(req) for req in data.get('requirements', [])],
            rewards=[AchievementReward.from_dict(reward) for reward in data.get('rewards', [])],
            icon=data.get('icon', 'üèÜ'),
            hidden=data.get('hidden', False),
            prerequisites=data.get('prerequisites', []),
            max_progress=data.get('max_progress', 100)
        )


@dataclass
class UserAchievementProgress:
    """–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é"""
    user_id: int
    chat_id: int
    achievement_id: str
    status: AchievementStatus
    progress_percentage: float = 0.0
    started_date: Optional[datetime] = None
    completed_date: Optional[datetime] = None
    claimed_date: Optional[datetime] = None
    current_values: Dict[str, Any] = field(default_factory=dict)  # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    
    def update_progress(self, requirement_type: str, value: Any):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"""
        self.current_values[requirement_type] = value
        
        # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
        if self.status == AchievementStatus.LOCKED and value > 0:
            self.status = AchievementStatus.IN_PROGRESS
            self.started_date = datetime.now()
    
    def complete_achievement(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        self.status = AchievementStatus.COMPLETED
        self.completed_date = datetime.now()
        self.progress_percentage = 100.0
    
    def claim_rewards(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥"""
        if self.status == AchievementStatus.COMPLETED:
            self.status = AchievementStatus.CLAIMED
            self.claimed_date = datetime.now()
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'user_id': self.user_id,
            'chat_id': self.chat_id,
            'achievement_id': self.achievement_id,
            'status': self.status.value,
            'progress_percentage': self.progress_percentage,
            'started_date': self.started_date.isoformat() if self.started_date else None,
            'completed_date': self.completed_date.isoformat() if self.completed_date else None,
            'claimed_date': self.claimed_date.isoformat() if self.claimed_date else None,
            'current_values': self.current_values
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'UserAchievementProgress':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            user_id=data['user_id'],
            chat_id=data['chat_id'],
            achievement_id=data['achievement_id'],
            status=AchievementStatus(data['status']),
            progress_percentage=data.get('progress_percentage', 0.0),
            started_date=datetime.fromisoformat(data['started_date']) if data.get('started_date') else None,
            completed_date=datetime.fromisoformat(data['completed_date']) if data.get('completed_date') else None,
            claimed_date=datetime.fromisoformat(data['claimed_date']) if data.get('claimed_date') else None,
            current_values=data.get('current_values', {})
        )


@dataclass  
class UserProfile:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏"""
    user_id: int
    chat_id: int
    total_points: int = 0
    level: int = 1
    experience_points: int = 0
    titles: Set[str] = field(default_factory=set)
    badges: Set[str] = field(default_factory=set)
    privileges: Set[str] = field(default_factory=set)
    achievements_completed: int = 0
    achievements_claimed: int = 0
    join_date: datetime = field(default_factory=datetime.now)
    last_achievement_date: Optional[datetime] = None
    
    def add_points(self, points: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞"""
        self.experience_points += points
        self.total_points += points
        self._check_level_up()
    
    def _check_level_up(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
        required_exp = self._calculate_required_experience(self.level + 1)
        
        while self.experience_points >= required_exp:
            self.level += 1
            required_exp = self._calculate_required_experience(self.level + 1)
    
    def _calculate_required_experience(self, level: int) -> int:
        """–†–∞—Å—á–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è"""
        # –§–æ—Ä–º—É–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏: –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞
        return int(100 * (level ** 1.5))
    
    def get_progress_to_next_level(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        current_level_exp = self._calculate_required_experience(self.level)
        next_level_exp = self._calculate_required_experience(self.level + 1)
        
        exp_for_current_level = self.experience_points - current_level_exp
        exp_needed_for_next = next_level_exp - current_level_exp
        
        progress_percentage = (exp_for_current_level / exp_needed_for_next) * 100
        
        return {
            'current_level': self.level,
            'next_level': self.level + 1,
            'current_exp': exp_for_current_level,
            'needed_exp': exp_needed_for_next,
            'progress_percentage': min(progress_percentage, 100),
            'total_exp': self.experience_points
        }
    
    def add_title(self, title: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞"""
        self.titles.add(title)
    
    def add_badge(self, badge: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–∫–∞"""
        self.badges.add(badge)
    
    def add_privilege(self, privilege: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏"""
        self.privileges.add(privilege)
    
    def has_privilege(self, privilege: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏"""
        return privilege in self.privileges
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'user_id': self.user_id,
            'chat_id': self.chat_id,
            'total_points': self.total_points,
            'level': self.level,
            'experience_points': self.experience_points,
            'titles': list(self.titles),
            'badges': list(self.badges),
            'privileges': list(self.privileges),
            'achievements_completed': self.achievements_completed,
            'achievements_claimed': self.achievements_claimed,
            'join_date': self.join_date.isoformat(),
            'last_achievement_date': self.last_achievement_date.isoformat() if self.last_achievement_date else None
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'UserProfile':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            user_id=data['user_id'],
            chat_id=data['chat_id'],
            total_points=data.get('total_points', 0),
            level=data.get('level', 1),
            experience_points=data.get('experience_points', 0),
            titles=set(data.get('titles', [])),
            badges=set(data.get('badges', [])),
            privileges=set(data.get('privileges', [])),
            achievements_completed=data.get('achievements_completed', 0),
            achievements_claimed=data.get('achievements_claimed', 0),
            join_date=datetime.fromisoformat(data['join_date']) if data.get('join_date') else datetime.now(),
            last_achievement_date=datetime.fromisoformat(data['last_achievement_date']) if data.get('last_achievement_date') else None
        )


@dataclass
class LeaderboardEntry:
    """–ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤"""
    user_id: int
    chat_id: int
    username: str
    display_name: str
    score: float
    rank: int
    category: str  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    additional_info: Dict[str, Any] = field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'user_id': self.user_id,
            'chat_id': self.chat_id,
            'username': self.username,
            'display_name': self.display_name,
            'score': self.score,
            'rank': self.rank,
            'category': self.category,
            'additional_info': self.additional_info
        }


# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
SYSTEM_ACHIEVEMENTS = {
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    "first_message": Achievement(
        achievement_id="first_message",
        name="–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
        description="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç",
        category=AchievementCategory.SOCIAL,
        difficulty=AchievementDifficulty.BRONZE,
        requirements=[
            AchievementRequirement("messages_count", 1)
        ],
        rewards=[
            AchievementReward(RewardType.POINTS, "welcome_points", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—á–∫–∏", "–û—á–∫–∏ –∑–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 10),
            AchievementReward(RewardType.TITLE, "newcomer", "–ù–æ–≤–∏—á–æ–∫", "–¢–∏—Ç—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", icon="üå±")
        ],
        icon="üí¨"
    ),
    
    "active_chatter": Achievement(
        achievement_id="active_chatter",
        name="–ê–∫—Ç–∏–≤–Ω—ã–π –±–æ–ª—Ç—É–Ω",
        description="–û—Ç–ø—Ä–∞–≤—å—Ç–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç",
        category=AchievementCategory.SOCIAL,
        difficulty=AchievementDifficulty.SILVER,
        requirements=[
            AchievementRequirement("messages_count", 100)
        ],
        rewards=[
            AchievementReward(RewardType.POINTS, "active_points", "–û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ", 50),
            AchievementReward(RewardType.BADGE, "chatter_badge", "–ó–Ω–∞—á–æ–∫ –±–æ–ª—Ç—É–Ω–∞", "–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ", icon="üí¨")
        ],
        icon="üó£Ô∏è"
    ),
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    "passport_created": Achievement(
        achievement_id="passport_created",
        name="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        description="–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–∞—Å–ø–æ—Ä—Ç –≤ —Å–∏—Å—Ç–µ–º–µ",
        category=AchievementCategory.SYSTEM_MASTERY,
        difficulty=AchievementDifficulty.BRONZE,
        requirements=[
            AchievementRequirement("passport_created", True, comparison="eq")
        ],
        rewards=[
            AchievementReward(RewardType.POINTS, "passport_points", "–û—á–∫–∏ –∑–∞ –ø–∞—Å–ø–æ—Ä—Ç", "–ó–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞", 25),
            AchievementReward(RewardType.PRIVILEGE, "profile_access", "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        ],
        icon="üìã"
    ),
    
    "player_bound": Achievement(
        achievement_id="player_bound",
        name="–°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        description="–ü—Ä–∏–≤—è–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ Clash of Clans",
        category=AchievementCategory.SYSTEM_MASTERY,
        difficulty=AchievementDifficulty.SILVER,
        requirements=[
            AchievementRequirement("player_bound", True, comparison="eq")
        ],
        rewards=[
            AchievementReward(RewardType.POINTS, "binding_points", "–û—á–∫–∏ –∑–∞ –ø—Ä–∏–≤—è–∑–∫—É", "–ó–∞ –ø—Ä–∏–≤—è–∑–∫—É –∏–≥—Ä–æ–∫–∞", 40),
            AchievementReward(RewardType.PRIVILEGE, "game_stats", "–ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–î–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º")
        ],
        prerequisites=["passport_created"],
        icon="üéÆ"
    ),
    
    # –ö–ª–∞–Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    "clan_member": Achievement(
        achievement_id="clan_member",
        name="–ß–ª–µ–Ω —Å–µ–º—å–∏",
        description="–°—Ç–∞–Ω—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–ª–∞–Ω–∞",
        category=AchievementCategory.CLAN_CONTRIBUTION,
        difficulty=AchievementDifficulty.SILVER,
        requirements=[
            AchievementRequirement("clan_membership", True, comparison="eq")
        ],
        rewards=[
            AchievementReward(RewardType.POINTS, "clan_points", "–ö–ª–∞–Ω–æ–≤—ã–µ –æ—á–∫–∏", "–ó–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω", 30),
            AchievementReward(RewardType.TITLE, "clan_member", "–ö–ª–∞–Ω–æ–≤–µ—Ü", "–¢–∏—Ç—É–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–ª–∞–Ω–∞", icon="üè∞")
        ],
        icon="üè∞"
    ),
    
    # –ò–≥—Ä–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    "trophy_hunter": Achievement(
        achievement_id="trophy_hunter",
        name="–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∫—É–±–∫–∞–º–∏",
        description="–ù–∞–±–µ—Ä–∏—Ç–µ 3000+ –∫—É–±–∫–æ–≤",
        category=AchievementCategory.GAME_PROGRESS,
        difficulty=AchievementDifficulty.GOLD,
        requirements=[
            AchievementRequirement("trophies", 3000)
        ],
        rewards=[
            AchievementReward(RewardType.POINTS, "trophy_points", "–¢—Ä–æ—Ñ–µ–π–Ω—ã–µ –æ—á–∫–∏", "–ó–∞ –≤—ã—Å–æ–∫–∏–µ –∫—É–±–∫–∏", 75),
            AchievementReward(RewardType.BADGE, "trophy_badge", "–ó–æ–ª–æ—Ç–æ–π –∫—É–±–æ–∫", "–ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ –∫—É–±–∫–∞—Ö", icon="üèÜ")
        ],
        prerequisites=["player_bound"],
        icon="üèÜ"
    ),
}