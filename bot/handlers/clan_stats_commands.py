"""
–ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∞–Ω–∞: –¥–æ–Ω–∞—Ç—ã, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏, —Ç–æ–ø —á–∞—Ç–∞
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.filters.command import CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import logging
from typing import Dict, List, Optional
from datetime import datetime

from ..services.extended_clash_api import ExtendedClashAPI
from ..services.clan_database_service import get_clan_db_service

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("donations", "donates"))
async def cmd_clan_donations(message: Message, command: CommandObject):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤ –∫–ª–∞–Ω–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /donations [—Ç–µ–≥_–∫–ª–∞–Ω–∞]
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞
        clan_tag = None
        if command.args:
            clan_tag = command.args.strip()
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞–Ω –∏–∑ —á–∞—Ç–∞
            clan_db = get_clan_db_service()
            clans = await clan_db.get_chat_clans(message.chat.id)
            if clans:
                clan_tag = clans[0]['clan_tag']
        
        if not clan_tag:
            await message.reply(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ –∫–ª–∞–Ω–∞: /donations #TAG\n"
                "–ò–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–ª–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
            )
            return
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–≥
        if not clan_tag.startswith('#'):
            clan_tag = '#' + clan_tag
        
        await message.reply("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–Ω–∞—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ API
        clash_api = ExtendedClashAPI([])  # TODO: –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
        clan_data = await clash_api.get_clan(clan_tag)
        
        if not clan_data:
            await message.reply("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –¥–æ–Ω–∞—Ç–∞–º
        members = clan_data.get('memberList', [])
        members_sorted = sorted(members, key=lambda x: x.get('donations', 0), reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text_lines = [
            f"üìä <b>–î–æ–Ω–∞—Ç—ã –∫–ª–∞–Ω–∞ {clan_data.get('name', '')}</b>",
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}\n"
        ]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_donations = sum(m.get('donations', 0) for m in members)
        total_received = sum(m.get('donationsReceived', 0) for m in members)
        
        text_lines.extend([
            f"üí∞ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
            f"–û—Ç–¥–∞–Ω–æ: {total_donations:,}",
            f"–ü–æ–ª—É—á–µ–Ω–æ: {total_received:,}",
            f"–°—Ä–µ–¥–Ω–∏–π –¥–æ–Ω–∞—Ç: {total_donations // len(members) if members else 0:,}\n"
        ])
        
        # –¢–æ–ø-10 –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤
        text_lines.append("üèÜ <b>–¢–æ–ø-10 –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤:</b>")
        
        medals = ['ü•á', 'ü•à', 'ü•â']
        for i, member in enumerate(members_sorted[:10], 1):
            medal = medals[i-1] if i <= 3 else f"{i}."
            name = member.get('name', 'Unknown')
            donations = member.get('donations', 0)
            received = member.get('donationsReceived', 0)
            
            text_lines.append(
                f"{medal} <b>{name}</b>\n"
                f"    –û—Ç–¥–∞–ª: {donations:,} | –ü–æ–ª—É—á–∏–ª: {received:,}"
            )
        
        # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ–∑ –¥–æ–Ω–∞—Ç–æ–≤
        no_donations = [m for m in members if m.get('donations', 0) == 0]
        if no_donations:
            text_lines.append(f"\n‚ö†Ô∏è –ë–µ–∑ –¥–æ–Ω–∞—Ç–æ–≤: {len(no_donations)} —á–µ–ª.")
        
        await message.reply("\n".join(text_lines), parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in donations command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–Ω–∞—Ç–æ–≤")


@router.message(Command("leaders", "leadership"))
async def cmd_clan_leaders(message: Message, command: CommandObject):
    """
    –°–ø–∏—Å–æ–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–ª–∞–Ω–∞ (–≥–ª–∞–≤–∞, —Å–æ—Ä—É–∫–∏)
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /leaders [—Ç–µ–≥_–∫–ª–∞–Ω–∞]
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞
        clan_tag = None
        if command.args:
            clan_tag = command.args.strip()
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞–Ω –∏–∑ —á–∞—Ç–∞
            clan_db = get_clan_db_service()
            clans = await clan_db.get_chat_clans(message.chat.id)
            if clans:
                clan_tag = clans[0]['clan_tag']
        
        if not clan_tag:
            await message.reply(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ –∫–ª–∞–Ω–∞: /leaders #TAG\n"
                "–ò–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–ª–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
            )
            return
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–≥
        if not clan_tag.startswith('#'):
            clan_tag = '#' + clan_tag
        
        await message.reply("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ API
        clash_api = ExtendedClashAPI([])  # TODO: –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
        clan_data = await clash_api.get_clan(clan_tag)
        
        if not clan_data:
            await message.reply("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        members = clan_data.get('memberList', [])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
        leader = []
        co_leaders = []
        elders = []
        
        for member in members:
            role = member.get('role', 'member')
            if role == 'leader':
                leader.append(member)
            elif role == 'coLeader':
                co_leaders.append(member)
            elif role == 'admin':
                elders.append(member)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Ä—É–∫–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        co_leaders.sort(key=lambda x: x.get('name', '').lower())
        elders.sort(key=lambda x: x.get('name', '').lower())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text_lines = [
            f"üëë <b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫–ª–∞–Ω–∞ {clan_data.get('name', '')}</b>\n"
        ]
        
        # –ì–ª–∞–≤–∞ (–ø–µ—Ä–≤—ã–º)
        if leader:
            text_lines.append("üëë <b>–ì–ª–∞–≤–∞:</b>")
            for member in leader:
                name = member.get('name', 'Unknown')
                tag = member.get('tag', '')
                trophies = member.get('trophies', 0)
                donations = member.get('donations', 0)
                text_lines.append(
                    f"   <b>{name}</b> {tag}\n"
                    f"   üèÜ {trophies:,} | üí∞ {donations:,}\n"
                )
        
        # –°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
        if co_leaders:
            text_lines.append("üî± <b>–°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏:</b>")
            for member in co_leaders:
                name = member.get('name', 'Unknown')
                tag = member.get('tag', '')
                trophies = member.get('trophies', 0)
                donations = member.get('donations', 0)
                text_lines.append(
                    f"   ‚Ä¢ <b>{name}</b> {tag}\n"
                    f"     üèÜ {trophies:,} | üí∞ {donations:,}"
                )
            text_lines.append("")
        
        # –°—Ç–∞—Ä–µ–π—à–∏–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if elders:
            text_lines.append(f"‚≠ê <b>–°—Ç–∞—Ä–µ–π—à–∏–Ω:</b> {len(elders)} —á–µ–ª.")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text_lines.extend([
            "",
            f"üìä <b>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {len(members)}",
            f"üëë –ì–ª–∞–≤: {len(leader)}",
            f"üî± –°–æ—Ä—É–∫–æ–≤: {len(co_leaders)}",
            f"‚≠ê –°—Ç–∞—Ä–µ–π—à–∏–Ω: {len(elders)}",
            f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members) - len(leader) - len(co_leaders) - len(elders)}"
        ])
        
        await message.reply("\n".join(text_lines), parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in leaders command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π")


@router.message(Command("top"))
async def cmd_chat_top(message: Message):
    """
    –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ —Å–∏–º–≤–æ–ª–∞–º
    """
    try:
        import aiosqlite
        from ..services.clan_database_service import get_clan_db_service
        
        clan_db = get_clan_db_service()
        db_path = clan_db.db_path
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        async with aiosqlite.connect(db_path) as db:
            await db.execute("""
                CREATE TABLE IF NOT EXISTS chat_statistics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    first_name TEXT,
                    message_count INTEGER DEFAULT 0,
                    character_count INTEGER DEFAULT 0,
                    last_message_date TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(chat_id, user_id)
                )
            """)
            await db.execute("""
                CREATE INDEX IF NOT EXISTS idx_chat_stats 
                ON chat_statistics(chat_id, message_count DESC)
            """)
            await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor = await db.execute("""
                SELECT 
                    user_id, username, first_name, 
                    message_count, character_count
                FROM chat_statistics
                WHERE chat_id = ?
                ORDER BY message_count DESC
                LIMIT 15
            """, (message.chat.id,))
            
            rows = await cursor.fetchall()
        
        if not rows:
            await message.reply(
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n"
                "–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è, –∏ —è –±—É–¥—É —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text_lines = [
            "üìä <b>–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞</b>\n"
        ]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_messages = sum(row[3] for row in rows)
        total_chars = sum(row[4] for row in rows)
        
        text_lines.extend([
            f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages:,}",
            f"üìù –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_chars:,}\n"
        ])
        
        # –¢–æ–ø –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        text_lines.append("üèÜ <b>–ü–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º:</b>")
        medals = ['ü•á', 'ü•à', 'ü•â']
        
        for i, row in enumerate(rows[:10], 1):
            user_id, username, first_name, msg_count, char_count = row
            
            medal = medals[i-1] if i <= 3 else f"{i}."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è
            if username:
                name = f"@{username}"
            elif first_name:
                name = first_name
            else:
                name = f"User {user_id}"
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ
            percent = (msg_count / total_messages * 100) if total_messages > 0 else 0
            avg_chars = char_count // msg_count if msg_count > 0 else 0
            
            text_lines.append(
                f"{medal} <b>{name}</b>\n"
                f"    üí¨ {msg_count:,} —Å–æ–æ–±—â–µ–Ω–∏–π ({percent:.1f}%)\n"
                f"    üìù {char_count:,} —Å–∏–º–≤–æ–ª–æ–≤ (—Å—Ä. {avg_chars})"
            )
        
        # –¢–æ–ø –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        rows_by_chars = sorted(rows, key=lambda x: x[4], reverse=True)[:5]
        text_lines.append("\nüìù <b>–¢–æ–ø-5 –ø–æ —Å–∏–º–≤–æ–ª–∞–º:</b>")
        
        for i, row in enumerate(rows_by_chars, 1):
            user_id, username, first_name, msg_count, char_count = row
            
            if username:
                name = f"@{username}"
            elif first_name:
                name = first_name
            else:
                name = f"User {user_id}"
            
            text_lines.append(f"{i}. <b>{name}</b> - {char_count:,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        await message.reply("\n".join(text_lines), parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in top command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞")


# Middleware –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from aiogram import BaseMiddleware
from aiogram.types import Message as AiogramMessage
from typing import Callable, Dict, Any, Awaitable


class ChatStatisticsMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
    
    async def __call__(
        self,
        handler: Callable[[AiogramMessage, Dict[str, Any]], Awaitable[Any]],
        event: AiogramMessage,
        data: Dict[str, Any]
    ) -> Any:
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await handler(event, data)
        
        # –ó–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)
        if event.chat.type in ['group', 'supergroup']:
            try:
                await self._update_statistics(event)
            except Exception as e:
                logger.error(f"Error updating chat statistics: {e}")
        
        return result
    
    async def _update_statistics(self, message: AiogramMessage):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            import aiosqlite
            from ..services.clan_database_service import get_clan_db_service
            
            clan_db = get_clan_db_service()
            db_path = clan_db.db_path
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
            char_count = len(message.text or message.caption or "")
            
            async with aiosqlite.connect(db_path) as db:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                await db.execute("""
                    INSERT INTO chat_statistics (
                        chat_id, user_id, username, first_name,
                        message_count, character_count, last_message_date
                    ) VALUES (?, ?, ?, ?, 1, ?, ?)
                    ON CONFLICT(chat_id, user_id) DO UPDATE SET
                        username = excluded.username,
                        first_name = excluded.first_name,
                        message_count = message_count + 1,
                        character_count = character_count + excluded.character_count,
                        last_message_date = excluded.last_message_date,
                        updated_at = CURRENT_TIMESTAMP
                """, (
                    message.chat.id,
                    message.from_user.id,
                    message.from_user.username,
                    message.from_user.first_name,
                    char_count,
                    datetime.now().isoformat()
                ))
                await db.commit()
                
        except Exception as e:
            logger.error(f"Error in _update_statistics: {e}")
