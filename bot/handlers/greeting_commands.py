"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional

from ..services.greeting_service import get_greeting_service, GreetingService
from ..utils.keyboards import create_inline_keyboard
from ..utils.permissions import is_admin, is_group_admin
from ..utils.formatters import format_user_mention
from ..utils.error_handler import error_handler

logger = logging.getLogger(__name__)

router = Router()


def gs() -> GreetingService:
    """–ö–æ—Ä–æ—Ç–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    return get_greeting_service()


class GreetingStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    waiting_for_greeting_text = State()
    waiting_for_rules_text = State()
    waiting_for_delete_delay = State()


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
@error_handler
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞"""
    
    welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ Clash of Clans!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–∞–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Clash of Clans.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/commands` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
‚Ä¢ `/clan_info` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ
‚Ä¢ `/clan_members` - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
‚Ä¢ `/greeting` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π (–¥–ª—è –≥—Ä—É–ø–ø)

**–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**
1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–∞—Ö

–ë–æ—Ç: @aftcocestingbot
"""
    
    await message.reply(welcome_text, parse_mode="Markdown")


@router.message(Command("commands"))
@error_handler
async def cmd_commands(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /commands - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    commands_text = """
üìã **–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞**

üè∞ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ê–ù–ê–ú–ò** (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):
‚Ä¢ `/register_clan #TAG` - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–Ω
‚Ä¢ `/clan_list` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤ —á–∞—Ç–∞
‚Ä¢ `/set_default_clan <–Ω–æ–º–µ—Ä>` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–Ω
‚Ä¢ `/rename_clan <–Ω–æ–º–µ—Ä> <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–ª–∞–Ω
‚Ä¢ `/update_clan [–Ω–æ–º–µ—Ä]` - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω–∞
‚Ä¢ `/clan_info [–Ω–æ–º–µ—Ä]` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ
‚Ä¢ `/clan_members [–Ω–æ–º–µ—Ä]` - —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–õ–ê–ù–û–í**:
‚Ä¢ `/war [–Ω–æ–º–µ—Ä|–±—É–∫–≤—ã]` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–π–Ω–µ –∫–ª–∞–Ω–∞
‚Ä¢ `/raids [–Ω–æ–º–µ—Ä|–±—É–∫–≤—ã]` - –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π–¥—ã
‚Ä¢ `/cwl [–Ω–æ–º–µ—Ä|–±—É–∫–≤—ã]` - –õ–∏–≥–∞ –í–æ–µ–Ω–Ω—ã—Ö –ö–ª–∞–Ω–æ–≤
‚Ä¢ `/leadership [–Ω–æ–º–µ—Ä|–±—É–∫–≤—ã]` - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫–ª–∞–Ω–∞
‚Ä¢ `/top_donors [–Ω–æ–º–µ—Ä|–±—É–∫–≤—ã]` - —Ç–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤

üí° **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
  `/war` - –≤–æ–π–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞–Ω–∞
  `/war 2` - –≤–æ–π–Ω–∞ –∫–ª–∞–Ω–∞ ‚Ññ2
  `/raids —Ñ–∞` - —Ä–µ–π–¥—ã –∫–ª–∞–Ω–∞ –ø–æ –±—É–∫–≤–∞–º

üìù **–ü–ê–°–ü–û–†–¢–ê**:
‚Ä¢ `/create_passport` - —Å–æ–∑–¥–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç
‚Ä¢ `/passport` - –º–æ–π –ø–∞—Å–ø–æ—Ä—Ç
‚Ä¢ `/edit_passport` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç
‚Ä¢ `/plist` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
‚Ä¢ `/dpassport` - —É–¥–∞–ª–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç

üîó **–ü–†–ò–í–Ø–ó–ö–ê –ò–ì–†–û–ö–û–í**:
‚Ä¢ `/bind #TAG` - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞
‚Ä¢ `/mybindings` - –º–æ–∏ –ø—Ä–∏–≤—è–∑–∫–∏
‚Ä¢ `/verify_player` - –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ (–∞–¥–º–∏–Ω)

ü§ù **–ü–†–ò–í–ï–¢–°–¢–í–ò–Ø** (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):
‚Ä¢ `/greeting` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
‚Ä¢ `/greeting_on` - –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
‚Ä¢ `/greeting_off` - –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

‚ÑπÔ∏è **–ò–ù–§–û–†–ú–ê–¶–ò–Ø**:
‚Ä¢ `/start` - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
‚Ä¢ `/commands` - —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

üìñ **–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.

üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –í –∫–æ–º–∞–Ω–¥–∞—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∫–ª–∞–Ω–∞ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –Ω–∞–∑–≤–∞–Ω–∏—è!
"""
    
    await message.reply(commands_text, parse_mode="Markdown")


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π

@router.message(Command("greeting"))
@error_handler
async def cmd_greeting(message: Message, state: FSMContext):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type not in ['group', 'supergroup']:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_group_admin(user_id=message.from_user.id, chat_id=message.chat.id, bot=message.bot):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏!")
        return
    
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await gs().get_greeting_settings(message.chat.id)
    stats = await gs().get_greeting_stats(message.chat.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    status_emoji = "‚úÖ" if settings.is_enabled else "‚ùå"
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if settings.is_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    
    text = f"""ü§ù **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π**

**–°—Ç–∞—Ç—É—Å:** {status_emoji} –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è {status_text}

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –¢–µ–∫—Å—Ç: {"–µ—Å—Ç—å" if settings.greeting_text else "–Ω–µ –∑–∞–¥–∞–Ω"}
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {"–¥–∞" if settings.mention_user else "–Ω–µ—Ç"}
‚Ä¢ –°—Ç–∏–∫–µ—Ä: {"–µ—Å—Ç—å" if settings.welcome_sticker else "–Ω–µ—Ç"}
‚Ä¢ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ: {"—á–µ—Ä–µ–∑ " + str(settings.delete_after_seconds) + " —Å–µ–∫" if settings.delete_after_seconds else "–Ω–µ—Ç"}
‚Ä¢ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–∏–ª: {"–¥–∞" if settings.show_rules_button else "–Ω–µ—Ç"}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π: {stats.total_greetings_sent}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {stats.average_new_members_per_day:.1f}
‚Ä¢ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {stats.most_active_day or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.greeting_effectiveness:.1f}%

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    keyboard = create_greeting_main_keyboard(settings.is_enabled)
    
    await message.reply(text, reply_markup=keyboard, parse_mode="Markdown")


def create_greeting_main_keyboard(is_enabled: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
    if is_enabled:
        buttons.append([InlineKeyboardButton(text="‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data="greeting_toggle_off")])
    else:
        buttons.append([InlineKeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data="greeting_toggle_on")])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    buttons.extend([
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="greeting_set_text")],
        [InlineKeyboardButton(text="üé® –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="greeting_templates")],
        [InlineKeyboardButton(text="‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="greeting_advanced")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="greeting_stats")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="greeting_close")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫

@router.callback_query(F.data.startswith("greeting_"))
async def handle_greeting_callbacks(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not await is_group_admin(user_id=callback.from_user.id, chat_id=callback.message.chat.id, bot=callback.bot):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    action = callback.data.split("_", 1)[1]
    
    if action == "toggle_on":
        await toggle_greeting_status(callback, True)
    
    elif action == "toggle_off":
        await toggle_greeting_status(callback, False)
    
    elif action == "set_text":
        await start_text_input(callback, state)
    
    elif action == "templates":
        await show_greeting_templates(callback)
    
    elif action == "advanced":
        await show_advanced_settings(callback)
    
    elif action == "stats":
        await show_greeting_statistics(callback)
    
    elif action == "close":
        await callback.message.delete()
        await callback.answer()
    
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


async def toggle_greeting_status(callback: CallbackQuery, enabled: bool):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    
    success = await gs().toggle_greeting(chat_id, user_id, enabled)
    
    if success:
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è {status_text}!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        settings = await gs().get_greeting_settings(chat_id)
        keyboard = create_greeting_main_keyboard(settings.is_enabled)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        new_text = callback.message.text.replace(
            "‚ùå –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã" if enabled else "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∫–ª—é—á–µ–Ω—ã",
            "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if enabled else "‚ùå –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã"
        )
        
        await callback.message.edit_text(new_text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


async def start_text_input(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    
    text = """üìù **–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:

‚Ä¢ `{name}` - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `{username}` - —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `{mention}` - —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `{first_name}` - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**–ü—Ä–∏–º–µ—Ä:**
–ü—Ä–∏–≤–µ—Ç, {mention}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç! üëã

–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."""
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await state.set_state(GreetingStates.waiting_for_greeting_text)
    await state.update_data(original_message_id=callback.message.message_id)
    await callback.answer()


@router.message(StateFilter(GreetingStates.waiting_for_greeting_text))
async def process_greeting_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not await is_group_admin(user_id=message.from_user.id, chat_id=message.chat.id, bot=message.bot):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    new_text = message.text.strip()
    
    if len(new_text) > 1000:
        await message.reply("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    success = await gs().set_greeting_text(
        chat_id=message.chat.id,
        admin_user_id=message.from_user.id,
        text=new_text
    )
    
    if success:
        await message.reply("‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
        example = await gs().get_greeting_settings(message.chat.id)
        formatted_example = example.format_greeting_for_user(
            first_name="–ü—Ä–∏–º–µ—Ä",
            username="example_user"
        )
        
        await message.reply(
            f"üìã **–ü—Ä–∏–º–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:**\n\n{formatted_example}",
            parse_mode="Markdown"
        )
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
    
    await state.clear()


async def show_greeting_templates(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    
    templates = gs().get_greeting_templates()
    
    text = "üé® **–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:**\n\n"
    
    buttons = []
    for template_name, template_text in templates.items():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
        preview = template_text[:50] + "..." if len(template_text) > 50 else template_text
        text += f"**{template_name.title()}:**\n{preview}\n\n"
        
        buttons.append([
            InlineKeyboardButton(
                text=f"üìã {template_name.title()}", 
                callback_data=f"template_{template_name}"
            )
        ])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="greeting_back")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data.startswith("template_"))
async def apply_greeting_template(callback: CallbackQuery):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not await is_group_admin(user_id=callback.from_user.id, chat_id=callback.message.chat.id, bot=callback.bot):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    template_name = callback.data.split("_", 1)[1]
    
    success = await gs().apply_greeting_template(
        chat_id=callback.message.chat.id,
        admin_user_id=callback.from_user.id,
        template_name=template_name
    )
    
    if success:
        await callback.answer(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' –ø—Ä–∏–º–µ–Ω–µ–Ω!", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        await cmd_greeting_refresh(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞", show_alert=True)


async def show_advanced_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    settings = await gs().get_greeting_settings(callback.message.chat.id)
    
    text = f"""‚öôÔ∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {"‚úÖ" if settings.mention_user else "‚ùå"}
‚Ä¢ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ: {"‚úÖ " + str(settings.delete_after_seconds) + " —Å–µ–∫" if settings.delete_after_seconds else "‚ùå"}
‚Ä¢ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–∏–ª: {"‚úÖ" if settings.show_rules_button else "‚ùå"}
‚Ä¢ –°—Ç–∏–∫–µ—Ä: {"‚úÖ" if settings.welcome_sticker else "‚ùå"}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"""
    
    buttons = [
        [InlineKeyboardButton(
            text="üë§ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + ("‚úÖ" if settings.mention_user else "‚ùå"),
            callback_data="advanced_mention"
        )],
        [InlineKeyboardButton(
            text="‚è∞ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ: " + ("‚úÖ" if settings.delete_after_seconds else "‚ùå"),
            callback_data="advanced_delete"
        )],
        [InlineKeyboardButton(
            text="üìã –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–∏–ª: " + ("‚úÖ" if settings.show_rules_button else "‚ùå"),
            callback_data="advanced_rules"
        )],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="greeting_back")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data.startswith("advanced_"))
async def handle_advanced_settings(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not await is_group_admin(user_id=callback.from_user.id, chat_id=callback.message.chat.id, bot=callback.bot):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    setting = callback.data.split("_", 1)[1]
    settings = await gs().get_greeting_settings(callback.message.chat.id)
    
    if setting == "mention":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        new_value = not settings.mention_user
        success = await gs().update_greeting_settings(
            chat_id=callback.message.chat.id,
            admin_user_id=callback.from_user.id,
            mention_user=new_value
        )
        
        if success:
            status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
            await callback.answer(f"‚úÖ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {status}!")
            await show_advanced_settings(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
    
    elif setting == "delete":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
        text = """‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è**

–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ.

–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è.
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 3600 —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å).

–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."""
        
        await callback.message.edit_text(text, parse_mode="Markdown")
        await state.set_state(GreetingStates.waiting_for_delete_delay)
        await callback.answer()
    
    elif setting == "rules":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª
        if settings.show_rules_button:
            # –í—ã–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∞–≤–∏–ª
            success = await gs().update_greeting_settings(
                chat_id=callback.message.chat.id,
                admin_user_id=callback.from_user.id,
                show_rules_button=False
            )
            
            if success:
                await callback.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–∏–ª –≤—ã–∫–ª—é—á–µ–Ω–∞!")
                await show_advanced_settings(callback)
        else:
            # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∞–≤–∏–ª - –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç
            text = """üìã **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."""
            
            await callback.message.edit_text(text, parse_mode="Markdown")
            await state.set_state(GreetingStates.waiting_for_rules_text)
            await callback.answer()


@router.message(StateFilter(GreetingStates.waiting_for_delete_delay))
async def process_delete_delay(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not await is_group_admin(user_id=message.from_user.id, chat_id=message.chat.id, bot=message.bot):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    try:
        delay = int(message.text.strip())
        
        if delay < 0 or delay > 3600:
            await message.reply("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 3600 —Å–µ–∫—É–Ω–¥!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        success = await gs().update_greeting_settings(
            chat_id=message.chat.id,
            admin_user_id=message.from_user.id,
            delete_after_seconds=delay if delay > 0 else None
        )
        
        if success:
            if delay > 0:
                await message.reply(f"‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {delay} —Å–µ–∫—É–Ω–¥!")
            else:
                await message.reply("‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ!")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    
    await state.clear()


@router.message(StateFilter(GreetingStates.waiting_for_rules_text))
async def process_rules_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∞–≤–∏–ª"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not await is_group_admin(user_id=message.from_user.id, chat_id=message.chat.id, bot=message.bot):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    rules_text = message.text.strip()
    
    if len(rules_text) > 2000:
        await message.reply("‚ùå –¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
    success = await gs().update_greeting_settings(
        chat_id=message.chat.id,
        admin_user_id=message.from_user.id,
        show_rules_button=True,
        rules_text=rules_text
    )
    
    if success:
        await message.reply("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–∏–ª –≤–∫–ª—é—á–µ–Ω–∞ –∏ —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª")
    
    await state.clear()


async def show_greeting_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    
    stats = await gs().get_greeting_stats(callback.message.chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = await gs().get_greeting_history(callback.message.chat.id, 10)
    
    text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π**

**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.total_greetings_sent}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –¥–µ–Ω—å: {stats.average_new_members_per_day:.1f}
‚Ä¢ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {stats.most_active_day or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: {stats.greeting_effectiveness:.1f}%

**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:**"""
    
    if history:
        for i, entry in enumerate(history[:5], 1):
            date_str = entry['sent_date'].strftime("%d.%m %H:%M")
            name = entry['first_name'] or entry['username'] or f"ID{entry['user_id']}"
            responded = "‚úÖ" if entry['user_responded'] else "‚è≥"
            text += f"\n{i}. {name} - {date_str} {responded}"
    else:
        text += "\n–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"
    
    text += f"\n\n**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:** {stats.last_greeting_date.strftime('%d.%m.%Y %H:%M') if stats.last_greeting_date else '–Ω–∏–∫–æ–≥–¥–∞'}"
    
    buttons = [
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="greeting_stats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="greeting_back")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "greeting_back")
async def cmd_greeting_refresh(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await gs().get_greeting_settings(callback.message.chat.id)
    stats = await gs().get_greeting_stats(callback.message.chat.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
    status_emoji = "‚úÖ" if settings.is_enabled else "‚ùå"
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if settings.is_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    
    text = f"""ü§ù **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π**

**–°—Ç–∞—Ç—É—Å:** {status_emoji} –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è {status_text}

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –¢–µ–∫—Å—Ç: {"–µ—Å—Ç—å" if settings.greeting_text else "–Ω–µ –∑–∞–¥–∞–Ω"}
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {"–¥–∞" if settings.mention_user else "–Ω–µ—Ç"}
‚Ä¢ –°—Ç–∏–∫–µ—Ä: {"–µ—Å—Ç—å" if settings.welcome_sticker else "–Ω–µ—Ç"}
‚Ä¢ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ: {"—á–µ—Ä–µ–∑ " + str(settings.delete_after_seconds) + " —Å–µ–∫" if settings.delete_after_seconds else "–Ω–µ—Ç"}
‚Ä¢ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–∏–ª: {"–¥–∞" if settings.show_rules_button else "–Ω–µ—Ç"}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π: {stats.total_greetings_sent}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {stats.average_new_members_per_day:.1f}
‚Ä¢ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {stats.most_active_day or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.greeting_effectiveness:.1f}%

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    keyboard = create_greeting_main_keyboard(settings.is_enabled)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# –ö–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

@router.message(Command("greeting_on"))
@error_handler
async def cmd_greeting_on(message: Message):
    """–ë—ã—Å—Ç—Ä–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    
    if message.chat.type not in ['group', 'supergroup']:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return
    
    if not await is_group_admin(user_id=message.from_user.id, chat_id=message.chat.id, bot=message.bot):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏!")
        return
    
    success = await gs().toggle_greeting(
        chat_id=message.chat.id,
        admin_user_id=message.from_user.id,
        enabled=True
    )
    
    if success:
        await message.reply("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π")


@router.message(Command("greeting_off"))
@error_handler
async def cmd_greeting_off(message: Message):
    """–ë—ã—Å—Ç—Ä–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    
    if message.chat.type not in ['group', 'supergroup']:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return
    
    if not await is_group_admin(user_id=message.from_user.id, chat_id=message.chat.id, bot=message.bot):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏!")
        return
    
    success = await gs().toggle_greeting(
        chat_id=message.chat.id,
        admin_user_id=message.from_user.id,
        enabled=False
    )
    
    if success:
        await message.reply("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã

@router.message(Command("cancel"), StateFilter("*"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    
    current_state = await state.get_state()
    
    if current_state is None:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    await state.clear()
    await message.reply("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª

@router.callback_query(F.data == "show_rules")
async def show_chat_rules(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"""
    
    settings = await gs().get_greeting_settings(callback.message.chat.id)
    
    if settings.rules_text:
        await callback.answer(settings.rules_text, show_alert=True)
    else:
        await callback.answer("–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", show_alert=True)
