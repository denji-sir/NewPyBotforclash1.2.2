"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º CoC API - —Ä–µ–π–¥—ã, –≤–æ–π–Ω—ã, –õ–í–ö
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import TelegramBadRequest
from typing import Optional
from datetime import datetime

from ..services.extended_clash_api import ExtendedClashAPI
from ..services.clan_database_service import ClanDatabaseService
from ..models.extended_clan_models import (
    WarState, MemberRole, war_state_to_emoji, role_to_emoji, format_duration
)
from ..utils.clan_helpers import get_clan_from_args, format_clan_selector_text
from ..utils.formatters import format_war_info, format_raid_info, format_cwl_info
from ..utils.error_handler import error_handler

logger = logging.getLogger(__name__)

extended_router = Router(name="extended_clash_router")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã (–±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
extended_api: Optional[ExtendedClashAPI] = None
db_service: Optional[ClanDatabaseService] = None


def init_extended_services(api: ExtendedClashAPI, database: ClanDatabaseService):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    global extended_api, db_service
    extended_api = api
    db_service = database


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ

@extended_router.message(Command("clan_extended"))
async def cmd_clan_extended_info(message: Message, command: CommandObject):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ"""
    
    if not extended_api:
        await message.reply("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    clan_tag = None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–ª–∞–Ω
    if command.args:
        clan_tag = command.args.strip()
    else:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–ª–∞–Ω –¥–ª—è —á–∞—Ç–∞
        try:
            registered_clans = await db_service.get_chat_clans(message.chat.id)
            if registered_clans:
                clan_tag = registered_clans[0].clan_tag
        except Exception as e:
            logger.error(f"Error getting chat clans: {e}")
    
    if not clan_tag:
        await message.reply(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ –∫–ª–∞–Ω–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–ª–∞–Ω –¥–ª—è —á–∞—Ç–∞\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/clan_extended #CLANTAG`"
        )
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        status_msg = await message.reply("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        async with extended_api:
            clan_info = await extended_api.get_extended_clan_info(clan_tag)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = format_extended_clan_info(clan_info)
        keyboard = create_clan_extended_keyboard(clan_tag)
        
        await status_msg.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except ValueError as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.error(f"Error in clan_extended command: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")


def format_extended_clan_info(clan_info) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ"""
    
    text = f"üè∞ **{clan_info.name}** `{clan_info.tag}`\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text += f"üìä **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
    text += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∫–ª–∞–Ω–∞: {clan_info.clan_level}\n"
    text += f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {clan_info.members}/50\n"
    text += f"‚Ä¢ üèÜ –û—á–∫–∏: {format_large_number(clan_info.clan_points)}\n"
    text += f"‚Ä¢ ‚öîÔ∏è –û—á–∫–∏ –í–°: {format_large_number(clan_info.clan_versus_points)}\n"
    text += f"‚Ä¢ üèõÔ∏è –û—á–∫–∏ —Å—Ç–æ–ª–∏—Ü—ã: {format_large_number(clan_info.clan_capital_points)}\n"
    text += f"‚Ä¢ üéØ –¢—Ä–µ–±—É–µ–º—ã–µ –∫—É–±–∫–∏: {format_large_number(clan_info.required_trophies)}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–π–Ω
    text += f"‚öîÔ∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–π–Ω:**\n"
    text += f"‚Ä¢ –ü–æ–±–µ–¥: {clan_info.war_wins} ({clan_info.war_win_rate:.1f}%)\n"
    text += f"‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {clan_info.war_losses}\n"
    text += f"‚Ä¢ –ù–∏—á—å–∏—Ö: {clan_info.war_ties}\n"
    text += f"‚Ä¢ –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {clan_info.war_win_streak}\n"
    text += f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –≤–æ–π–Ω: {clan_info.war_frequency}\n\n"
    
    # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
    if clan_info.leadership:
        text += f"üëë **–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:**\n"
        if clan_info.leadership.leader:
            text += f"‚Ä¢ –õ–∏–¥–µ—Ä: {clan_info.leadership.leader.name}\n"
        text += f"‚Ä¢ –°–æ-–ª–∏–¥–µ—Ä–æ–≤: {len(clan_info.leadership.co_leaders)}\n"
        text += f"‚Ä¢ –°—Ç–∞—Ä–µ–π—à–∏–Ω: {len(clan_info.leadership.elders)}\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {clan_info.leadership.total_leaders}\n\n"
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    text += f"üìà **–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –∫—É–±–∫–∏: {clan_info.average_trophies:.0f}\n"
    
    if clan_info.donation_stats:
        text += f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤: {format_large_number(clan_info.donation_stats.total_donations)}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤: {clan_info.donation_stats.active_members}\n"
    
    return text


def create_clan_extended_keyboard(clan_tag: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ"""
    
    buttons = [
        [
            InlineKeyboardButton(
                text="‚öîÔ∏è –¢–µ–∫—É—â–∞—è –≤–æ–π–Ω–∞", 
                callback_data=f"war_current:{clan_tag}"
            ),
            InlineKeyboardButton(
                text="üèõÔ∏è –†–µ–π–¥—ã", 
                callback_data=f"raids:{clan_tag}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üëë –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", 
                callback_data=f"leadership:{clan_tag}"
            ),
            InlineKeyboardButton(
                text="üéÅ –¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤", 
                callback_data=f"top_donors:{clan_tag}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìä –ò—Å—Ç–æ—Ä–∏—è –≤–æ–π–Ω", 
                callback_data=f"war_history:{clan_tag}"
            ),
            InlineKeyboardButton(
                text="üèÜ –õ–í–ö", 
                callback_data=f"cwl:{clan_tag}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                callback_data=f"clan_refresh:{clan_tag}"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤

@extended_router.callback_query(F.data.startswith("war_current:"))
async def handle_current_war(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω—ã"""
    
    clan_tag = callback.data.split(":", 1)[1]
    
    try:
        await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–π–Ω–µ...")
        
        async with extended_api:
            war_info = await extended_api.get_current_war(clan_tag)
        
        if not war_info:
            text = f"‚úÖ **–ö–ª–∞–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≤–æ–π–Ω–µ**\n\n"
            text += f"–ö–ª–∞–Ω `{clan_tag}` —Å–µ–π—á–∞—Å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫–ª–∞–Ω–æ–≤–æ–π –≤–æ–π–Ω–µ."
        else:
            text = format_war_info(war_info)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"clan_refresh:{clan_tag}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error handling current war: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@extended_router.callback_query(F.data.startswith("raids:"))
async def handle_capital_raids(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–π–¥–æ–≤"""
    
    clan_tag = callback.data.split(":", 1)[1]
    
    try:
        await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ —Ä–µ–π–¥–æ–≤...")
        
        async with extended_api:
            raids = await extended_api.get_capital_raid_seasons(clan_tag, limit=5)
        
        if not raids:
            text = f"üèõÔ∏è **–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π–¥—ã**\n\n"
            text += f"–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π–¥–∞—Ö –¥–ª—è –∫–ª–∞–Ω–∞ `{clan_tag}` –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        else:
            text = format_raids_info(raids, clan_tag)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"clan_refresh:{clan_tag}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error handling capital raids: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@extended_router.callback_query(F.data.startswith("leadership:"))
async def handle_leadership(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∫–ª–∞–Ω–∞"""
    
    clan_tag = callback.data.split(":", 1)[1]
    
    try:
        await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π...")
        
        async with extended_api:
            clan_info = await extended_api.get_extended_clan_info(clan_tag)
        
        text = format_leadership_info(clan_info)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"clan_refresh:{clan_tag}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error handling leadership: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@extended_router.callback_query(F.data.startswith("top_donors:"))
async def handle_top_donors(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ø–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤"""
    
    clan_tag = callback.data.split(":", 1)[1]
    
    try:
        await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–Ω–∞—Ç–æ–≤...")
        
        async with extended_api:
            donation_stats = await extended_api.calculate_monthly_donation_stats(clan_tag)
        
        text = format_donation_stats(donation_stats)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"clan_refresh:{clan_tag}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error handling top donors: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@extended_router.callback_query(F.data.startswith("war_history:"))
async def handle_war_history(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–π–Ω"""
    
    clan_tag = callback.data.split(":", 1)[1]
    
    try:
        await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é –≤–æ–π–Ω...")
        
        async with extended_api:
            war_history = await extended_api.get_war_log(clan_tag, limit=10)
        
        text = format_war_history(war_history)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"clan_refresh:{clan_tag}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error handling war history: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@extended_router.callback_query(F.data.startswith("cwl:"))
async def handle_cwl_info(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–í–ö"""
    
    clan_tag = callback.data.split(":", 1)[1]
    
    try:
        await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –õ–í–ö...")
        
        async with extended_api:
            cwl_info = await extended_api.get_cwl_info(clan_tag)
        
        if not cwl_info:
            text = f"üèÜ **–õ–∏–≥–∞ –í–æ–π–Ω –ö–ª–∞–Ω–æ–≤**\n\n"
            text += f"–ö–ª–∞–Ω `{clan_tag}` —Å–µ–π—á–∞—Å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –õ–í–ö."
        else:
            text = format_cwl_info(cwl_info)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"clan_refresh:{clan_tag}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error handling CWL info: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@extended_router.callback_query(F.data.startswith("clan_refresh:"))
async def handle_clan_refresh(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ"""
    
    clan_tag = callback.data.split(":", 1)[1]
    
    try:
        await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à
        if extended_api:
            extended_api.clear_cache()
        
        async with extended_api:
            clan_info = await extended_api.get_extended_clan_info(clan_tag)
        
        text = format_extended_clan_info(clan_info)
        keyboard = create_clan_extended_keyboard(clan_tag)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error refreshing clan info: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def format_war_info(war_info) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–π–Ω–µ"""
    
    state_emoji = war_state_to_emoji(war_info.state)
    state_text = {
        WarState.PREPARATION: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
        WarState.IN_WAR: "–ò–¥–µ—Ç –≤–æ–π–Ω–∞",
        WarState.WAR_ENDED: "–í–æ–π–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞",
        WarState.NOT_IN_WAR: "–ù–µ –≤ –≤–æ–π–Ω–µ"
    }.get(war_info.state, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text = f"‚öîÔ∏è **–ö–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞** {state_emoji}\n\n"
    text += f"**–°—Ç–∞—Ç—É—Å:** {state_text}\n"
    text += f"**–†–∞–∑–º–µ—Ä:** {war_info.team_size} vs {war_info.team_size}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–∞—Ö
    text += f"üè∞ **{war_info.clan_name}**\n"
    text += f"‚Ä¢ –ê—Ç–∞–∫: {war_info.clan_attacks}/{war_info.team_size * war_info.attacks_per_member}\n"
    text += f"‚Ä¢ –ó–≤–µ–∑–¥: {war_info.clan_stars}\n"
    text += f"‚Ä¢ –†–∞–∑—Ä—É—à–µ–Ω–∏—è: {war_info.clan_destruction_percentage:.1f}%\n\n"
    
    text += f"üè∞ **{war_info.opponent_name}**\n"
    text += f"‚Ä¢ –ê—Ç–∞–∫: {war_info.opponent_attacks}/{war_info.team_size * war_info.attacks_per_member}\n"
    text += f"‚Ä¢ –ó–≤–µ–∑–¥: {war_info.opponent_stars}\n"
    text += f"‚Ä¢ –†–∞–∑—Ä—É—à–µ–Ω–∏—è: {war_info.opponent_destruction_percentage:.1f}%\n\n"
    
    # –í—Ä–µ–º—è
    if war_info.start_time:
        text += f"üïê **–ù–∞—á–∞–ª–æ:** {war_info.start_time.strftime('%d.%m %H:%M')}\n"
    if war_info.end_time:
        text += f"üïê **–ö–æ–Ω–µ—Ü:** {war_info.end_time.strftime('%d.%m %H:%M')}\n"
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if war_info.state == WarState.WAR_ENDED:
        victory = war_info.is_victory
        if victory is True:
            text += f"\nüéâ **–ü–û–ë–ï–î–ê!**"
        elif victory is False:
            text += f"\nüòû **–ü–æ—Ä–∞–∂–µ–Ω–∏–µ**"
        else:
            text += f"\nü§ù **–ù–∏—á—å—è**"
    
    return text


def format_raids_info(raids, clan_tag: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π–¥–∞—Ö"""
    
    text = f"üèõÔ∏è **–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π–¥—ã** `{clan_tag}`\n\n"
    
    if not raids:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π–¥–∞—Ö"
        return text
    
    text += f"üìä **–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(raids)} —Ä–µ–π–¥–æ–≤:**\n\n"
    
    for i, raid in enumerate(raids[:5], 1):
        text += f"**{i}. –†–µ–π–¥ {raid.end_time.strftime('%d.%m')}**\n"
        text += f"‚Ä¢ üí∞ –õ—É—Ç: {format_large_number(raid.capital_total_loot)}\n"
        text += f"‚Ä¢ üèõÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {raid.raids_completed}\n"
        text += f"‚Ä¢ ‚öîÔ∏è –ê—Ç–∞–∫: {raid.total_attacks}\n"
        text += f"‚Ä¢ üèÜ –ù–∞–≥—Ä–∞–¥—ã: {format_large_number(raid.offensive_reward + raid.defensive_reward)}\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_loot = sum(raid.capital_total_loot for raid in raids)
    total_attacks = sum(raid.total_attacks for raid in raids)
    total_raids_completed = sum(raid.raids_completed for raid in raids)
    
    text += f"üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –ª—É—Ç–∞: {format_large_number(total_loot)}\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –∞—Ç–∞–∫: {total_attacks}\n"
    text += f"‚Ä¢ –†–µ–π–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total_raids_completed}\n"
    
    return text


def format_leadership_info(clan_info) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ"""
    
    text = f"üëë **–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫–ª–∞–Ω–∞** `{clan_info.tag}`\n\n"
    
    if not clan_info.leadership:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ"
        return text
    
    # –õ–∏–¥–µ—Ä
    if clan_info.leadership.leader:
        leader = clan_info.leadership.leader
        text += f"üëë **–õ–ò–î–ï–†**\n"
        text += f"‚Ä¢ {leader.name}\n"
        text += f"‚Ä¢ üèÜ {format_large_number(leader.trophies)} –∫—É–±–∫–æ–≤\n"
        text += f"‚Ä¢ üéÅ {format_large_number(leader.donations)} –¥–æ–Ω–∞—Ç–æ–≤\n"
        text += f"‚Ä¢ #{leader.clan_rank} –≤ –∫–ª–∞–Ω–µ\n\n"
    
    # –°–æ-–ª–∏–¥–µ—Ä—ã
    if clan_info.leadership.co_leaders:
        text += f"üî± **–°–û-–õ–ò–î–ï–†–´** ({len(clan_info.leadership.co_leaders)})\n"
        for co_leader in clan_info.leadership.co_leaders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
            text += f"‚Ä¢ {co_leader.name} - üèÜ {format_large_number(co_leader.trophies)}\n"
        
        if len(clan_info.leadership.co_leaders) > 10:
            text += f"‚Ä¢ ... –∏ –µ—â–µ {len(clan_info.leadership.co_leaders) - 10}\n"
        text += "\n"
    
    # –°—Ç–∞—Ä–µ–π—à–∏–Ω—ã
    if clan_info.leadership.elders:
        text += f"‚≠ê **–°–¢–ê–†–ï–ô–®–ò–ù–´** ({len(clan_info.leadership.elders)})\n"
        for elder in clan_info.leadership.elders[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-15
            text += f"‚Ä¢ {elder.name} - üèÜ {format_large_number(elder.trophies)}\n"
        
        if len(clan_info.leadership.elders) > 15:
            text += f"‚Ä¢ ... –∏ –µ—â–µ {len(clan_info.leadership.elders) - 15}\n"
    
    text += f"\nüìä **–í—Å–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π:** {clan_info.leadership.total_leaders}/{clan_info.members}"
    
    return text


def format_donation_stats(donation_stats) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–Ω–∞—Ç–æ–≤"""
    
    text = f"üéÅ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤**\n"
    text += f"**{donation_stats.month:02d}.{donation_stats.year}** `{donation_stats.clan_tag}`\n\n"
    
    text += f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤: {format_large_number(donation_stats.total_donations)}\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {format_large_number(donation_stats.total_received)}\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {donation_stats.active_members}\n"
    text += f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {donation_stats.average_donations:.0f}\n\n"
    
    if donation_stats.top_donors:
        text += f"üèÜ **–¢–æ–ø-{min(15, len(donation_stats.top_donors))} –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤:**\n\n"
        
        for i, donor in enumerate(donation_stats.top_donors[:15], 1):
            medal = ""
            if i == 1:
                medal = "ü•á "
            elif i == 2:
                medal = "ü•à "
            elif i == 3:
                medal = "ü•â "
            
            ratio_text = ""
            if donor.donations_received > 0:
                ratio = donor.donations / donor.donations_received
                ratio_text = f" (‚ÜóÔ∏è{ratio:.1f})"
            
            text += f"{medal}`{i}.` **{donor.player_name}**\n"
            text += f"     üéÅ {format_large_number(donor.donations)}{ratio_text}\n\n"
    
    return text


def format_war_history(war_history) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–æ–π–Ω"""
    
    text = f"üìä **–ò—Å—Ç–æ—Ä–∏—è –≤–æ–π–Ω** `{war_history.clan_tag}`\n\n"
    
    if not war_history.wars:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–π–Ω"
        return text
    
    text += f"**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–π–Ω: {war_history.total_wars}\n"
    text += f"‚Ä¢ –ü–æ–±–µ–¥: {war_history.victories} ({war_history.win_rate:.1f}%)\n"
    text += f"‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {war_history.defeats}\n"
    text += f"‚Ä¢ –ù–∏—á—å–∏—Ö: {war_history.draws}\n\n"
    
    text += f"üèÜ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ {min(10, len(war_history.wars))} –≤–æ–π–Ω:**\n\n"
    
    for i, war in enumerate(war_history.wars[:10], 1):
        result_emoji = ""
        if war.is_victory is True:
            result_emoji = "‚úÖ"
        elif war.is_victory is False:
            result_emoji = "‚ùå"
        else:
            result_emoji = "ü§ù"
        
        date_str = war.end_time.strftime('%d.%m') if war.end_time else "???"
        
        text += f"{result_emoji} **{i}.** {date_str} vs **{war.opponent_name}**\n"
        text += f"     {war.clan_stars}‚≠ê vs {war.opponent_stars}‚≠ê ({war.team_size}v{war.team_size})\n\n"
    
    return text


def format_cwl_info(cwl_info) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –õ–í–ö"""
    
    text = f"üèÜ **–õ–∏–≥–∞ –í–æ–π–Ω –ö–ª–∞–Ω–æ–≤**\n"
    text += f"**–°–µ–∑–æ–Ω:** {cwl_info.season}\n\n"
    
    state_text = {
        "preparation": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
        "inWar": "–ò–¥–µ—Ç –≤–æ–π–Ω–∞", 
        "warEnded": "–í–æ–π–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞",
        "ended": "–°–µ–∑–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω"
    }.get(cwl_info.state.value, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text += f"**–°—Ç–∞—Ç—É—Å:** {state_text}\n"
    
    if cwl_info.rounds:
        text += f"**–†–∞—É–Ω–¥–æ–≤:** {len(cwl_info.rounds)}\n"
        text += f"**–í—Å–µ–≥–æ –∑–≤–µ–∑–¥:** {cwl_info.total_stars}\n"
    
    return text


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

@extended_router.message(Command("war"))
@error_handler
async def cmd_current_war(message: Message, command: CommandObject):
    """–¢–µ–∫—É—â–∞—è –≤–æ–π–Ω–∞ –∫–ª–∞–Ω–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–Ω –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É (–Ω–æ–º–µ—Ä/–±—É–∫–≤—ã) –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π
    clan = await get_clan_from_args(db_service, message.chat.id, command.args)
    
    if not clan:
        await message.reply(
            "‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ `/war` - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–Ω\n"
            "‚Ä¢ `/war 2` - –∫–ª–∞–Ω ‚Ññ2\n"
            "‚Ä¢ `/war wa` - –∫–ª–∞–Ω –ø–æ –ø–µ—Ä–≤—ã–º –±—É–∫–≤–∞–º\n"
            "‚Ä¢ `/clan_list` - —Å–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤"
        )
        return
    
    clan_tag = clan.clan_tag
    clan_name = clan.clan_name
    
    try:
        async with extended_api:
            war_info = await extended_api.get_current_war(clan_tag)
        
        if not war_info:
            await message.reply(f"‚úÖ –ö–ª–∞–Ω **{clan_name}** `{clan_tag}` –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≤–æ–π–Ω–µ")
            return
        
        text = format_war_info(war_info)
        await message.reply(text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in war command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–π–Ω–µ")


@extended_router.message(Command("raids"))
@error_handler
async def cmd_capital_raids(message: Message, command: CommandObject):
    """–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π–¥—ã –∫–ª–∞–Ω–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–Ω –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É (–Ω–æ–º–µ—Ä/–±—É–∫–≤—ã) –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π
    clan = await get_clan_from_args(db_service, message.chat.id, command.args)
    
    if not clan:
        await message.reply(
            "‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ `/raids` - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–Ω\n"
            "‚Ä¢ `/raids 2` - –∫–ª–∞–Ω ‚Ññ2\n"
            "‚Ä¢ `/raids wa` - –∫–ª–∞–Ω –ø–æ –ø–µ—Ä–≤—ã–º –±—É–∫–≤–∞–º\n"
            "‚Ä¢ `/clan_list` - —Å–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤"
        )
        return
    
    clan_tag = clan.clan_tag
    
    try:
        async with extended_api:
            raids = await extended_api.get_capital_raid_seasons(clan_tag, limit=5)
        
        text = format_raids_info(raids, clan_tag)
        await message.reply(text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in raids command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π–¥–∞—Ö")


@extended_router.message(Command("leadership"))
@error_handler
async def cmd_leadership(message: Message, command: CommandObject):
    """–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫–ª–∞–Ω–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–Ω –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É (–Ω–æ–º–µ—Ä/–±—É–∫–≤—ã) –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π
    clan = await get_clan_from_args(db_service, message.chat.id, command.args)
    
    if not clan:
        await message.reply(
            "‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ `/leadership` - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–Ω\n"
            "‚Ä¢ `/leadership 2` - –∫–ª–∞–Ω ‚Ññ2\n"
            "‚Ä¢ `/leadership wa` - –∫–ª–∞–Ω –ø–æ –ø–µ—Ä–≤—ã–º –±—É–∫–≤–∞–º\n"
            "‚Ä¢ `/clan_list` - —Å–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤"
        )
        return
    
    clan_tag = clan.clan_tag
    
    try:
        async with extended_api:
            clan_info = await extended_api.get_extended_clan_info(clan_tag)
        
        text = format_leadership_info(clan_info)
        await message.reply(text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in leadership command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ")


@extended_router.message(Command("top_donors"))
@error_handler
async def cmd_top_donors(message: Message, command: CommandObject):
    """–¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤ –∫–ª–∞–Ω–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–Ω –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É (–Ω–æ–º–µ—Ä/–±—É–∫–≤—ã) –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π
    clan = await get_clan_from_args(db_service, message.chat.id, command.args)
    
    if not clan:
        await message.reply(
            "‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ `/top_donors` - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–Ω\n"
            "‚Ä¢ `/top_donors 2` - –∫–ª–∞–Ω ‚Ññ2\n"
            "‚Ä¢ `/top_donors wa` - –∫–ª–∞–Ω –ø–æ –ø–µ—Ä–≤—ã–º –±—É–∫–≤–∞–º\n"
            "‚Ä¢ `/clan_list` - —Å–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤"
        )
        return
    
    clan_tag = clan.clan_tag
    
    try:
        async with extended_api:
            donation_stats = await extended_api.calculate_monthly_donation_stats(clan_tag)
        
        text = format_donation_stats(donation_stats)
        await message.reply(text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in top_donors command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–Ω–∞—Ç–æ–≤")