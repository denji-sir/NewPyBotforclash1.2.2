"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
"""

import logging
import asyncio
from aiogram import Router, F
from aiogram.types import Message, ChatMemberUpdated, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from typing import Optional

from ..services.greeting_service import greeting_service

logger = logging.getLogger(__name__)

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_NOT_MEMBER >> IS_MEMBER))
async def on_new_member_join(event: ChatMemberUpdated):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        new_member = event.new_chat_member.user
        chat = event.chat
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
        if new_member.is_bot:
            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ {new_member.username} –≤ —á–∞—Ç–µ {chat.id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        greeting_data = await greeting_service.handle_new_member(
            chat_id=chat.id,
            user_id=new_member.id,
            username=new_member.username or "",
            first_name=new_member.first_name or ""
        )
        
        if not greeting_data:
            logger.debug(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat.id}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await send_greeting_message(event, new_member, greeting_data)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_member.id} –≤ —á–∞—Ç–µ {chat.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")


async def send_greeting_message(event: ChatMemberUpdated, new_member, greeting_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    try:
        bot = event.bot
        chat_id = event.chat.id
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = None
        if greeting_data.get('show_rules_button') and greeting_data.get('rules_text'):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞", callback_data="show_rules")]
            ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if greeting_data.get('sticker'):
            try:
                await bot.send_sticker(
                    chat_id=chat_id,
                    sticker=greeting_data['sticker']
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        sent_message = await bot.send_message(
            chat_id=chat_id,
            text=greeting_data['text'],
            reply_markup=keyboard,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
        await greeting_service.update_greeting_message_id(
            chat_id=chat_id,
            user_id=new_member.id,
            message_id=sent_message.message_id
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        delete_after = greeting_data.get('delete_after')
        if delete_after and delete_after > 0:
            await greeting_service.schedule_message_deletion(
                chat_id=chat_id,
                message_id=sent_message.message_id,
                delay_seconds=delete_after
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è
            asyncio.create_task(
                delete_message_after_delay(bot, chat_id, sent_message.message_id, delete_after)
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def delete_message_after_delay(bot, chat_id: int, message_id: int, delay_seconds: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
    
    try:
        await asyncio.sleep(delay_seconds)
        
        await bot.delete_message(
            chat_id=chat_id,
            message_id=message_id
        )
        
        logger.debug(f"–£–¥–∞–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
        
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)

@router.message(F.chat.type.in_({"group", "supergroup"}))
async def track_new_member_response(message: Message):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
        # (–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        history = await greeting_service.get_greeting_history(message.chat.id, 50)
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        from datetime import datetime, timedelta
        
        recent_cutoff = datetime.now() - timedelta(hours=24)
        
        for entry in history:
            if (entry['user_id'] == message.from_user.id and 
                entry['sent_date'] > recent_cutoff and 
                not entry['user_responded']):
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª
                await greeting_service.mark_user_responded(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id
                )
                
                logger.debug(f"–û—Ç–º–µ—á–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
                break
        
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_MEMBER >> IS_NOT_MEMBER))
async def on_member_left(event: ChatMemberUpdated):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    
    try:
        left_member = event.old_chat_member.user
        chat = event.chat
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
        if left_member.is_bot:
            return
        
        logger.debug(f"–£—á–∞—Å—Ç–Ω–∏–∫ {left_member.id} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç {chat.id}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        # - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        # - –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

@router.chat_member()
async def on_chat_member_updated(event: ChatMemberUpdated):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        old_status = event.old_chat_member.status
        new_status = event.new_chat_member.status
        user = event.new_chat_member.user
        
        logger.debug(f"–°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.id} –∏–∑–º–µ–Ω–µ–Ω —Å '{old_status}' –Ω–∞ '{new_status}' –≤ —á–∞—Ç–µ {event.chat.id}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤—ã—à–µ–Ω–∏–π –¥–æ –∞–¥–º–∏–Ω–æ–≤ –∏ —Ç.–¥.
        
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É

@router.message(F.new_chat_members)
async def on_bot_added_to_group(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
        bot_user = await message.bot.get_me()
        
        for new_member in message.new_chat_members:
            if new_member.id == bot_user.id:
                # –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {message.chat.id} ({message.chat.title})")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
                await greeting_service.get_greeting_settings(message.chat.id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞
                welcome_text = """ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É!**

**–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π:**
‚Ä¢ `/greeting` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ `/greeting_on` - –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è  
‚Ä¢ `/greeting_off` - –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

**–î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–∞–º–∏
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/help` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."""
                
                await message.reply(welcome_text, parse_mode="Markdown")
                break
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

def format_user_info(user) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    
    name_parts = []
    
    if user.first_name:
        name_parts.append(user.first_name)
    
    if user.last_name:
        name_parts.append(user.last_name)
    
    full_name = " ".join(name_parts) if name_parts else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if user.username:
        return f"{full_name} (@{user.username})"
    else:
        return f"{full_name} (ID: {user.id})"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

@router.message(F.left_chat_member)
async def on_member_left_legacy(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (legacy –º–µ—Ç–æ–¥)"""
    
    try:
        left_member = message.left_chat_member
        
        if left_member and not left_member.is_bot:
            logger.debug(f"–£—á–∞—Å—Ç–Ω–∏–∫ {format_user_info(left_member)} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç {message.chat.id}")
    
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ legacy –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã—Ö–æ–¥–∞: {e}")


# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π

async def cleanup_old_greeting_history():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    
    while True:
        try:
            # –ñ–¥–µ–º —Å—É—Ç–∫–∏
            await asyncio.sleep(24 * 60 * 60)
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            # –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
            
            logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º