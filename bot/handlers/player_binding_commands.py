"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –∫ –ø–∞—Å–ø–æ—Ä—Ç–∞–º
–§–∞–∑–∞ 4: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Å UI –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import logging
import re
from typing import Optional, List, Dict, Any

from ..services.player_binding_service import PlayerBindingService
from ..services.passport_database_service import PassportDatabaseService
from ..services.passport_system_manager import PassportSystemManager
from ..services.clan_database_service import ClanDatabaseService
from ..services.coc_api_service import CoCAPIService
from ..models.passport_models import PlayerBinding, PassportOperationLog
from ..utils.permissions import check_admin_permission, get_user_permissions
from ..utils.formatting import format_player_info, format_clan_info
from ..utils.validators import validate_player_tag

router = Router()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
player_binding_service = PlayerBindingService()
passport_service = PassportDatabaseService()
passport_manager = PassportSystemManager()
clan_service = ClanDatabaseService()
coc_api = CoCAPIService()


@router.message(Command("bind_player"))
async def bind_player_command(message: Message):
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞ –∫ –ø–∞—Å–ø–æ—Ä—Ç—É
    Usage: /bind_player [player_tag]
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞
        passport = await passport_service.get_passport_by_user(
            user_id=message.from_user.id,
            chat_id=message.chat.id
        )
        
        if not passport:
            await message.reply(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞!\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /create_passport"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫
        if passport.player_binding and passport.player_binding.player_tag:
            current_player = passport.player_binding
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –°–º–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞", 
                    callback_data=f"change_player:{message.from_user.id}"
                )],
                [InlineKeyboardButton(
                    text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤—è–∑–∫—É", 
                    callback_data=f"view_binding:{message.from_user.id}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞", 
                    callback_data=f"unbind_player:{message.from_user.id}"
                )]
            ])
            
            status_emoji = "‚úÖ" if current_player.is_verified else "‚è≥"
            await message.reply(
                f"üéÆ **–¢–µ–∫—É—â–∞—è –ø—Ä–∏–≤—è–∑–∫–∞:**\n"
                f"{status_emoji} –ò–≥—Ä–æ–∫: `{current_player.player_name}` ({current_player.player_tag})\n"
                f"üè∞ –ö–ª–∞–Ω: {current_player.player_clan_name or '–ù–µ –≤ –∫–ª–∞–Ω–µ'}\n"
                f"üìÖ –ü—Ä–∏–≤—è–∑–∞–Ω: {current_player.binding_date.strftime('%d.%m.%Y')}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        
        if args:
            # –ü—Ä—è–º–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ —Ç–µ–≥—É
            player_tag = args[0].upper().replace('O', '0')
            if not validate_player_tag(player_tag):
                await message.reply(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞ –∏–≥—Ä–æ–∫–∞!\n"
                    "–¢–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å # –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8-9 —Å–∏–º–≤–æ–ª–æ–≤\n"
                    "–ü—Ä–∏–º–µ—Ä: #2PP"
                )
                return
            
            await _bind_player_by_tag(message, player_tag)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            await _show_binding_options(message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ bind_player_command: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∏–≥—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def _show_binding_options(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üè∞ –í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–ª–∞–Ω–∞", 
            callback_data=f"select_from_clan:{message.from_user.id}"
        )],
        [InlineKeyboardButton(
            text="üîç –ù–∞–π—Ç–∏ –ø–æ —Ç–µ–≥—É", 
            callback_data=f"search_by_tag:{message.from_user.id}"
        )],
        [InlineKeyboardButton(
            text="üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–≥ –≤—Ä—É—á–Ω—É—é", 
            callback_data=f"manual_tag_input:{message.from_user.id}"
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞", 
            callback_data=f"cancel_binding:{message.from_user.id}"
        )]
    ])
    
    await message.reply(
        "üéÆ **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞:**\n\n"
        "üè∞ **–ò–∑ –∫–ª–∞–Ω–∞** - –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞\n"
        "üîç **–ü–æ —Ç–µ–≥—É** - –Ω–∞–π–¥–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ —Ç–µ–≥—É\n"
        "üìù **–í—Ä—É—á–Ω—É—é** - –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏–≥—Ä–æ–∫–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ\n\n"
        "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±–∏—Ä–∞—Ç—å –∏–∑ –∫–ª–∞–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("select_from_clan:"))
async def select_from_clan_callback(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞"""
    try:
        user_id = int(callback.data.split(":")[1])
        
        if callback.from_user.id != user_id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é!", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        passport = await passport_service.get_passport_by_user(
            user_id=user_id,
            chat_id=callback.message.chat.id
        )
        
        if not passport or not passport.preferred_clan_id:
            await callback.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∫–ª–∞–Ω!\n"
                "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–∞—Å–ø–æ—Ä—Ç–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–Ω", 
                        callback_data=f"edit_passport_clan:{user_id}"
                    )]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
        clan = await clan_service.get_clan_by_id(passport.preferred_clan_id)
        if not clan:
            await callback.message.edit_text(
                "‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ CoC API
        try:
            clan_members = await player_binding_service.get_clan_members_for_binding(clan.clan_tag)
            
            if not clan_members:
                await callback.message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ {clan.clan_name}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –ø–æ —Ç–µ–≥—É."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (–ø–æ 1 –≤ —Ä—è–¥—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
            keyboard_buttons = []
            
            for member in clan_members[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
                role_emoji = {
                    'leader': 'üëë',
                    'coLeader': 'üî•', 
                    'elder': '‚≠ê',
                    'member': 'üë§'
                }.get(member.get('role', 'member'), 'üë§')
                
                keyboard_buttons.append([InlineKeyboardButton(
                    text=f"{role_emoji} {member['name']} (üíé{member.get('trophies', 0)})",
                    callback_data=f"bind_clan_member:{user_id}:{member['tag']}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard_buttons.extend([
                [InlineKeyboardButton(
                    text="üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", 
                    callback_data=f"search_clan_member:{user_id}:{clan.clan_tag}"
                )],
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", 
                    callback_data=f"select_from_clan_back:{user_id}"
                )]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(
                f"üè∞ **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞ {clan.clan_name}:**\n"
                f"üìä –í—Å–µ–≥–æ: {len(clan_members)} –∏–≥—Ä–æ–∫–æ–≤\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –ø–æ —Ç–µ–≥—É."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_from_clan_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("bind_clan_member:"))
async def bind_clan_member_callback(callback: CallbackQuery):
    """–ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–ª–∞–Ω–∞"""
    try:
        _, user_id_str, player_tag = callback.data.split(":", 2)
        user_id = int(user_id_str)
        
        if callback.from_user.id != user_id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é!", show_alert=True)
            return
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞
        await _bind_player_by_tag(callback.message, player_tag, edit_message=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ bind_clan_member_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ", show_alert=True)


async def _bind_player_by_tag(message_or_callback, player_tag: str, edit_message: bool = False):
    """–ü—Ä–∏–≤—è–∑–∫–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ —Ç–µ–≥—É"""
    try:
        if hasattr(message_or_callback, 'from_user'):
            # –≠—Ç–æ Message
            user_id = message_or_callback.from_user.id
            chat_id = message_or_callback.chat.id
            send_func = message_or_callback.reply
        else:
            # –≠—Ç–æ CallbackQuery
            user_id = message_or_callback.from_user.id
            chat_id = message_or_callback.message.chat.id
            send_func = message_or_callback.message.edit_text if edit_message else message_or_callback.message.reply
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–≥
        if not player_tag.startswith('#'):
            player_tag = f"#{player_tag}"
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        result = await player_binding_service.bind_player_to_passport(
            user_id=user_id,
            chat_id=chat_id,
            player_tag=player_tag,
            requester_id=user_id
        )
        
        if result['success']:
            binding = result['binding']
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Å–ø–æ—Ä—Ç", 
                    callback_data=f"view_passport:{user_id}"
                )],
                [InlineKeyboardButton(
                    text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞", 
                    callback_data=f"edit_passport_menu:{user_id}"
                )]
            ])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if binding.is_verified:
                status_text = "‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω**"
                status_reason = "–ò–≥—Ä–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–ª–∞–Ω–µ"
            else:
                status_text = "‚è≥ **–û–∂–∏–¥–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**"
                status_reason = "–ò–≥—Ä–æ–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–ª–∞–Ω–µ –∏–ª–∏ –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            success_message = (
                f"üéâ **–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!**\n\n"
                f"üéÆ **–ò–≥—Ä–æ–∫:** `{binding.player_name}`\n"
                f"üè∑Ô∏è **–¢–µ–≥:** `{binding.player_tag}`\n"
                f"üè∞ **–ö–ª–∞–Ω:** {binding.player_clan_name or '–ù–µ –≤ –∫–ª–∞–Ω–µ'}\n"
                f"üíé **–ö—É–±–∫–∏:** {binding.player_trophies:,}\n"
                f"üìÖ **–î–∞—Ç–∞ –ø—Ä–∏–≤—è–∑–∫–∏:** {binding.binding_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"{status_text}\n"
                f"üí° {status_reason}"
            )
            
            await send_func(
                success_message,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        else:
            error_message = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞:**\n{result['error']}"
            await send_func(error_message, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _bind_player_by_tag: {e}")
        error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∏–≥—Ä–æ–∫–∞"
        if hasattr(message_or_callback, 'from_user'):
            await message_or_callback.reply(error_message)
        else:
            await message_or_callback.message.reply(error_message)


@router.callback_query(F.data.startswith("search_by_tag:"))
async def search_by_tag_callback(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –ø–æ —Ç–µ–≥—É"""
    try:
        user_id = int(callback.data.split(":")[1])
        
        if callback.from_user.id != user_id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é!", show_alert=True)
            return
        
        await callback.message.edit_text(
            "üîç **–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –ø–æ —Ç–µ–≥—É**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏–≥—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `#2PP`\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/bind_player #—Ç–µ–≥_–∏–≥—Ä–æ–∫–∞`\n\n"
            "üí° –¢–µ–≥ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–≥—Ä–æ–∫–∞ –≤ Clash of Clans",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", 
                    callback_data=f"back_to_binding_options:{user_id}"
                )]
            ]),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_by_tag_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(Command("verify_player"))
async def verify_player_command(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    Usage: /verify_player [@user|user_id]
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = await check_admin_permission(
            user_id=message.from_user.id,
            chat_id=message.chat.id
        )
        
        if not is_admin:
            await message.reply(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        target_user_id = None
        
        if args:
            # –ü–∞—Ä—Å–∏–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message.reply_to_message:
                target_user_id = message.reply_to_message.from_user.id
            elif args[0].startswith('@'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username)
                await message.reply(
                    "‚ùå –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )
                return
            else:
                try:
                    target_user_id = int(args[0])
                except ValueError:
                    await message.reply(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    )
                    return
        elif message.reply_to_message:
            target_user_id = message.reply_to_message.from_user.id
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫
            await _show_unverified_bindings(message)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        passport = await passport_service.get_passport_by_user(
            user_id=target_user_id,
            chat_id=message.chat.id
        )
        
        if not passport or not passport.player_binding:
            await message.reply(
                "‚ùå –£ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞!"
            )
            return
        
        # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        result = await player_binding_service.verify_player_binding(
            user_id=target_user_id,
            chat_id=message.chat.id,
            admin_id=message.from_user.id,
            admin_username=message.from_user.username
        )
        
        if result['success']:
            binding = passport.player_binding
            await message.reply(
                f"‚úÖ **–ü—Ä–∏–≤—è–∑–∫–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
                f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {passport.display_name}\n"
                f"üéÆ **–ò–≥—Ä–æ–∫:** `{binding.player_name}` ({binding.player_tag})\n"
                f"üè∞ **–ö–ª–∞–Ω:** {binding.player_clan_name or '–ù–µ –≤ –∫–ª–∞–Ω–µ'}\n"
                f"üë®‚Äçüíº **–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª:** {message.from_user.full_name}",
                parse_mode="Markdown"
            )
        else:
            await message.reply(f"‚ùå **–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:** {result['error']}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ verify_player_command: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def _show_unverified_bindings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –≤ —á–∞—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ —á–∞—Ç–∞
        passports = await passport_service.get_chat_passports(
            chat_id=message.chat.id,
            include_stats=True
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏
        unverified = [
            p for p in passports 
            if p.player_binding and not p.player_binding.is_verified
        ]
        
        if not unverified:
            await message.reply(
                "‚úÖ **–í—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ —á–∞—Ç–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!**\n\n"
                "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–æ–∫ –∏–≥—Ä–æ–∫–æ–≤."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤—è–∑–∫–∞–º–∏
        keyboard_buttons = []
        
        for passport in unverified[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –∑–∞–ø–∏—Å—è–º–∏
            binding = passport.player_binding
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"‚úÖ {passport.display_name} ‚Üí {binding.player_name}",
                callback_data=f"verify_binding:{passport.user_id}:{message.from_user.id}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        keyboard_buttons.append([InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            callback_data=f"refresh_unverified:{message.from_user.id}"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.reply(
            f"‚è≥ **–ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ ({len(unverified)}):**\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ–≥–æ –ø—Ä–∏–≤—è–∑–∫–∏:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _show_unverified_bindings: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫")


@router.callback_query(F.data.startswith("verify_binding:"))
async def verify_binding_callback(callback: CallbackQuery):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ —á–µ—Ä–µ–∑ callback"""
    try:
        _, target_user_id_str, admin_id_str = callback.data.split(":")
        target_user_id = int(target_user_id_str)
        admin_id = int(admin_id_str)
        
        if callback.from_user.id != admin_id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = await check_admin_permission(
            user_id=admin_id,
            chat_id=callback.message.chat.id
        )
        
        if not is_admin:
            await callback.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!", 
                show_alert=True
            )
            return
        
        # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        result = await player_binding_service.verify_player_binding(
            user_id=target_user_id,
            chat_id=callback.message.chat.id,
            admin_id=admin_id,
            admin_username=callback.from_user.username
        )
        
        if result['success']:
            await callback.answer("‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            await _refresh_unverified_list(callback)
        else:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ verify_binding_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def _refresh_unverified_list(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ —á–∞—Ç–∞
        passports = await passport_service.get_chat_passports(
            chat_id=callback.message.chat.id,
            include_stats=True
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏
        unverified = [
            p for p in passports 
            if p.player_binding and not p.player_binding.is_verified
        ]
        
        if not unverified:
            await callback.message.edit_text(
                "‚úÖ **–í—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ —á–∞—Ç–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!**\n\n"
                "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–æ–∫ –∏–≥—Ä–æ–∫–æ–≤."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []
        
        for passport in unverified[:10]:
            binding = passport.player_binding
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"‚úÖ {passport.display_name} ‚Üí {binding.player_name}",
                callback_data=f"verify_binding:{passport.user_id}:{callback.from_user.id}"
            )])
        
        keyboard_buttons.append([InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            callback_data=f"refresh_unverified:{callback.from_user.id}"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            f"‚è≥ **–ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ ({len(unverified)}):**\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ–≥–æ –ø—Ä–∏–≤—è–∑–∫–∏:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _refresh_unverified_list: {e}")


@router.message(Command("unbind_player"))
async def unbind_player_command(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞ –æ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞
    Usage: /unbind_player
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        passport = await passport_service.get_passport_by_user(
            user_id=message.from_user.id,
            chat_id=message.chat.id
        )
        
        if not passport or not passport.player_binding:
            await message.reply(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞!"
            )
            return
        
        binding = passport.player_binding
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –î–∞, –æ—Ç–≤—è–∑–∞—Ç—å", 
                callback_data=f"confirm_unbind:{message.from_user.id}"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", 
                callback_data=f"cancel_unbind:{message.from_user.id}"
            )]
        ])
        
        await message.reply(
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞**\n\n"
            f"üéÆ **–ò–≥—Ä–æ–∫:** `{binding.player_name}` ({binding.player_tag})\n"
            f"üè∞ **–ö–ª–∞–Ω:** {binding.player_clan_name or '–ù–µ –≤ –∫–ª–∞–Ω–µ'}\n"
            f"üìÖ **–ü—Ä–∏–≤—è–∑–∞–Ω:** {binding.binding_date.strftime('%d.%m.%Y')}\n\n"
            f"‚ùó **–í–Ω–∏–º–∞–Ω–∏–µ:** –ü–æ—Å–ª–µ –æ—Ç–≤—è–∑–∫–∏ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞ "
            f"–∏ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ unbind_player_command: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –∏–≥—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.callback_query(F.data.startswith("confirm_unbind:"))
async def confirm_unbind_callback(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    try:
        user_id = int(callback.data.split(":")[1])
        
        if callback.from_user.id != user_id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é!", show_alert=True)
            return
        
        # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞
        result = await player_binding_service.unbind_player_from_passport(
            user_id=user_id,
            chat_id=callback.message.chat.id,
            requester_id=user_id
        )
        
        if result['success']:
            await callback.message.edit_text(
                "‚úÖ **–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞!**\n\n"
                "üéÆ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π `/bind_player`\n"
                "üí° –ü—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞:**\n{result['error']}"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_unbind_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(Command("binding_stats"))
async def binding_stats_command(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤—è–∑–æ–∫ –≤ —á–∞—Ç–µ
    Usage: /binding_stats
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≤—è–∑–æ–∫
        stats = await player_binding_service.get_binding_statistics(
            chat_id=message.chat.id
        )
        
        if not stats:
            await message.reply(
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n"
                "–í —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        total = stats['total_bindings']
        verified = stats['verified_bindings']
        unverified = total - verified
        verification_rate = (verified / total * 100) if total > 0 else 0
        
        stats_message = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫ –∏–≥—Ä–æ–∫–æ–≤**\n\n"
            f"üë• **–í—Å–µ–≥–æ –ø—Ä–∏–≤—è–∑–æ–∫:** {total}\n"
            f"‚úÖ **–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ:** {verified} ({verification_rate:.1f}%)\n"
            f"‚è≥ **–û–∂–∏–¥–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:** {unverified}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞–Ω–∞–º
        if stats['clan_distribution']:
            stats_message += "üè∞ **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞–Ω–∞–º:**\n"
            for clan_name, count in stats['clan_distribution'].items():
                stats_message += f"   ‚Ä¢ {clan_name}: {count} –∏–≥—Ä–æ–∫–æ–≤\n"
            stats_message += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏
        if stats['recent_bindings']:
            stats_message += "üïí **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏:**\n"
            for binding_info in stats['recent_bindings'][:5]:
                date_str = binding_info['binding_date'].strftime('%d.%m.%Y')
                verified_emoji = "‚úÖ" if binding_info['is_verified'] else "‚è≥"
                stats_message += f"   {verified_emoji} {binding_info['player_name']} - {date_str}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        keyboard = None
        is_admin = await check_admin_permission(
            user_id=message.from_user.id,
            chat_id=message.chat.id
        )
        
        if is_admin and unverified > 0:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"‚è≥ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏ ({unverified})",
                    callback_data=f"show_unverified_for_admin:{message.from_user.id}"
                )]
            ])
        
        await message.reply(
            stats_message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ binding_stats_command: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ callback handlers
@router.callback_query(F.data.startswith("cancel_binding:"))
async def cancel_binding_callback(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    user_id = int(callback.data.split(":")[1])
    
    if callback.from_user.id != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚ùå **–ü—Ä–∏–≤—è–∑–∫–∞ –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/bind_player` –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.",
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("back_to_binding_options:"))
async def back_to_binding_options_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–ø—Ü–∏—è–º –ø—Ä–∏–≤—è–∑–∫–∏"""
    user_id = int(callback.data.split(":")[1])
    
    if callback.from_user.id != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é!", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø—Ü–∏–π –ø—Ä–∏–≤—è–∑–∫–∏ –∑–∞–Ω–æ–≤–æ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üè∞ –í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–ª–∞–Ω–∞", 
            callback_data=f"select_from_clan:{user_id}"
        )],
        [InlineKeyboardButton(
            text="üîç –ù–∞–π—Ç–∏ –ø–æ —Ç–µ–≥—É", 
            callback_data=f"search_by_tag:{user_id}"
        )],
        [InlineKeyboardButton(
            text="üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–≥ –≤—Ä—É—á–Ω—É—é", 
            callback_data=f"manual_tag_input:{user_id}"
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞", 
            callback_data=f"cancel_binding:{user_id}"
        )]
    ])
    
    await callback.message.edit_text(
        "üéÆ **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞:**\n\n"
        "üè∞ **–ò–∑ –∫–ª–∞–Ω–∞** - –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞\n"
        "üîç **–ü–æ —Ç–µ–≥—É** - –Ω–∞–π–¥–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ —Ç–µ–≥—É\n"
        "üìù **–í—Ä—É—á–Ω—É—é** - –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏–≥—Ä–æ–∫–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ\n\n"
        "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±–∏—Ä–∞—Ç—å –∏–∑ –∫–ª–∞–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
@router.callback_query(F.data.startswith("view_binding:"))
async def view_binding_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    try:
        user_id = int(callback.data.split(":")[1])
        
        if callback.from_user.id != user_id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é!", show_alert=True)
            return
        
        passport = await passport_service.get_passport_by_user(
            user_id=user_id,
            chat_id=callback.message.chat.id
        )
        
        if not passport or not passport.player_binding:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            )
            return
        
        binding = passport.player_binding
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ –∏–∑ CoC API
        try:
            player_info = await coc_api.get_player(binding.player_tag)
            
            if player_info:
                detailed_info = (
                    f"üéÆ **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ**\n\n"
                    f"üë§ **–ò–º—è:** `{player_info.get('name', binding.player_name)}`\n"
                    f"üè∑Ô∏è **–¢–µ–≥:** `{binding.player_tag}`\n"
                    f"üèÜ **–ö—É–±–∫–∏:** {player_info.get('trophies', 0):,}\n"
                    f"üíé **–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {player_info.get('bestTrophies', 0):,}\n"
                    f"‚≠ê **–£—Ä–æ–≤–µ–Ω—å:** {player_info.get('expLevel', 'N/A')}\n"
                    f"üè∞ **–ö–ª–∞–Ω:** {player_info.get('clan', {}).get('name', '–ù–µ –≤ –∫–ª–∞–Ω–µ')}\n"
                    f"üìÖ **–î–∞—Ç–∞ –ø—Ä–∏–≤—è–∑–∫–∏:** {binding.binding_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚úÖ **–°—Ç–∞—Ç—É—Å:** {'–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if binding.is_verified else '–û–∂–∏–¥–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'}\n\n"
                    f"üîó **–ü—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–∞—Å–ø–æ—Ä—Ç—É:** {passport.display_name}"
                )
            else:
                detailed_info = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ –∏–∑ CoC API"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ: {e}")
            detailed_info = (
                f"üéÆ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ**\n\n"
                f"üë§ **–ò–º—è:** `{binding.player_name}`\n"
                f"üè∑Ô∏è **–¢–µ–≥:** `{binding.player_tag}`\n"
                f"üè∞ **–ö–ª–∞–Ω:** {binding.player_clan_name or '–ù–µ –≤ –∫–ª–∞–Ω–µ'}\n"
                f"üíé **–ö—É–±–∫–∏:** {binding.player_trophies:,}\n"
                f"üìÖ **–î–∞—Ç–∞ –ø—Ä–∏–≤—è–∑–∫–∏:** {binding.binding_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚úÖ **–°—Ç–∞—Ç—É—Å:** {'–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if binding.is_verified else '–û–∂–∏–¥–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'}\n\n"
                f"‚ö†Ô∏è –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîÑ –°–º–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞", 
                callback_data=f"change_player:{user_id}"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞", 
                callback_data=f"unbind_player:{user_id}"
            )],
            [InlineKeyboardButton(
                text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Å–ø–æ—Ä—Ç", 
                callback_data=f"view_passport:{user_id}"
            )]
        ])
        
        await callback.message.edit_text(
            detailed_info,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_binding_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("change_player:"))
async def change_player_callback(callback: CallbackQuery):
    """–°–º–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    user_id = int(callback.data.split(":")[1])
    
    if callback.from_user.id != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é!", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üè∞ –í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–ª–∞–Ω–∞", 
            callback_data=f"select_from_clan:{user_id}"
        )],
        [InlineKeyboardButton(
            text="üîç –ù–∞–π—Ç–∏ –ø–æ —Ç–µ–≥—É", 
            callback_data=f"search_by_tag:{user_id}"
        )],
        [InlineKeyboardButton(
            text="üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–≥ –≤—Ä—É—á–Ω—É—é", 
            callback_data=f"manual_tag_input:{user_id}"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥", 
            callback_data=f"view_binding:{user_id}"
        )]
    ])
    
    await callback.message.edit_text(
        "üîÑ **–°–º–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞:\n\n"
        "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –¢–µ–∫—É—â–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—É—é",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )