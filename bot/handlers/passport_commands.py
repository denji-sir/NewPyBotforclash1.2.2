"""
–•–∞–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Å–ø–æ—Ä—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import TelegramBadRequest

from ..models.passport_models import (
    PassportInfo, PassportOperationLog, PassportStatus, PassportAlreadyExists,
    PassportNotFound, PassportValidationError, PassportTheme, PassportSettings
)
from ..services.passport_database_service import get_passport_db_service
from ..services.clan_database_service import get_clan_db_service
from ..utils.validators import format_number, format_date, format_role_emoji, format_role_name

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
passport_router = Router(name="passport_router")


@passport_router.message(Command("create_passport"))
async def create_passport_command(message: Message, command: CommandObject):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏–≥—Ä–æ–∫–∞
    –°–∏–Ω—Ç–∞–∫—Å–∏—Å: /create_passport [–∏–º—è]
    """
    try:
        passport_service = get_passport_db_service()
        clan_service = get_clan_db_service()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–∞—Å–ø–æ—Ä—Ç–∞
        existing_passport = await passport_service.get_passport_by_user(
            message.from_user.id, message.chat.id
        )
        
        if existing_passport:
            await message.reply(
                f"üìã **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Å–ø–æ—Ä—Ç!**\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/passport` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ `/edit_passport` –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
        display_name = None
        if command.args:
            display_name = command.args.strip()
        else:
            display_name = message.from_user.full_name or message.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞–Ω—ã –≤ —á–∞—Ç–µ
        available_clans = await clan_service.get_chat_clans(message.chat.id)
        
        if not available_clans:
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç –±–µ–∑ –∫–ª–∞–Ω–∞
            passport = await passport_service.create_passport(
                user_id=message.from_user.id,
                chat_id=message.chat.id,
                username=message.from_user.username,
                display_name=display_name
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            log_entry = PassportOperationLog.create_log(
                operation_type='create',
                passport_id=passport.id,
                user_id=message.from_user.id,
                username=message.from_user.username,
                operation_details={'display_name': display_name}
            )
            await passport_service.log_operation(log_entry)
            
            await message.reply(
                f"‚úÖ **–ü–∞—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"üë§ **–ò–º—è:** {display_name}\n"
                f"üìÖ **–°–æ–∑–¥–∞–Ω:** —Ç–æ–ª—å–∫–æ —á—Ç–æ\n\n"
                f"üí° **–°–æ–≤–µ—Ç:** –í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤. "
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–Ω—ã —á–µ—Ä–µ–∑ `/register_clan`.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/passport` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.",
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–ª–∞–Ω–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞–Ω–∞
        for i, clan in enumerate(available_clans, 1):
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üè∞ {i}. {clan.clan_name} ({clan.member_count}/50)",
                    callback_data=f"create_passport_clan:{clan.id}:{display_name}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ "–±–µ–∑ –∫–ª–∞–Ω–∞"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="‚ùå –°–æ–∑–¥–∞—Ç—å –±–µ–∑ –∫–ª–∞–Ω–∞",
                callback_data=f"create_passport_clan:0:{display_name}"
            )
        ])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="create_passport_cancel"
            )
        ])
        
        await message.reply(
            f"üìã **–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
            f"üë§ **–ò–º—è:** {display_name}\n\n"
            f"üè∞ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∫–ª–∞–Ω:**\n"
            f"(–í—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ)\n\n"
            f"üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞–Ω—ã –≤ —á–∞—Ç–µ:**",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except PassportAlreadyExists:
        await message.reply(
            "üìã **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Å–ø–æ—Ä—Ç!**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/passport` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
        )
    except Exception as e:
        logger.error(f"Error in create_passport_command: {e}")
        await message.reply(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@passport_router.callback_query(F.data.startswith("create_passport_clan:"))
async def create_passport_with_clan_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    try:
        data_parts = callback.data.split(":")
        clan_id = int(data_parts[1])
        display_name = data_parts[2] if len(data_parts) > 2 else callback.from_user.full_name
        
        passport_service = get_passport_db_service()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç
        preferred_clan_id = clan_id if clan_id > 0 else None
        
        passport = await passport_service.create_passport(
            user_id=callback.from_user.id,
            chat_id=callback.message.chat.id,
            username=callback.from_user.username,
            display_name=display_name,
            preferred_clan_id=preferred_clan_id
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        log_entry = PassportOperationLog.create_log(
            operation_type='create',
            passport_id=passport.id,
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            operation_details={
                'display_name': display_name,
                'preferred_clan_id': preferred_clan_id
            }
        )
        await passport_service.log_operation(log_entry)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = (
            f"‚úÖ **–ü–∞—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"üë§ **–ò–º—è:** {display_name}\n"
        )
        
        if preferred_clan_id and passport.preferred_clan_name:
            response_text += f"üè∞ **–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∫–ª–∞–Ω:** {passport.preferred_clan_name}\n"
        else:
            response_text += f"üè∞ **–ö–ª–∞–Ω:** –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
        
        response_text += (
            f"üìÖ **–°–æ–∑–¥–∞–Ω:** —Ç–æ–ª—å–∫–æ —á—Ç–æ\n\n"
            f"üéØ **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**\n"
            f"‚Ä¢ `/passport` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Å–ø–æ—Ä—Ç\n"
            f"‚Ä¢ `/bind_player <—Ç–µ–≥>` - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞ CoC\n"
            f"‚Ä¢ `/edit_passport` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        )
        
        await callback.message.edit_text(
            response_text,
            parse_mode="Markdown"
        )
        
        await callback.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω!")
        
    except Exception as e:
        logger.error(f"Error in create_passport_with_clan_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞", show_alert=True)


@passport_router.callback_query(F.data == "create_passport_cancel")
async def create_passport_cancel_callback(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    await callback.message.edit_text("üö´ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.**")
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@passport_router.message(Command("passport"))
async def passport_command(message: Message, command: CommandObject):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç –∏–≥—Ä–æ–∫–∞
    –°–∏–Ω—Ç–∞–∫—Å–∏—Å: /passport [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å|ID]
    """
    try:
        passport_service = get_passport_db_service()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ–π –ø–∞—Å–ø–æ—Ä—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        target_user_id = message.from_user.id
        target_username = message.from_user.username
        
        if command.args:
            arg = command.args.strip()
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω @username
            if arg.startswith('@'):
                target_username = arg[1:]
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å user_id –ø–æ username
                # –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                await message.reply(
                    "‚ùå **–ü–æ–∏—Å–∫ –ø–æ username –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/passport` –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞."
                )
                return
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID
            try:
                target_user_id = int(arg)
            except ValueError:
                await message.reply(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/passport` –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ `/passport @username`"
                )
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç
        passport = await passport_service.get_passport_by_user(target_user_id, message.chat.id)
        
        if not passport:
            if target_user_id == message.from_user.id:
                await message.reply(
                    "üìã **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `/create_passport`"
                )
            else:
                await message.reply(
                    "üìã **–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞**"
                )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –Ω–µ —Å–≤–æ–π –ø–∞—Å–ø–æ—Ä—Ç)
        if target_user_id != message.from_user.id and passport.settings.privacy_level >= 3:
            await message.reply(
                "üîí **–≠—Ç–æ—Ç –ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π**\n\n"
                "–í–ª–∞–¥–µ–ª–µ—Ü —Å–∫—Ä—ã–ª —Å–≤–æ–π –ø–∞—Å–ø–æ—Ä—Ç –æ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞
        passport_text = await _format_passport_display(passport, is_owner=(target_user_id == message.from_user.id))
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        keyboard = None
        if target_user_id == message.from_user.id:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data="passport_edit"
                    ),
                    InlineKeyboardButton(
                        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                        callback_data="passport_settings"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                        callback_data="passport_achievements"
                    ),
                    InlineKeyboardButton(
                        text="üí∞ –†–µ—Å—É—Ä—Å—ã –∑–∞ —Å—É—Ç–∫–∏",
                        callback_data="passport_daily_resources"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data="passport_refresh"
                    )
                ]
            ])
        
        await message.reply(passport_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in passport_command: {e}")
        await message.reply(
            "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@passport_router.message(Command("edit_passport"))
async def edit_passport_command(message: Message, command: CommandObject):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞
    –°–∏–Ω—Ç–∞–∫—Å–∏—Å: /edit_passport [–ø–æ–ª–µ] [–∑–Ω–∞—á–µ–Ω–∏–µ]
    """
    try:
        passport_service = get_passport_db_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        passport = await passport_service.get_passport_by_user(
            message.from_user.id, message.chat.id
        )
        
        if not passport:
            await message.reply(
                "üìã **–£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `/create_passport`"
            )
            return
        
        if not command.args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                        callback_data="edit_passport_name"
                    ),
                    InlineKeyboardButton(
                        text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ",
                        callback_data="edit_passport_bio"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üè∞ –°–º–µ–Ω–∏—Ç—å –∫–ª–∞–Ω",
                        callback_data="edit_passport_clan"
                    ),
                    InlineKeyboardButton(
                        text="üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É",
                        callback_data="edit_passport_theme"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å",
                        callback_data="edit_passport_privacy"
                    )
                ]
            ])
            
            await message.reply(
                f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
                f"**–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
                f"üë§ **–ò–º—è:** {passport.display_name}\n"
                f"üìù **–ë–∏–æ:** {passport.bio or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üè∞ **–ö–ª–∞–Ω:** {passport.preferred_clan_name or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}\n"
                f"üé® **–¢–µ–º–∞:** {passport.settings.theme.value}\n"
                f"üîí **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:** —É—Ä–æ–≤–µ–Ω—å {passport.settings.privacy_level}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        args = command.args.split(maxsplit=1)
        if len(args) < 2:
            await message.reply(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/edit_passport <–ø–æ–ª–µ> <–∑–Ω–∞—á–µ–Ω–∏–µ>`\n\n"
                "**–ü–æ–ª—è:** name, bio, clan\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/edit_passport name –ù–æ–≤–æ–µ –ò–º—è`"
            )
            return
        
        field, value = args
        field = field.lower()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
        update_success = False
        
        if field == "name":
            if len(value) > 50:
                await message.reply("‚ùå **–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)**")
                return
            
            update_success = await passport_service.update_passport(
                passport.id, display_name=value
            )
            
        elif field == "bio":
            if len(value) > 200:
                await message.reply("‚ùå **–ë–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)**")
                return
            
            update_success = await passport_service.update_passport(
                passport.id, bio=value
            )
            
        else:
            await message.reply(
                f"‚ùå **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ '{field}'**\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: name, bio"
            )
            return
        
        if update_success:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            log_entry = PassportOperationLog.create_log(
                operation_type='update',
                passport_id=passport.id,
                user_id=message.from_user.id,
                username=message.from_user.username,
                operation_details={field: value}
            )
            await passport_service.log_operation(log_entry)
            
            await message.reply(
                f"‚úÖ **–ü–∞—Å–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                f"**{field.title()}** –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {value}"
            )
        else:
            await message.reply("‚ùå **–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞**")
            
    except Exception as e:
        logger.error(f"Error in edit_passport_command: {e}")
        await message.reply(
            "‚ùå **–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@passport_router.message(Command("plist"))
async def passport_list_command(message: Message):
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –≤ —á–∞—Ç–µ
    """
    try:
        passport_service = get_passport_db_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç—ã
        passports = await passport_service.get_chat_passports(
            message.chat.id, PassportStatus.ACTIVE
        )
        
        if not passports:
            await message.reply(
                "üìã **–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–æ–≤**\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥–æ–π `/create_passport`"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await passport_service.get_passport_stats_summary(message.chat.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        text = (
            f"üìã **–ü–∞—Å–ø–æ—Ä—Ç–∞ —á–∞—Ç–∞**\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ üë§ –í—Å–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤: {stats['total_passports']}\n"
            f"‚Ä¢ ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_passports']}\n"
            f"‚Ä¢ üîó –° –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏: {stats['bound_passports']}\n"
            f"‚Ä¢ üè∞ –í—ã–±—Ä–∞–ª–∏ –∫–ª–∞–Ω—ã: {stats['clan_bound_passports']}\n\n"
            f"üë• **–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n"
        )
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        passports.sort(key=lambda p: p.created_at or datetime.min, reverse=True)
        
        for i, passport in enumerate(passports[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
            name = passport.display_name or passport.username or f"User {passport.user_id}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "‚úÖ" if passport.player_binding else "‚è≥"
            clan_info = f" | üè∞ {passport.preferred_clan_name[:15]}..." if passport.preferred_clan_name else ""
            
            text += f"{i}. {status_emoji} **{name}**{clan_info}\n"
        
        if len(passports) > 20:
            text += f"\n... –∏ –µ—â–µ {len(passports) - 20} –ø–∞—Å–ø–æ—Ä—Ç–æ–≤"
        
        text += f"\n\nüí° **–õ–µ–≥–µ–Ω–¥–∞:** ‚úÖ - –∏–≥—Ä–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω, ‚è≥ - –∏–≥—Ä–æ–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
        
        await message.reply(text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in passport_list_command: {e}")
        await message.reply(
            "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def _format_passport_display(passport: PassportInfo, is_owner: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞
    
    Args:
        passport: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Å–ø–æ—Ä—Ç–µ
        is_owner: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞
    """
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = f"üìã **–ü–∞—Å–ø–æ—Ä—Ç –∏–≥—Ä–æ–∫–∞**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text += f"üë§ **{passport.display_name}**"
    if passport.username:
        text += f" (—Ç–µ–ª–µ–≥—Ä–∞–º–º: @{passport.username})"
    text += "\n"
    
    # –¢–µ–≥ –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞)
    if passport.player_binding and passport.player_binding.player_tag:
        text += f"‚Ä¢ –¢–µ–≥: `{passport.player_binding.player_tag}`\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ
    text += f"üè∞ **–ö–ª–∞–Ω:** "
    if passport.preferred_clan_name:
        text += f"{passport.preferred_clan_name}\n"
    else:
        text += "–ù–µ –≤—ã–±—Ä–∞–Ω\n"
    
    text += "\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —á–∞—Ç–µ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)
    if passport.settings.show_stats:
        text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —á–∞—Ç–µ:**\n"
        
        # –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ —á–∞—Ç–∞
        chat_rank = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏
            from bot.services.passport_system_manager import PassportSystemManager
            passport_manager = PassportSystemManager()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —á–∞—Ç–µ
            chat_passports = await passport_manager.get_chat_passports(passport.chat_id)
            
            if chat_passports:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
                sorted_passports = sorted(
                    chat_passports, 
                    key=lambda p: p.stats.messages_count, 
                    reverse=True
                )
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for rank, p in enumerate(sorted_passports, 1):
                    if p.user_id == passport.user_id:
                        total_users = len(sorted_passports)
                        chat_rank = f"üèÜ {rank} –º–µ—Å—Ç–æ –∏–∑ {total_users}"
                        break
                else:
                    chat_rank = "‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω"
            else:
                chat_rank = "‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        except Exception as e:
            logger.warning(f"Could not get chat rank: {e}")
            chat_rank = "‚ùì –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
        
        text += f"—Ç–æ–ø –≤ —á–∞—Ç–µ: {chat_rank}\n"
        
        text += f"‚Ä¢ üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {format_number(passport.stats.messages_count)}\n"
        text += f"‚Ä¢ üìÖ –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {passport.stats.days_active}\n\n"
    
    # –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞ –∏–≥—Ä–æ–∫–∞)
    if passport.player_binding and passport.player_binding.verified:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω
        war_status = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if passport.player_binding and passport.player_binding.clan_tag:
            try:
                from ..services.extended_clash_api import ExtendedClashAPI
                extended_api = ExtendedClashAPI()
                async with extended_api:
                    current_war = await extended_api.get_current_war(passport.player_binding.clan_tag)
                    if current_war:
                        if current_war.state.value == "preparation":
                            war_status = "üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
                        elif current_war.state.value == "inWar":
                            war_status = "‚öîÔ∏è –í –≤–æ–π–Ω–µ"
                        elif current_war.state.value == "warEnded":
                            war_status = "‚úÖ –í–æ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                        else:
                            war_status = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    else:
                        war_status = "‚ùå –ù–µ –≤ –≤–æ–π–Ω–µ"
            except Exception as e:
                logger.warning(f"Could not get war status: {e}")
                war_status = "‚ùì –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
        
        text += f"—É—á–∞—Å—Ç–∏–µ –≤ –∫–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {war_status}\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–π–¥–∞—Ö
        raid_result = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if passport.player_binding and passport.player_binding.clan_tag:
            try:
                raids = await extended_api.get_capital_raid_seasons(passport.player_binding.clan_tag, limit=1)
                if raids:
                    last_raid = raids[0]
                    # –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–µ–π–¥–µ
                    player_raid_data = None
                    for member in last_raid.members:
                        if member.tag == passport.player_binding.player_tag:
                            player_raid_data = member
                            break
                    
                    if player_raid_data:
                        attacks_used = player_raid_data.attacks
                        total_limit = player_raid_data.attack_limit + player_raid_data.bonus_attack_limit
                        loot = player_raid_data.capital_resources_looted
                        raid_result = f"‚öîÔ∏è {attacks_used}/{total_limit} –∞—Ç–∞–∫, üí∞ {loot:,} –ª—É—Ç–∞"
                    else:
                        raid_result = "‚ùå –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª"
                else:
                    raid_result = "‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            except Exception as e:
                logger.warning(f"Could not get raid results: {e}")
                raid_result = "‚ùì –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
        
        text += f"–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–π–¥–∞—Ö: {raid_result}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤
        seasonal_donations = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        total_donations = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if passport.player_binding and passport.player_binding.clan_tag:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–Ω–∞—Ç–æ–≤
                clan_info = await extended_api.get_extended_clan_info(passport.player_binding.clan_tag)
                if clan_info and clan_info.member_list:
                    # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
                    player_data = None
                    for member in clan_info.member_list:
                        if member.tag == passport.player_binding.player_tag:
                            player_data = member
                            break
                    
                    if player_data:
                        seasonal_donations = f"üéÅ {player_data.donations:,} / üì• {player_data.donations_received:,}"
                        # –î–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ (API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
                        total_donations = f"üéÅ {player_data.donations:,} / üì• {player_data.donations_received:,}"
                    else:
                        seasonal_donations = "‚ùå –ù–µ –≤ –∫–ª–∞–Ω–µ"
                        total_donations = "‚ùå –ù–µ –≤ –∫–ª–∞–Ω–µ"
                else:
                    seasonal_donations = "‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    total_donations = "‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            except Exception as e:
                logger.warning(f"Could not get donation stats: {e}")
                seasonal_donations = "‚ùì –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
                total_donations = "‚ùì –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
        
        text += f"–∫–æ–ª-–≤–æ –¥–æ–Ω–∞—Ç–æ–≤ –≤ –∫–ª–∞–Ω–µ –∑–∞ —Å–µ–∑–æ–Ω: {seasonal_donations}\n"
        text += f"–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {total_donations}\n\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if is_owner:
        text += f"üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        text += f"‚Ä¢ üé® –¢–µ–º–∞: {passport.settings.theme.value}\n"
        text += f"‚Ä¢ üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: —É—Ä–æ–≤–µ–Ω—å {passport.settings.privacy_level}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è)
    text += f"üìÖ **–°–æ–∑–¥–∞–Ω:** {format_date(passport.created_at)}\n"
    if passport.updated_at and passport.updated_at != passport.created_at:
        text += f"üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω:** {format_date(passport.updated_at)}\n"
    
    return text


@passport_router.callback_query(F.data == "passport_edit")
async def passport_edit_callback(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                callback_data="edit_passport_name"
            ),
            InlineKeyboardButton(
                text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ",
                callback_data="edit_passport_bio"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè∞ –°–º–µ–Ω–∏—Ç—å –∫–ª–∞–Ω",
                callback_data="edit_passport_clan"
            ),
            InlineKeyboardButton(
                text="üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É",
                callback_data="edit_passport_theme"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Å–ø–æ—Ä—Ç—É",
                callback_data="passport_refresh"
            )
        ]
    ])
    
    await callback.message.edit_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@passport_router.callback_query(F.data == "passport_settings")
async def passport_settings_callback(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    try:
        passport_service = get_passport_db_service()
        passport = await passport_service.get_passport_by_user(
            callback.from_user.id, callback.message.chat.id
        )
        
        if not passport:
            await callback.answer("‚ùå –ü–∞—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        privacy_emoji = ["üåç", "üë•", "üîí"][passport.settings.privacy_level - 1]
        theme_emoji = {
            "default": "üé®",
            "dark": "üåô", 
            "clan": "üè∞",
            "achievements": "üèÜ",
            "minimalist": "‚ö™"
        }.get(passport.settings.theme.value, "üé®")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{privacy_emoji} –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (—É—Ä. {passport.settings.privacy_level})",
                    callback_data="settings_privacy"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{theme_emoji} –¢–µ–º–∞ ({passport.settings.theme.value})",
                    callback_data="settings_theme"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" if passport.settings.show_stats else "üìä –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    callback_data="settings_toggle_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè∞ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–ª–∞–Ω" if passport.settings.show_clan_info else "üè∞ –°–∫—Ä—ã—Ç—å –∫–ª–∞–Ω",
                    callback_data="settings_toggle_clan"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Å–ø–æ—Ä—Ç—É",
                    callback_data="passport_refresh"
                )
            ]
        ])
        
        await callback.message.edit_text(
            f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
            f"**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            f"‚Ä¢ {privacy_emoji} **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:** —É—Ä–æ–≤–µ–Ω—å {passport.settings.privacy_level}\n"
            f"‚Ä¢ {theme_emoji} **–¢–µ–º–∞:** {passport.settings.theme.value}\n"
            f"‚Ä¢ üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {'–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å' if passport.settings.show_stats else '—Å–∫—Ä—ã—Ç—å'}\n"
            f"‚Ä¢ üè∞ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ:** {'–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å' if passport.settings.show_clan_info else '—Å–∫—Ä—ã—Ç—å'}\n\n"
            f"**–£—Ä–æ–≤–Ω–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:**\n"
            f"üåç 1 - –ü—É–±–ª–∏—á–Ω—ã–π (–≤—Å–µ –≤–∏–¥—è—Ç)\n"
            f"üë• 2 - –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞\n"
            f"üîí 3 - –¢–æ–ª—å–∫–æ —è",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in passport_settings_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@passport_router.callback_query(F.data == "settings_privacy")
async def settings_privacy_callback(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üåç –£—Ä–æ–≤–µ–Ω—å 1 - –ü—É–±–ª–∏—á–Ω—ã–π",
                callback_data="privacy_set:1"
            )
        ],
        [
            InlineKeyboardButton(
                text="üë• –£—Ä–æ–≤–µ–Ω—å 2 - –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞",
                callback_data="privacy_set:2"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîí –£—Ä–æ–≤–µ–Ω—å 3 - –¢–æ–ª—å–∫–æ —è",
                callback_data="privacy_set:3"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                callback_data="passport_settings"
            )
        ]
    ])
    
    await callback.message.edit_text(
        "üîí **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏**\n\n"
        "**–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:**\n\n"
        "üåç **–£—Ä–æ–≤–µ–Ω—å 1 - –ü—É–±–ª–∏—á–Ω—ã–π**\n"
        "–ü–∞—Å–ø–æ—Ä—Ç –≤–∏–¥—è—Ç –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞\n\n"
        "üë• **–£—Ä–æ–≤–µ–Ω—å 2 - –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞**\n"
        "–ü–∞—Å–ø–æ—Ä—Ç –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n\n"
        "üîí **–£—Ä–æ–≤–µ–Ω—å 3 - –¢–æ–ª—å–∫–æ —è**\n"
        "–ü–∞—Å–ø–æ—Ä—Ç –≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@passport_router.callback_query(F.data.startswith("privacy_set:"))
async def privacy_set_callback(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
    try:
        privacy_level = int(callback.data.split(":")[1])
        
        passport_service = get_passport_db_service()
        passport = await passport_service.get_passport_by_user(
            callback.from_user.id, callback.message.chat.id
        )
        
        if not passport:
            await callback.answer("‚ùå –ü–∞—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        new_settings = passport.settings
        new_settings.privacy_level = privacy_level
        
        success = await passport_service.update_passport(
            passport.id, settings=new_settings
        )
        
        if success:
            privacy_names = {1: "–ü—É–±–ª–∏—á–Ω—ã–π", 2: "–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞", 3: "–¢–æ–ª—å–∫–æ —è"}
            await callback.answer(f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: {privacy_names[privacy_level]}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            await passport_settings_callback(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in privacy_set_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@passport_router.callback_query(F.data == "settings_toggle_stats")
async def settings_toggle_stats_callback(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        passport_service = get_passport_db_service()
        passport = await passport_service.get_passport_by_user(
            callback.from_user.id, callback.message.chat.id
        )
        
        if not passport:
            await callback.answer("‚ùå –ü–∞—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        new_settings = passport.settings
        new_settings.show_stats = not new_settings.show_stats
        
        success = await passport_service.update_passport(
            passport.id, settings=new_settings
        )
        
        if success:
            status = "–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å" if new_settings.show_stats else "—Å–∫—Ä—ã–≤–∞—Ç—å"
            await callback.answer(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {status}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            await passport_settings_callback(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in settings_toggle_stats_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@passport_router.callback_query(F.data == "settings_toggle_clan")
async def settings_toggle_clan_callback(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ"""
    try:
        passport_service = get_passport_db_service()
        passport = await passport_service.get_passport_by_user(
            callback.from_user.id, callback.message.chat.id
        )
        
        if not passport:
            await callback.answer("‚ùå –ü–∞—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        new_settings = passport.settings
        new_settings.show_clan_info = not new_settings.show_clan_info
        
        success = await passport_service.update_passport(
            passport.id, settings=new_settings
        )
        
        if success:
            status = "–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å" if new_settings.show_clan_info else "—Å–∫—Ä—ã–≤–∞—Ç—å"
            await callback.answer(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ: {status}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            await passport_settings_callback(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in settings_toggle_clan_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@passport_router.callback_query(F.data == "passport_achievements")
async def passport_achievements_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
    try:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        await callback.message.edit_text(
            "üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/achievements` –∏–ª–∏ `/ach` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Å–ø–æ—Ä—Ç—É",
                        callback_data="passport_refresh"
                    )
                ]
            ])
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in passport_achievements_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")


@passport_router.callback_query(F.data == "passport_refresh")
async def passport_refresh_callback(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    try:
        passport_service = get_passport_db_service()
        passport = await passport_service.get_passport_by_user(
            callback.from_user.id, callback.message.chat.id
        )
        
        if not passport:
            await callback.answer("‚ùå –ü–∞—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        passport_text = await _format_passport_display(passport, is_owner=True)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data="passport_edit"
                ),
                InlineKeyboardButton(
                    text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data="passport_settings"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data="passport_refresh"
                )
            ]
        ])
        
        await callback.message.edit_text(
            passport_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"Error in passport_refresh_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)


@passport_router.message(Command("dpassport"))
async def delete_passport_command(message: Message):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
    """
    try:
        passport_service = get_passport_db_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        passport = await passport_service.get_passport_by_user(
            message.from_user.id, message.chat.id
        )
        
        if not passport:
            await message.reply(
                "üìã **–£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è**"
            )
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"confirm_delete_passport:{passport.id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data="cancel_delete_passport"
                )
            ]
        ])
        
        await message.reply(
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
            f"üë§ **–ò–º—è:** {passport.display_name}\n"
            f"üìÖ **–°–æ–∑–¥–∞–Ω:** {format_date(passport.created_at)}\n\n"
            f"**‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
            f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in delete_passport_command: {e}")
        await message.reply(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@passport_router.callback_query(F.data.startswith("confirm_delete_passport:"))
async def confirm_delete_passport_callback(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    try:
        passport_id = int(callback.data.split(":")[1])
        
        passport_service = get_passport_db_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        passport = await passport_service.get_passport_by_id(passport_id)
        if not passport or passport.user_id != callback.from_user.id:
            await callback.answer("‚ùå –ü–∞—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º", show_alert=True)
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        log_entry = PassportOperationLog.create_log(
            operation_type='delete',
            passport_id=passport_id,
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            operation_details={'display_name': passport.display_name}
        )
        await passport_service.log_operation(log_entry)
        
        # –£–¥–∞–ª—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç
        success = await passport_service.delete_passport(passport_id)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ **–ü–∞—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω**\n\n"
                f"–ü–∞—Å–ø–æ—Ä—Ç **{passport.display_name}** –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥–æ–π `/create_passport`",
                parse_mode="Markdown"
            )
            await callback.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in confirm_delete_passport_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@passport_router.callback_query(F.data == "cancel_delete_passport")
async def cancel_delete_passport_callback(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    await callback.message.edit_text("üö´ **–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.**")
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@passport_router.callback_query(F.data == "passport_daily_resources")
async def passport_daily_resources_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ—Å—É—Ä—Å—ã –∑–∞ —Å—É—Ç–∫–∏'"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        passport_service = get_passport_db_service()
        passport = await passport_service.get_passport_by_user_id(callback.from_user.id)
        
        if not passport:
            await callback.answer("‚ùå –ü–∞—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ API
        from ..services.extended_clash_api import get_extended_clash_api
        extended_api = get_extended_clash_api()
        
        try:
            player_data = await extended_api.get_player_detailed_info(passport.player_tag)
        except Exception as api_error:
            logger.error(f"API error for player {passport.player_tag}: {api_error}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        achievements = player_data.get('achievements', [])
        if not achievements:
            await callback.message.edit_text(
                "‚ùå **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã**\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
                "–≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∏–≥—Ä—ã - –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º.\n\n"
                "üí° **–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:**\n"
                "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∏–≥—Ä–µ\n"
                "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Å–ø–æ—Ä—Ç—É", callback_data="passport_refresh")]
                ])
            )
            await callback.answer()
            return
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
        key_achievements = {
            'Gold Grab': None,
            'Elixir Escapade': None, 
            'Heroic Heist': None
        }
        
        for achievement in achievements:
            name = achievement.get('name', '')
            if name in key_achievements:
                key_achievements[name] = achievement
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        from ..services.daily_resources_service import get_daily_resources_service
        daily_resources_service = get_daily_resources_service()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await daily_resources_service.initialize_database()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—Ñ–∞—Ä–º–ª–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞ –¥–µ–Ω—å
        resources_data = await daily_resources_service.calculate_daily_resources(
            passport.player_tag, 
            achievements
        )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        resource_names = {
            'gold': ('ü•á –ó–æ–ª–æ—Ç–æ', 'gold_farmed'),
            'elixir': ('‚öóÔ∏è –≠–ª–∏–∫—Å–∏—Ä', 'elixir_farmed'),
            'dark_elixir': ('üñ§ –¢–µ–º–Ω—ã–π —ç–ª–∏–∫—Å–∏—Ä', 'dark_elixir_farmed')
        }
        
        resources_farmed = {}
        total_farmed = resources_data.get('total_farmed', 0)
        
        for resource_type, (display_name, data_key) in resource_names.items():
            farmed = resources_data.get(data_key, 0)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            achievement_name = {
                'gold': 'Gold Grab',
                'elixir': 'Elixir Escapade', 
                'dark_elixir': 'Heroic Heist'
            }.get(resource_type, '')
            
            current_total = 0
            if achievement_name and achievement_name in key_achievements and key_achievements[achievement_name]:
                current_total = key_achievements[achievement_name].get('value', 0)
            
            resources_farmed[resource_type] = {
                'display_name': display_name,
                'farmed': farmed,
                'current_total': current_total
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üí∞ **–†–µ—Å—É—Ä—Å—ã –∑–∞ —Å—É—Ç–∫–∏**\n"
        text += f"üë§ **{player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}** {passport.player_tag}\n\n"
        
        if total_farmed > 0:
            text += "üìä **–ù–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è:**\n"
            for resource_type, data in resources_farmed.items():
                if data['farmed'] > 0:
                    text += f"‚Ä¢ {data['display_name']}: {format_number(data['farmed'])}\n"
            
            text += f"\nüíé **–û–±—â–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:** {format_number(total_farmed)}\n\n"
            
            text += "üìà **–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:**\n"
            for resource_type, data in resources_farmed.items():
                text += f"‚Ä¢ {data['display_name']}: {format_number(data['current_total'])}\n"
        else:
            text += "üò¥ **–°–µ–≥–æ–¥–Ω—è —Ä–µ—Å—É—Ä—Å—ã –Ω–µ —Ñ–∞—Ä–º–∏–ª–∏—Å—å**\n\n"
            text += "üí° –ù–∞—á–Ω–∏—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!\n\n"
            text += "üìà **–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:**\n"
            for resource_type, data in resources_farmed.items():
                text += f"‚Ä¢ {data['display_name']}: {format_number(data['current_total'])}\n"
        
        text += f"\n‚è∞ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%H:%M')}\n"
        text += "üîÑ –ë–∞–∑–∏—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ú–°–ö"
        
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="passport_daily_resources"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Å–ø–æ—Ä—Ç—É", callback_data="passport_refresh")
                ]
            ])
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in passport_daily_resources_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)