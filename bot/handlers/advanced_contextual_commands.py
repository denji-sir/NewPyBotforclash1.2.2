"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
–§–∞–∑–∞ 5: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

from typing import Dict, List, Optional, Any, Union
import logging
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..services.user_context_service import UserContextService, UserContext, UserContextType, ActivityLevel, ExperienceLevel
from ..services.passport_database_service import PassportDatabaseService
from ..services.clan_database_service import ClanDatabaseService
from ..services.extended_clash_api import ExtendedClashAPI
from ..utils.formatting import create_progress_bar, format_player_info, format_clan_info
from ..handlers.contextual_commands import ContextualCommandSystem

logger = logging.getLogger(__name__)
router = Router()


class ContextualStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
    waiting_for_goal = State()
    waiting_for_feedback = State()
    waiting_for_custom_action = State()


class AdvancedContextualHandlers:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self):
        self.context_service = UserContextService()
        self.passport_service = PassportDatabaseService()
        self.clan_service = ClanDatabaseService()
        self.clash_api = ExtendedClashAPI([])
        self.command_system = ContextualCommandSystem()
    
    async def handle_personal_dashboard(self, message: Message, context: UserContext):
        """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        dashboard_items = await self._build_personal_dashboard(context)
        
        keyboard = InlineKeyboardBuilder()
        
        for item in dashboard_items:
            keyboard.row(InlineKeyboardButton(
                text=item['title'],
                callback_data=f"dashboard:{item['action']}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ–º–æ—â–∏
        keyboard.row(
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="dashboard:settings"),
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="dashboard:help")
        )
        
        profile_text = await self._generate_dashboard_text(context)
        
        await message.answer(
            f"üéØ **–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å**\n\n{profile_text}",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    
    async def handle_intelligent_recommendations(self, message: Message, context: UserContext):
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        recommendations = await self._generate_personalized_recommendations(context)
        
        if not recommendations:
            await message.answer(
                "‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∞—Å.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∂–∏–∑–Ω–∏ —á–∞—Ç–∞!"
            )
            return
        
        keyboard = InlineKeyboardBuilder()
        
        for i, rec in enumerate(recommendations[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            keyboard.row(InlineKeyboardButton(
                text=f"{rec['icon']} {rec['title']}",
                callback_data=f"recommend:{rec['action']}"
            ))
        
        keyboard.row(InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            callback_data="recommend:refresh"
        ))
        
        recommendation_text = self._format_recommendations(recommendations)
        
        await message.answer(
            f"üí° **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**\n\n{recommendation_text}",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    
    async def handle_progress_tracking(self, message: Message, context: UserContext):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if not context.has_player_binding:
            await message.answer(
                "üéÆ –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bind_player"
            )
            return
        
        progress_data = await self._calculate_user_progress(context)
        progress_text = await self._format_progress_report(progress_data, context)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="progress:details"),
            InlineKeyboardButton(text="üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="progress:set_goal")
        )
        keyboard.row(
            InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="progress:achievements"),
            InlineKeyboardButton(text="üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Å –∫–ª–∞–Ω–æ–º", callback_data="progress:compare")
        )
        
        await message.answer(
            progress_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    
    async def handle_contextual_help(self, message: Message, context: UserContext):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å"""
        
        help_sections = await self._generate_contextual_help(context)
        
        keyboard = InlineKeyboardBuilder()
        
        for section in help_sections:
            keyboard.row(InlineKeyboardButton(
                text=f"{section['icon']} {section['title']}",
                callback_data=f"help:{section['key']}"
            ))
        
        keyboard.row(InlineKeyboardButton(
            text="üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã",
            callback_data="help:all_commands"
        ))
        
        help_intro = self._generate_help_intro(context)
        
        await message.answer(
            f"‚ùì **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å**\n\n{help_intro}",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    
    async def handle_smart_notifications(self, message: Message, context: UserContext):
        """–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        
        notifications = await self._check_smart_notifications(context)
        
        if not notifications:
            await message.answer(
                "üîî –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!"
            )
            return
        
        keyboard = InlineKeyboardBuilder()
        
        for notification in notifications:
            keyboard.row(InlineKeyboardButton(
                text=f"‚úÖ {notification['action_text']}",
                callback_data=f"notify_action:{notification['action']}"
            ))
        
        keyboard.row(
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications:settings"),
            InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="notifications:disable")
        )
        
        notification_text = self._format_notifications(notifications)
        
        await message.answer(
            f"üîî **–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**\n\n{notification_text}",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    async def _build_personal_dashboard(self, context: UserContext) -> List[Dict[str, str]]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        
        items = []
        
        # –ë–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        items.append({
            'title': 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
            'action': 'profile',
            'description': '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'
        })
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∫–æ–π
        if context.has_player_binding:
            items.append({
                'title': 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                'action': 'stats',
                'description': '–ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å'
            })
            
            items.append({
                'title': 'üéØ –ú–æ–∏ —Ü–µ–ª–∏',
                'action': 'goals',
                'description': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
            })
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
        if context.is_clan_member:
            items.append({
                'title': 'üè∞ –ú–æ–π –∫–ª–∞–Ω',
                'action': 'clan_info',
                'description': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞'
            })
            
            items.append({
                'title': '‚öîÔ∏è –ö–ª–∞–Ω–æ–≤—ã–µ –≤–æ–π–Ω—ã',
                'action': 'clan_wars',
                'description': '–£—á–∞—Å—Ç–∏–µ –≤ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω–∞—Ö'
            })
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ª–∏–¥–µ—Ä–æ–≤
        if context.context_type == UserContextType.CLAN_LEADER:
            items.append({
                'title': 'üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–º',
                'action': 'leadership',
                'description': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ª–∏–¥–µ—Ä–∞ –∫–ª–∞–Ω–∞'
            })
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if context.context_type == UserContextType.ADMIN_USER:
            items.append({
                'title': '‚ö° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'action': 'admin_panel',
                'description': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å'
            })
        
        return items
    
    async def _generate_dashboard_text(self, context: UserContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        lines = []
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting = self._get_contextual_greeting(context)
        lines.append(greeting)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_line = f"**–°—Ç–∞—Ç—É—Å:** {self._get_user_status_text(context)}"
        lines.append(status_line)
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if context.activity_level == ActivityLevel.HIGH:
            lines.append("üî• **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è")
        elif context.activity_level == ActivityLevel.MEDIUM:
            lines.append("üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** –°—Ä–µ–¥–Ω—è—è")
        else:
            lines.append("üò¥ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** –ù–∏–∑–∫–∞—è")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        if context.has_player_binding and context.is_verified_player:
            lines.append(f"üéÆ **–ò–≥—Ä–æ–∫:** {context.player_binding.player_name}")
            if context.is_clan_member:
                lines.append(f"üè∞ **–ö–ª–∞–Ω:** {context.clan_membership.clan_name}")
        
        return "\n".join(lines)
    
    async def _generate_personalized_recommendations(self, context: UserContext) -> List[Dict[str, str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if context.context_type == UserContextType.NEW_USER:
            recommendations.extend([
                {
                    'icon': 'üéØ',
                    'title': '–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç',
                    'description': '–ü–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞',
                    'action': 'create_passport',
                    'priority': 10
                },
                {
                    'icon': 'üìñ',
                    'title': '–ò–∑—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
                    'description': '–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞',
                    'action': 'tutorial',
                    'priority': 8
                }
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏
        elif context.context_type == UserContextType.UNBOUND_USER:
            recommendations.extend([
                {
                    'icon': 'üéÆ',
                    'title': '–ü—Ä–∏–≤—è–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–∞',
                    'description': '–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ',
                    'action': 'bind_player',
                    'priority': 10
                },
                {
                    'icon': 'üè∞',
                    'title': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–Ω',
                    'description': '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –æ–¥–Ω–æ–º—É –∏–∑ –Ω–∞—à–∏—Ö –∫–ª–∞–Ω–æ–≤',
                    'action': 'choose_clan',
                    'priority': 7
                }
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        elif context.activity_level == ActivityLevel.HIGH:
            recommendations.extend([
                {
                    'icon': 'üèÜ',
                    'title': '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å',
                    'description': '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –∞–º–±–∏—Ü–∏–æ–∑–Ω—É—é —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è',
                    'action': 'set_goal',
                    'priority': 8
                },
                {
                    'icon': 'üëë',
                    'title': '–°—Ç–∞–Ω—å—Ç–µ –º–µ–Ω—Ç–æ—Ä–æ–º',
                    'description': '–ü–æ–º–æ–≥–∞–π—Ç–µ –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º',
                    'action': 'become_mentor',
                    'priority': 6
                }
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–∞–ª–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        elif context.activity_level == ActivityLevel.LOW:
            recommendations.extend([
                {
                    'icon': 'üí¨',
                    'title': '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö',
                    'description': '–û–±—â–∞–π—Ç–µ—Å—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
                    'action': 'engage_chat',
                    'priority': 7
                },
                {
                    'icon': 'üéØ',
                    'title': '–û–±–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª–∏',
                    'description': '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –∏–≥—Ä–æ–≤—ã–µ —Ü–µ–ª–∏',
                    'action': 'update_goals',
                    'priority': 6
                }
            ])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        recommendations.sort(key=lambda x: x.get('priority', 0), reverse=True)
        
        return recommendations
    
    def _format_recommendations(self, recommendations: List[Dict[str, str]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        if not recommendations:
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
        
        lines = []
        for i, rec in enumerate(recommendations[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-3
            lines.append(f"{i}Ô∏è‚É£ **{rec['title']}**")
            lines.append(f"   {rec['description']}")
            lines.append("")
        
        return "\n".join(lines)
    
    async def _calculate_user_progress(self, context: UserContext) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        progress = {
            'profile_completion': 0,
            'activity_score': 0,
            'game_progress': 0,
            'clan_contribution': 0,
            'overall_score': 0,
            'level': '–ù–æ–≤–∏—á–æ–∫',
            'next_level': '–£—á–∞—Å—Ç–Ω–∏–∫',
            'progress_to_next': 0
        }
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
        completion_score = 0
        if context.has_passport:
            completion_score += 30
        if context.has_player_binding:
            completion_score += 40
        if context.is_verified_player:
            completion_score += 20
        if context.is_clan_member:
            completion_score += 10
        
        progress['profile_completion'] = min(completion_score, 100)
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        activity_score = min(context.messages_last_week * 2, 100)
        progress['activity_score'] = activity_score
        
        # –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞)
        if context.player_binding and context.is_verified_player:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            progress['game_progress'] = 75  # –ó–∞–≥–ª—É—à–∫–∞
        
        # –í–∫–ª–∞–¥ –≤ –∫–ª–∞–Ω
        if context.is_clan_member:
            # –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–∏—è –≤ –∫–ª–∞–Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö
            progress['clan_contribution'] = 60  # –ó–∞–≥–ª—É—à–∫–∞
        
        # –û–±—â–∏–π —Å—á–µ—Ç
        progress['overall_score'] = int(
            (progress['profile_completion'] * 0.3 +
             progress['activity_score'] * 0.3 +
             progress['game_progress'] * 0.2 +
             progress['clan_contribution'] * 0.2)
        )
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        if progress['overall_score'] >= 80:
            progress['level'] = '–≠–∫—Å–ø–µ—Ä—Ç'
            progress['next_level'] = '–ú–∞—Å—Ç–µ—Ä'
        elif progress['overall_score'] >= 60:
            progress['level'] = '–û–ø—ã—Ç–Ω—ã–π'
            progress['next_level'] = '–≠–∫—Å–ø–µ—Ä—Ç'
        elif progress['overall_score'] >= 40:
            progress['level'] = '–£—á–∞—Å—Ç–Ω–∏–∫'
            progress['next_level'] = '–û–ø—ã—Ç–Ω—ã–π'
        else:
            progress['level'] = '–ù–æ–≤–∏—á–æ–∫'
            progress['next_level'] = '–£—á–∞—Å—Ç–Ω–∏–∫'
        
        return progress
    
    async def _format_progress_report(self, progress: Dict[str, Any], context: UserContext) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        
        lines = [
            f"üìä **–û—Ç—á–µ—Ç –æ –≤–∞—à–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ**\n",
            f"üéØ **–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** {progress['level']}",
            f"‚¨ÜÔ∏è **–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** {progress['next_level']}",
            f"üìà **–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:** {progress['overall_score']}/100\n"
        ]
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        lines.extend([
            "**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:**",
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {create_progress_bar(progress['profile_completion'])} {progress['profile_completion']}%",
            f"üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {create_progress_bar(progress['activity_score'])} {progress['activity_score']}%"
        ])
        
        if context.has_player_binding:
            lines.append(f"üéÆ –ò–≥—Ä–∞: {create_progress_bar(progress['game_progress'])} {progress['game_progress']}%")
        
        if context.is_clan_member:
            lines.append(f"üè∞ –ö–ª–∞–Ω: {create_progress_bar(progress['clan_contribution'])} {progress['clan_contribution']}%")
        
        return "\n".join(lines)
    
    async def _generate_contextual_help(self, context: UserContext) -> List[Dict[str, str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏"""
        
        help_sections = []
        
        # –ë–∞–∑–æ–≤–∞—è –ø–æ–º–æ—â—å –¥–ª—è –≤—Å–µ—Ö
        help_sections.append({
            'key': 'basics',
            'title': '–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã',
            'icon': 'üìö',
            'description': '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã'
        })
        
        # –ü–æ–º–æ—â—å –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
        if not context.has_passport:
            help_sections.append({
                'key': 'passport',
                'title': '–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞',
                'icon': 'üéØ',
                'description': '–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç'
            })
        
        # –ü–æ–º–æ—â—å –ø–æ –ø—Ä–∏–≤—è–∑–∫–µ –∏–≥—Ä–æ–∫–∞
        if not context.has_player_binding:
            help_sections.append({
                'key': 'binding',
                'title': '–ü—Ä–∏–≤—è–∑–∫–∞ –∏–≥—Ä–æ–∫–∞',
                'icon': 'üéÆ',
                'description': '–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Clash of Clans'
            })
        
        # –ü–æ–º–æ—â—å –ø–æ –∫–ª–∞–Ω—É
        if not context.is_clan_member:
            help_sections.append({
                'key': 'clans',
                'title': '–ö–ª–∞–Ω—ã –∏ —É—á–∞—Å—Ç–∏–µ',
                'icon': 'üè∞',
                'description': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–∞—Ö –∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏'
            })
        
        # –ü–æ–º–æ—â—å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
        if context.is_clan_member:
            help_sections.append({
                'key': 'clan_activities',
                'title': '–ö–ª–∞–Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                'icon': '‚öîÔ∏è',
                'description': '–í–æ–π–Ω—ã, —Ç—É—Ä–Ω–∏—Ä—ã –∏ —Å–æ–±—ã—Ç–∏—è'
            })
        
        # –ü–æ–º–æ—â—å –¥–ª—è –ª–∏–¥–µ—Ä–æ–≤
        if context.context_type == UserContextType.CLAN_LEADER:
            help_sections.append({
                'key': 'leadership',
                'title': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–º',
                'icon': 'üëë',
                'description': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ª–∏–¥–µ—Ä–∞ –∫–ª–∞–Ω–∞'
            })
        
        return help_sections
    
    def _generate_help_intro(self, context: UserContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–º–æ—â–∏"""
        
        if context.context_type == UserContextType.NEW_USER:
            return (
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞. "
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"
            )
        elif context.context_type == UserContextType.UNBOUND_USER:
            return (
                "–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç - –æ—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∏–∑—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ "
                "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:"
            )
        else:
            return (
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –ü–æ–º–æ—â—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ "
                "–ø–æ–¥ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ:"
            )
    
    async def _check_smart_notifications(self, context: UserContext) -> List[Dict[str, str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        notifications = []
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if context.context_type == UserContextType.NEW_USER:
            days_since_join = (datetime.now() - context.registration_date).days if context.registration_date else 0
            
            if days_since_join >= 1:
                notifications.append({
                    'type': 'reminder',
                    'title': '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è',
                    'message': '–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º',
                    'action': 'create_passport',
                    'action_text': '–°–æ–∑–¥–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç',
                    'priority': 10
                })
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        elif context.context_type == UserContextType.PENDING_VERIFICATION:
            if context.player_binding:
                days_waiting = (datetime.now() - context.player_binding.binding_date).days
                
                if days_waiting >= 3:
                    notifications.append({
                        'type': 'info',
                        'title': '–£—Å–∫–æ—Ä—å—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é',
                        'message': '–ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–µ–µ –≤ —á–∞—Ç–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                        'action': 'verification_tips',
                        'action_text': '–£–∑–Ω–∞—Ç—å –∫–∞–∫ —É—Å–∫–æ—Ä–∏—Ç—å',
                        'priority': 8
                    })
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if context.activity_level == ActivityLevel.LOW and context.messages_last_week < 5:
            notifications.append({
                'type': 'engagement',
                'title': '–ú—ã —Å–∫—É—á–∞–µ–º –ø–æ –≤–∞–º!',
                'message': '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤–∞—à–∏—Ö –∫–ª–∞–Ω–∞—Ö',
                'action': 'clan_updates',
                'action_text': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                'priority': 6
            })
        
        return notifications
    
    def _format_notifications(self, notifications: List[Dict[str, str]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        if not notifications:
            return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
        
        lines = []
        for i, notification in enumerate(notifications, 1):
            icon = "üîî" if notification['type'] == 'reminder' else "‚ÑπÔ∏è" if notification['type'] == 'info' else "üí¨"
            lines.append(f"{icon} **{notification['title']}**")
            lines.append(f"   {notification['message']}")
            lines.append("")
        
        return "\n".join(lines)
    
    def _get_contextual_greeting(self, context: UserContext) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        
        if context.context_type == UserContextType.NEW_USER:
            return "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!"
        elif context.context_type == UserContextType.CLAN_LEADER:
            return "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ª–∏–¥–µ—Ä!"
        elif context.context_type == UserContextType.ADMIN_USER:
            return "‚ö° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
        elif context.is_clan_member:
            return f"üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {context.clan_membership.clan_name}!"
        else:
            return "üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    
    def _get_user_status_text(self, context: UserContext) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if context.context_type == UserContextType.NEW_USER:
            return "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        elif context.context_type == UserContextType.UNBOUND_USER:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏"
        elif context.context_type == UserContextType.PENDING_VERIFICATION:
            return "–û–∂–∏–¥–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        elif context.context_type == UserContextType.VERIFIED_MEMBER:
            return "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫"
        elif context.context_type == UserContextType.CLAN_LEADER:
            return "–õ–∏–¥–µ—Ä –∫–ª–∞–Ω–∞"
        elif context.context_type == UserContextType.ADMIN_USER:
            return "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        else:
            return "–£—á–∞—Å—Ç–Ω–∏–∫"


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
@router.message(Command("dashboard"))
async def cmd_personal_dashboard(message: Message, user_context: UserContext):
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    handler = AdvancedContextualHandlers()
    await handler.handle_personal_dashboard(message, user_context)


@router.message(Command("recommendations", "recommend"))
async def cmd_recommendations(message: Message, user_context: UserContext):
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    handler = AdvancedContextualHandlers()
    await handler.handle_intelligent_recommendations(message, user_context)


@router.message(Command("progress"))
async def cmd_progress_tracking(message: Message, user_context: UserContext):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    handler = AdvancedContextualHandlers()
    await handler.handle_progress_tracking(message, user_context)


@router.message(Command("context_help", "chelp"))
async def cmd_contextual_help(message: Message, user_context: UserContext):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å"""
    handler = AdvancedContextualHandlers()
    await handler.handle_contextual_help(message, user_context)


@router.message(Command("notifications", "notify"))
async def cmd_smart_notifications(message: Message, user_context: UserContext):
    """–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    handler = AdvancedContextualHandlers()
    await handler.handle_smart_notifications(message, user_context)


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("dashboard:"))
async def handle_dashboard_callbacks(callback: CallbackQuery, user_context: UserContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    action = callback.data.split(":", 1)[1]
    
    try:
        if action == "profile":
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile_text = format_user_profile(user_context)
            await callback.message.edit_text(
                f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n{profile_text}",
                parse_mode="Markdown"
            )
        
        elif action == "stats" and user_context.has_player_binding:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await callback.message.edit_text(
                "üìä **–í–∞—à–∞ –∏–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                "–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Clash of Clans...",
                parse_mode="Markdown"
            )
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        elif action == "goals":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback.message.edit_text(
                "üéØ **–í–∞—à–∏ —Ü–µ–ª–∏**\n\n"
                "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                parse_mode="Markdown"
            )
        
        elif action == "clan_info" and user_context.is_clan_member:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
            clan_text = format_clan_info(user_context.clan_membership)
            await callback.message.edit_text(
                f"üè∞ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ**\n\n{clan_text}",
                parse_mode="Markdown"
            )
        
        elif action == "settings":
            # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings:notifications")],
                [InlineKeyboardButton(text="üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å", callback_data="settings:interface")],
                [InlineKeyboardButton(text="üîê –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="settings:privacy")],
                [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="dashboard:main")]
            ])
            
            await callback.message.edit_text(
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
                reply_markup=settings_keyboard,
                parse_mode="Markdown"
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
@router.callback_query(F.data.startswith("recommend:"))
async def handle_recommendation_callbacks(callback: CallbackQuery, user_context: UserContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    action = callback.data.split(":", 1)[1]
    
    try:
        if action == "create_passport":
            await callback.message.edit_text(
                "üéØ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_passport —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                parse_mode="Markdown"
            )
        
        elif action == "bind_player":
            await callback.message.edit_text(
                "üéÆ **–ü—Ä–∏–≤—è–∑–∫–∞ –∏–≥—Ä–æ–∫–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bind_player —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.",
                parse_mode="Markdown"
            )
        
        elif action == "refresh":
            # –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            handler = AdvancedContextualHandlers()
            await handler.handle_intelligent_recommendations(callback.message, user_context)
            await callback.message.delete()
            return
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")