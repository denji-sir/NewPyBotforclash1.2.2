"""
–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è rate limiting
–ü–æ–∑–≤–æ–ª—è—é—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
"""

import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from typing import List

from ..services.rate_limit_service import get_rate_limit_service, UserBlock, BlockReason
from ..utils.permissions import is_group_admin

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("rate_limits"))
async def rate_limits_command(message: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ rate limiting –≤ —á–∞—Ç–µ
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    
    Usage: /rate_limits
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = await is_group_admin(message.from_user.id, message.chat.id, message.bot)
        if not is_admin:
            await message.reply(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!"
            )
            return
        
        rate_limit_service = get_rate_limit_service()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        blocked_users = await rate_limit_service.get_blocked_users(message.chat.id)
        
        if not blocked_users:
            await message.reply(
                "‚úÖ **Rate Limiting - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                "üìä –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                "‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å–ø–∞–º–µ –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
                "‚Ä¢ 4+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∑–∞ 10 —Å–µ–∫—É–Ω–¥ = –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n"
                "‚Ä¢ 1-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: 5 –º–∏–Ω—É—Ç\n"
                "‚Ä¢ 2-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: 1 —á–∞—Å\n"
                "‚Ä¢ 3-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: 1 –¥–µ–Ω—å\n"
                "‚Ä¢ 4+ –Ω–∞—Ä—É—à–µ–Ω–∏–π: 7 –¥–Ω–µ–π",
                parse_mode="Markdown"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        blocked_list = []
        for i, block in enumerate(blocked_users[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10
            remaining = (block.blocked_until - datetime.now()).total_seconds()
            time_str = _format_time(remaining)
            
            reason_emoji = {
                BlockReason.SPAM_COMMANDS: "üö´",
                BlockReason.REPEATED_VIOLATIONS: "‚ö†Ô∏è",
                BlockReason.MANUAL_ADMIN: "üîí"
            }
            emoji = reason_emoji.get(block.reason, "‚ùå")
            
            blocked_list.append(
                f"{i}. {emoji} User ID `{block.user_id}`\n"
                f"   –ù–∞—Ä—É—à–µ–Ω–∏–µ #{block.violations_count} ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {time_str}"
            )
        
        message_text = (
            f"üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(blocked_users)})**\n\n"
            + "\n\n".join(blocked_list)
        )
        
        if len(blocked_users) > 10:
            message_text += f"\n\n_...–∏ –µ—â—ë {len(blocked_users) - 10}_"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data=f"rl_refresh:{message.from_user.id}"
            )],
            [InlineKeyboardButton(
                text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data=f"rl_stats:{message.from_user.id}"
            )]
        ])
        
        await message.reply(
            message_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in rate_limits_command: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limiting."
        )


@router.message(Command("unblock_user"))
async def unblock_user_command(message: Message):
    """
    –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    
    Usage: 
    /unblock_user <user_id>
    /unblock_user (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = await is_group_admin(message.from_user.id, message.chat.id, message.bot)
        if not is_admin:
            await message.reply(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!"
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_id = None
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: ID –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) > 1:
            try:
                target_user_id = int(parts[1])
            except ValueError:
                await message.reply(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "`/unblock_user 123456789`\n"
                    "–∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    parse_mode="Markdown"
                )
                return
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif message.reply_to_message:
            target_user_id = message.reply_to_message.from_user.id
        
        else:
            await message.reply(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`/unblock_user 123456789`\n"
                "–∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                parse_mode="Markdown"
            )
            return
        
        rate_limit_service = get_rate_limit_service()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        block = await rate_limit_service._get_user_block(target_user_id, message.chat.id)
        
        if not block:
            await message.reply(
                f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_user_id}` –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="Markdown"
            )
            return
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
        success = await rate_limit_service.unblock_user(
            user_id=target_user_id,
            chat_id=message.chat.id,
            admin_id=message.from_user.id
        )
        
        if success:
            await message.reply(
                f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n"
                f"üë§ User ID: `{target_user_id}`\n"
                f"üëÆ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {message.from_user.mention_html()}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.",
                parse_mode="HTML"
            )
            logger.info(f"Admin {message.from_user.id} unblocked user {target_user_id}")
        else:
            await message.reply(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            )
        
    except Exception as e:
        logger.error(f"Error in unblock_user_command: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )


@router.message(Command("block_user"))
async def block_user_command(message: Message):
    """
    –í—Ä—É—á–Ω—É—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    
    Usage:
    /block_user <user_id> <duration_minutes>
    /block_user (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) <duration_minutes>
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = await is_group_admin(message.from_user.id, message.chat.id, message.bot)
        if not is_admin:
            await message.reply(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!"
            )
            return
        
        parts = message.text.split()
        target_user_id = None
        duration_minutes = None
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if message.reply_to_message:
            # –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            target_user_id = message.reply_to_message.from_user.id
            if len(parts) > 1:
                try:
                    duration_minutes = int(parts[1])
                except ValueError:
                    pass
        elif len(parts) >= 3:
            # ID –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ
            try:
                target_user_id = int(parts[1])
                duration_minutes = int(parts[2])
            except ValueError:
                pass
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not target_user_id or not duration_minutes:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "`/block_user 123456789 60` - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 60 –º–∏–Ω—É—Ç\n"
                "–∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                "`/block_user 60`",
                parse_mode="Markdown"
            )
            return
        
        if duration_minutes < 1 or duration_minutes > 10080:  # –ú–∞–∫—Å–∏–º—É–º –Ω–µ–¥–µ–ª—è
            await message.reply(
                "‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10080 –º–∏–Ω—É—Ç (7 –¥–Ω–µ–π)!"
            )
            return
        
        rate_limit_service = get_rate_limit_service()
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await rate_limit_service.manual_block_user(
            user_id=target_user_id,
            chat_id=message.chat.id,
            duration_seconds=duration_minutes * 60,
            admin_id=message.from_user.id,
            reason="manual_admin"
        )
        
        if success:
            time_str = _format_time(duration_minutes * 60)
            await message.reply(
                f"üîí **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n"
                f"üë§ User ID: `{target_user_id}`\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time_str}\n"
                f"üëÆ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {message.from_user.mention_html()}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                parse_mode="HTML"
            )
            logger.info(
                f"Admin {message.from_user.id} manually blocked user {target_user_id} "
                f"for {duration_minutes} minutes"
            )
        else:
            await message.reply(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            )
        
    except Exception as e:
        logger.error(f"Error in block_user_command: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )


@router.message(Command("user_rl_stats"))
async def user_rl_stats_command(message: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    
    Usage:
    /user_rl_stats <user_id>
    /user_rl_stats (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = await is_group_admin(message.from_user.id, message.chat.id, message.bot)
        if not is_admin:
            await message.reply(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!"
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_id = None
        
        parts = message.text.split()
        if len(parts) > 1:
            try:
                target_user_id = int(parts[1])
            except ValueError:
                pass
        elif message.reply_to_message:
            target_user_id = message.reply_to_message.from_user.id
        
        if not target_user_id:
            await message.reply(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`/user_rl_stats 123456789`",
                parse_mode="Markdown"
            )
            return
        
        rate_limit_service = get_rate_limit_service()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await rate_limit_service.get_user_statistics(
            user_id=target_user_id,
            chat_id=message.chat.id
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        message_text += f"üë§ User ID: `{target_user_id}`\n"
        message_text += f"‚ö†Ô∏è –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {stats['violations_total']}\n\n"
        
        if stats['currently_blocked']:
            blocked_until = datetime.fromisoformat(stats['blocked_until'])
            remaining = (blocked_until - datetime.now()).total_seconds()
            time_str = _format_time(remaining)
            
            message_text += f"üö´ **–¢–µ–∫—É—â–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞:**\n"
            message_text += f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {stats['block_reason']}\n"
            message_text += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {time_str}\n\n"
        else:
            message_text += "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
        
        if stats['last_violation']:
            last_time = datetime.fromisoformat(stats['last_violation']['time'])
            message_text += f"üìÖ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:**\n"
            message_text += f"‚Ä¢ –î–∞—Ç–∞: {last_time.strftime('%d.%m.%Y %H:%M')}\n"
            message_text += f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: /{stats['last_violation']['command']}\n"
            message_text += f"‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {_format_time(stats['last_violation']['duration'])}\n"
        
        await message.reply(
            message_text,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in user_rl_stats_command: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )


# === CALLBACK HANDLERS ===

@router.callback_query(F.data.startswith("rl_refresh:"))
async def refresh_rate_limits_callback(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        admin_id = int(callback.data.split(":")[1])
        
        if callback.from_user.id != admin_id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é!", show_alert=True)
            return
        
        rate_limit_service = get_rate_limit_service()
        blocked_users = await rate_limit_service.get_blocked_users(callback.message.chat.id)
        
        if not blocked_users:
            await callback.message.edit_text(
                "‚úÖ **Rate Limiting - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                "üìä –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                parse_mode="Markdown"
            )
            await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        blocked_list = []
        for i, block in enumerate(blocked_users[:10], 1):
            remaining = (block.blocked_until - datetime.now()).total_seconds()
            time_str = _format_time(remaining)
            
            reason_emoji = {
                BlockReason.SPAM_COMMANDS: "üö´",
                BlockReason.REPEATED_VIOLATIONS: "‚ö†Ô∏è",
                BlockReason.MANUAL_ADMIN: "üîí"
            }
            emoji = reason_emoji.get(block.reason, "‚ùå")
            
            blocked_list.append(
                f"{i}. {emoji} User ID `{block.user_id}`\n"
                f"   –ù–∞—Ä—É—à–µ–Ω–∏–µ #{block.violations_count} ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {time_str}"
            )
        
        message_text = (
            f"üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(blocked_users)})**\n\n"
            + "\n\n".join(blocked_list)
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data=f"rl_refresh:{admin_id}"
            )],
            [InlineKeyboardButton(
                text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data=f"rl_stats:{admin_id}"
            )]
        ])
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
        
    except Exception as e:
        logger.error(f"Error in refresh_rate_limits_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)


# === HELPER FUNCTIONS ===

def _format_time(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{int(seconds)} —Å–µ–∫"
    elif seconds < 3600:
        return f"{int(seconds / 60)} –º–∏–Ω"
    elif seconds < 86400:
        hours = int(seconds / 3600)
        minutes = int((seconds % 3600) / 60)
        return f"{hours} —á {minutes} –º–∏–Ω"
    else:
        days = int(seconds / 86400)
        hours = int((seconds % 86400) / 3600)
        return f"{days} –¥–Ω {hours} —á"
