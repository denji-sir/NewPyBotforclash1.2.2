"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
–§–∞–∑–∞ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""

from typing import Dict, List, Optional, Any
import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..services.achievement_service import AchievementService
from ..models.achievement_models import (
    AchievementCategory, AchievementDifficulty, AchievementStatus,
    Achievement, UserAchievementProgress, UserProfile
)
from ..services.user_context_service import UserContext
from ..ui.formatting import create_progress_bar

logger = logging.getLogger(__name__)
router = Router()


class AchievementCommands:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.achievement_service = AchievementService()
    
    async def handle_achievements_list(self, message: Message, user_context: UserContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            summary = await self.achievement_service.get_user_achievements_summary(
                user_context.user_id, user_context.chat_id
            )
            
            if not summary:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
            profile = summary['profile']
            level_info = summary['level_progress']
            
            text_lines = [
                "üèÜ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n",
                f"üë§ **–£—Ä–æ–≤–µ–Ω—å:** {profile.level} ({level_info['progress_percentage']:.0f}% –¥–æ {level_info['next_level']})",
                f"‚≠ê **–û–ø—ã—Ç:** {level_info['current_exp']}/{level_info['needed_exp']} XP",
                f"üéØ **–û—á–∫–∏:** {profile.total_points}",
                f"üèÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {summary['completed_achievements']}/{summary['total_achievements']} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
                f"üíé **–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥:** {summary['claimed_achievements']} —Ä–∞–∑\n"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —É—Ä–æ–≤–Ω—è
            level_progress = create_progress_bar(level_info['progress_percentage'])
            text_lines.append(f"üìà {level_progress} {level_info['progress_percentage']:.0f}%\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if summary['category_statistics']:
                text_lines.append("üìä **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**")
                
                category_names = {
                    'social': 'üí¨ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
                    'game_progress': 'üéÆ –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å',
                    'clan_contribution': 'üè∞ –í–∫–ª–∞–¥ –≤ –∫–ª–∞–Ω',
                    'system_mastery': '‚öôÔ∏è –û—Å–≤–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
                    'leadership': 'üëë –õ–∏–¥–µ—Ä—Å—Ç–≤–æ',
                    'special_events': 'üéâ –û—Å–æ–±—ã–µ —Å–æ–±—ã—Ç–∏—è',
                    'milestones': 'üéñÔ∏è –í–µ—Ö–∏'
                }
                
                for category, stats in summary['category_statistics'].items():
                    category_name = category_names.get(category, category)
                    completion_rate = (stats['completed'] / stats['total']) * 100 if stats['total'] > 0 else 0
                    text_lines.append(f"   {category_name}: {stats['completed']}/{stats['total']} ({completion_rate:.0f}%)")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardBuilder()
            
            # –ö–Ω–æ–ø–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            keyboard.row(
                InlineKeyboardButton(text="üí¨ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ", callback_data="achievements:category:social"),
                InlineKeyboardButton(text="üéÆ –ò–≥—Ä–æ–≤—ã–µ", callback_data="achievements:category:game_progress")
            )
            keyboard.row(
                InlineKeyboardButton(text="üè∞ –ö–ª–∞–Ω–æ–≤—ã–µ", callback_data="achievements:category:clan_contribution"),
                InlineKeyboardButton(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="achievements:category:system_mastery")
            )
            keyboard.row(
                InlineKeyboardButton(text="üëë –õ–∏–¥–µ—Ä—Å—Ç–≤–æ", callback_data="achievements:category:leadership"),
                InlineKeyboardButton(text="üéâ –°–æ–±—ã—Ç–∏—è", callback_data="achievements:category:special_events")
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            keyboard.row(
                InlineKeyboardButton(text="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="achievements:leaderboard"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="achievements:refresh")
            )
            
            await message.answer(
                "\n".join(text_lines),
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
    
    async def handle_achievements_category(self, callback: CallbackQuery, category: str, user_context: UserContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_enum = AchievementCategory(category)
            achievements = await self.achievement_service.get_all_achievements(category_enum)
            
            if not achievements:
                await callback.message.edit_text(
                    f"üìã –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{category}** –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.",
                    parse_mode="Markdown"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_progress = await self.achievement_service.get_all_user_progress(
                user_context.user_id, user_context.chat_id
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            text_lines = [f"üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {self._get_category_name(category)}**\n"]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            difficulty_groups = {}
            for achievement in achievements:
                difficulty = achievement.difficulty.value
                if difficulty not in difficulty_groups:
                    difficulty_groups[difficulty] = []
                difficulty_groups[difficulty].append(achievement)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            difficulty_icons = {
                'bronze': 'ü•â',
                'silver': 'ü•à', 
                'gold': 'ü•á',
                'platinum': 'üíé',
                'diamond': 'üí†'
            }
            
            for difficulty in ['bronze', 'silver', 'gold', 'platinum', 'diamond']:
                if difficulty in difficulty_groups:
                    text_lines.append(f"\n{difficulty_icons[difficulty]} **{difficulty.upper()}**")
                    
                    for achievement in difficulty_groups[difficulty]:
                        progress = user_progress.get(achievement.achievement_id)
                        status_icon = self._get_status_icon(progress.status if progress else AchievementStatus.LOCKED)
                        
                        progress_text = ""
                        if progress and progress.status == AchievementStatus.IN_PROGRESS:
                            overall_progress = achievement.get_overall_progress()
                            progress_bar = create_progress_bar(overall_progress)
                            progress_text = f" {progress_bar} {overall_progress:.0f}%"
                        
                        text_lines.append(f"{status_icon} {achievement.icon} **{achievement.name}**{progress_text}")
                        text_lines.append(f"   _{achievement.description}_")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
                        if achievement.rewards:
                            rewards_text = ", ".join([f"{reward.icon} {reward.name}" for reward in achievement.rewards[:2]])
                            if len(achievement.rewards) > 2:
                                rewards_text += f" +{len(achievement.rewards) - 2} –µ—â–µ"
                            text_lines.append(f"   üéÅ {rewards_text}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = InlineKeyboardBuilder()
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories = [
                ("üí¨", "social", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ"),
                ("üéÆ", "game_progress", "–ò–≥—Ä–æ–≤—ã–µ"),  
                ("üè∞", "clan_contribution", "–ö–ª–∞–Ω–æ–≤—ã–µ"),
                ("‚öôÔ∏è", "system_mastery", "–°–∏—Å—Ç–µ–º–∞"),
                ("üëë", "leadership", "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ"),
                ("üéâ", "special_events", "–°–æ–±—ã—Ç–∏—è")
            ]
            
            current_row = []
            for icon, cat_key, name in categories:
                if cat_key != category:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    current_row.append(InlineKeyboardButton(
                        text=icon, 
                        callback_data=f"achievements:category:{cat_key}"
                    ))
                    
                    if len(current_row) == 3:
                        keyboard.row(*current_row)
                        current_row = []
            
            if current_row:
                keyboard.row(*current_row)
            
            keyboard.row(
                InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É", callback_data="achievements:back"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"achievements:category:{category}")
            )
            
            await callback.message.edit_text(
                "\n".join(text_lines),
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π {category}: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    
    async def handle_achievement_details(self, callback: CallbackQuery, achievement_id: str, user_context: UserContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏"""
        
        try:
            achievement = await self.achievement_service.get_achievement(achievement_id)
            progress = await self.achievement_service.get_user_progress(
                user_context.user_id, user_context.chat_id, achievement_id
            )
            
            if not achievement:
                await callback.answer("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            text_lines = [
                f"{achievement.icon} **{achievement.name}**",
                f"_{achievement.description}_\n"
            ]
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
            difficulty_names = {
                'bronze': 'ü•â –ë—Ä–æ–Ω–∑–∞',
                'silver': 'ü•à –°–µ—Ä–µ–±—Ä–æ',
                'gold': 'ü•á –ó–æ–ª–æ—Ç–æ', 
                'platinum': 'üíé –ü–ª–∞—Ç–∏–Ω–∞',
                'diamond': 'üí† –ê–ª–º–∞–∑'
            }
            
            text_lines.extend([
                f"üìÅ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {self._get_category_name(achievement.category.value)}",
                f"‚≠ê **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {difficulty_names.get(achievement.difficulty.value, achievement.difficulty.value)}",
                f"üéØ **–°—Ç–∞—Ç—É—Å:** {self._get_status_name(progress.status if progress else AchievementStatus.LOCKED)}\n"
            ])
            
            # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
            if achievement.requirements:
                text_lines.append("üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**")
                for i, requirement in enumerate(achievement.requirements, 1):
                    current_value = progress.current_values.get(requirement.requirement_type, 0) if progress else 0
                    requirement.current_value = current_value
                    
                    req_progress = requirement.get_progress_percentage()
                    progress_bar = create_progress_bar(req_progress)
                    
                    req_text = self._format_requirement_text(requirement)
                    text_lines.append(f"   {i}. {req_text}")
                    text_lines.append(f"      {progress_bar} {req_progress:.0f}% ({current_value}/{requirement.target_value})")
                
                text_lines.append("")
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            if achievement.prerequisites:
                text_lines.append("üîí **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:**")
                for prereq_id in achievement.prerequisites:
                    prereq_achievement = await self.achievement_service.get_achievement(prereq_id)
                    prereq_progress = await self.achievement_service.get_user_progress(
                        user_context.user_id, user_context.chat_id, prereq_id
                    )
                    
                    if prereq_achievement:
                        status_icon = self._get_status_icon(prereq_progress.status if prereq_progress else AchievementStatus.LOCKED)
                        text_lines.append(f"   {status_icon} {prereq_achievement.name}")
                
                text_lines.append("")
            
            # –ù–∞–≥—Ä–∞–¥—ã
            if achievement.rewards:
                text_lines.append("üéÅ **–ù–∞–≥—Ä–∞–¥—ã:**")
                for reward in achievement.rewards:
                    reward_text = f"{reward.icon} **{reward.name}**"
                    if reward.value:
                        reward_text += f" (+{reward.value})"
                    text_lines.append(f"   ‚Ä¢ {reward_text}")
                    if reward.description:
                        text_lines.append(f"     _{reward.description}_")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = InlineKeyboardBuilder()
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
            if progress and progress.status == AchievementStatus.COMPLETED:
                keyboard.row(InlineKeyboardButton(
                    text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã",
                    callback_data=f"achievements:claim:{achievement_id}"
                ))
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.row(InlineKeyboardButton(
                text="‚Üê –ù–∞–∑–∞–¥",
                callback_data=f"achievements:category:{achievement.category.value}"
            ))
            
            await callback.message.edit_text(
                "\n".join(text_lines),
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è {achievement_id}: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏.")
    
    async def handle_claim_rewards(self, callback: CallbackQuery, achievement_id: str, user_context: UserContext):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"""
        
        try:
            success = await self.achievement_service.claim_achievement_rewards(
                user_context.user_id, user_context.chat_id, achievement_id
            )
            
            if success:
                achievement = await self.achievement_service.get_achievement(achievement_id)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥–∞—Ö
                text_lines = [
                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**",
                    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ **{achievement.name}**!\n",
                    "üéÅ **–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:**"
                ]
                
                for reward in achievement.rewards:
                    reward_text = f"{reward.icon} **{reward.name}**"
                    if reward.value:
                        reward_text += f" (+{reward.value})"
                    text_lines.append(f"   ‚Ä¢ {reward_text}")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                profile = await self.achievement_service.get_user_profile(
                    user_context.user_id, user_context.chat_id
                )
                
                text_lines.extend([
                    "",
                    f"üìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:**",
                    f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {profile.level}",
                    f"üéØ –û—á–∫–∏: {profile.total_points}",
                    f"üèÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {profile.achievements_completed}",
                    f"üíé –ü–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥: {profile.achievements_claimed}"
                ])
                
                keyboard = InlineKeyboardBuilder()
                keyboard.row(InlineKeyboardButton(
                    text="üèÜ –ö —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
                    callback_data="achievements:back"
                ))
                
                await callback.message.edit_text(
                    "\n".join(text_lines),
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )
                
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {achievement_id}: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥.")
    
    async def handle_leaderboard(self, callback: CallbackQuery, category: str = "total_points"):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
        
        try:
            leaderboard = await self.achievement_service.get_leaderboard(category, limit=10)
            
            if not leaderboard:
                await callback.message.edit_text("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
                return
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_titles = {
                'total_points': 'üéØ –õ–∏–¥–µ—Ä—ã –ø–æ –æ—á–∫–∞–º',
                'level': '‚≠ê –õ–∏–¥–µ—Ä—ã –ø–æ —É—Ä–æ–≤–Ω—é',
                'achievements': 'üèÖ –õ–∏–¥–µ—Ä—ã –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º'
            }
            
            text_lines = [
                category_titles.get(category, f'üèÜ –õ–∏–¥–µ—Ä—ã: {category}'),
                ""
            ]
            
            # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–æ–ø-3
            rank_icons = {1: 'ü•á', 2: 'ü•à', 3: 'ü•â'}
            
            for entry in leaderboard:
                rank_icon = rank_icons.get(entry.rank, f"{entry.rank}.")
                
                if category == 'total_points':
                    score_text = f"{entry.score:.0f} –æ—á–∫–æ–≤"
                elif category == 'level':
                    score_text = f"{entry.score:.0f} —É—Ä–æ–≤–µ–Ω—å"
                elif category == 'achievements':
                    score_text = f"{entry.score:.0f} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
                else:
                    score_text = f"{entry.score:.0f}"
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                additional = []
                if 'level' in entry.additional_info and category != 'level':
                    additional.append(f"—É—Ä.{entry.additional_info['level']}")
                if 'achievements_completed' in entry.additional_info and category != 'achievements':
                    additional.append(f"{entry.additional_info['achievements_completed']}üèÖ")
                
                additional_text = f" ({', '.join(additional)})" if additional else ""
                
                text_lines.append(f"{rank_icon} **{entry.display_name}** - {score_text}{additional_text}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            keyboard = InlineKeyboardBuilder()
            
            categories = [
                ('üéØ', 'total_points', '–û—á–∫–∏'),
                ('‚≠ê', 'level', '–£—Ä–æ–≤–µ–Ω—å'),
                ('üèÖ', 'achievements', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
            ]
            
            category_buttons = []
            for icon, cat_key, name in categories:
                if cat_key != category:
                    category_buttons.append(InlineKeyboardButton(
                        text=f"{icon} {name}",
                        callback_data=f"achievements:leaderboard:{cat_key}"
                    ))
            
            if len(category_buttons) == 2:
                keyboard.row(*category_buttons)
            elif len(category_buttons) == 1:
                keyboard.row(category_buttons[0])
            
            keyboard.row(
                InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="achievements:back"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"achievements:leaderboard:{category}")
            )
            
            await callback.message.edit_text(
                "\n".join(text_lines),
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def _get_category_name(self, category: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        
        names = {
            'social': 'üí¨ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
            'game_progress': 'üéÆ –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å',
            'clan_contribution': 'üè∞ –í–∫–ª–∞–¥ –≤ –∫–ª–∞–Ω',
            'system_mastery': '‚öôÔ∏è –û—Å–≤–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
            'leadership': 'üëë –õ–∏–¥–µ—Ä—Å—Ç–≤–æ',
            'special_events': 'üéâ –û—Å–æ–±—ã–µ —Å–æ–±—ã—Ç–∏—è',
            'milestones': 'üéñÔ∏è –í–µ—Ö–∏'
        }
        
        return names.get(category, category)
    
    def _get_status_icon(self, status: AchievementStatus) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        
        icons = {
            AchievementStatus.LOCKED: 'üîí',
            AchievementStatus.AVAILABLE: 'üîì',
            AchievementStatus.IN_PROGRESS: '‚è≥',
            AchievementStatus.COMPLETED: '‚úÖ',
            AchievementStatus.CLAIMED: 'üíé'
        }
        
        return icons.get(status, '‚ùì')
    
    def _get_status_name(self, status: AchievementStatus) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        
        names = {
            AchievementStatus.LOCKED: 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
            AchievementStatus.AVAILABLE: 'üîì –î–æ—Å—Ç—É–ø–Ω–æ',
            AchievementStatus.IN_PROGRESS: '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            AchievementStatus.COMPLETED: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            AchievementStatus.CLAIMED: 'üíé –ù–∞–≥—Ä–∞–¥—ã –ø–æ–ª—É—á–µ–Ω—ã'
        }
        
        return names.get(status, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    def _format_requirement_text(self, requirement: AchievementRequirement) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        
        requirement_texts = {
            'messages_count': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π',
            'passport_created': '–°–æ–∑–¥–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç',
            'player_bound': '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞',
            'clan_membership': '–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω',
            'player_verified': '–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é',
            'trophies': '–ù–∞–±—Ä–∞—Ç—å –∫—É–±–∫–æ–≤',
            'clan_wars_participated': '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–æ–π–Ω–∞—Ö –∫–ª–∞–Ω–∞',
            'donations_made': '–°–¥–µ–ª–∞—Ç—å –¥–æ–Ω–∞—Ü–∏–π'
        }
        
        base_text = requirement_texts.get(requirement.requirement_type, requirement.requirement_type)
        
        if requirement.comparison == "gte":
            return f"{base_text}: {requirement.target_value}+"
        elif requirement.comparison == "eq" and isinstance(requirement.target_value, bool):
            return base_text
        else:
            return f"{base_text}: {requirement.target_value}"


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
@router.message(Command("achievements", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"))
async def cmd_achievements(message: Message, user_context: UserContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    handler = AchievementCommands()
    await handler.handle_achievements_list(message, user_context)


@router.message(Command("my_progress", "–ø—Ä–æ–≥—Ä–µ—Å—Å"))
async def cmd_my_progress(message: Message, user_context: UserContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    handler = AchievementCommands()
    
    try:
        achievement_service = AchievementService()
        profile = await achievement_service.get_user_profile(user_context.user_id, user_context.chat_id)
        level_info = profile.get_progress_to_next_level()
        
        text_lines = [
            "üìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å**\n",
            f"üë§ **–£—Ä–æ–≤–µ–Ω—å:** {profile.level}",
            f"‚≠ê **–û–ø—ã—Ç:** {profile.experience_points} XP",
            f"üìà **–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:** {level_info['needed_exp'] - level_info['current_exp']} XP",
            f"üéØ **–í—Å–µ–≥–æ –æ—á–∫–æ–≤:** {profile.total_points}\n"
        ]
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = create_progress_bar(level_info['progress_percentage'])
        text_lines.append(f"üìà {progress_bar} {level_info['progress_percentage']:.0f}%\n")
        
        # –¢–∏—Ç—É–ª—ã –∏ –∑–Ω–∞—á–∫–∏
        if profile.titles:
            text_lines.append(f"üè∑Ô∏è **–¢–∏—Ç—É–ª—ã:** {', '.join(list(profile.titles)[:5])}")
        
        if profile.badges:
            text_lines.append(f"üéñÔ∏è **–ó–Ω–∞—á–∫–∏:** {len(profile.badges)} –ø–æ–ª—É—á–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements:back"),
            InlineKeyboardButton(text="üèÅ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="achievements:leaderboard:total_points")
        )
        
        await message.answer(
            "\n".join(text_lines),
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.")


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data.startswith("achievements:"))
async def handle_achievements_callbacks(callback: CallbackQuery, user_context: UserContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    
    handler = AchievementCommands()
    action_parts = callback.data.split(":")
    
    try:
        if len(action_parts) < 2:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
        
        action = action_parts[1]
        
        if action == "back" or action == "refresh":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            await handler.handle_achievements_list(callback.message, user_context)
            
        elif action == "category" and len(action_parts) >= 3:
            # –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            category = action_parts[2]
            await handler.handle_achievements_category(callback, category, user_context)
            
        elif action == "details" and len(action_parts) >= 3:
            # –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è  
            achievement_id = action_parts[2]
            await handler.handle_achievement_details(callback, achievement_id, user_context)
            
        elif action == "claim" and len(action_parts) >= 3:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
            achievement_id = action_parts[2]
            await handler.handle_claim_rewards(callback, achievement_id, user_context)
            
        elif action == "leaderboard":
            # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
            category = action_parts[2] if len(action_parts) >= 3 else "total_points"
            await handler.handle_leaderboard(callback, category)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π {callback.data}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")