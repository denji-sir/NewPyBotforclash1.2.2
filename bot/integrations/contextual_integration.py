"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –±–æ—Ç–∞
–§–∞–∑–∞ 5: –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
"""

from typing import Dict, List, Optional, Any, Tuple
import logging
from datetime import datetime, timedelta

from ..services.user_context_service import UserContextService, UserContext
from ..services.passport_database_service import PassportDatabaseService
from ..services.clan_database_service import ClanDatabaseService
from ..services.player_binding_service import PlayerBindingService
from ..handlers.contextual_commands import ContextualCommandSystem
from ..middleware.contextual_middleware import ContextualMiddleware

logger = logging.getLogger(__name__)


class ContextualBotIntegration:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –±–æ—Ç–∞
    """
    
    def __init__(self):
        self.context_service = UserContextService()
        self.passport_service = PassportDatabaseService()
        self.clan_service = ClanDatabaseService()
        self.binding_service = PlayerBindingService()
        self.command_system = ContextualCommandSystem()
        self.middleware = ContextualMiddleware()
        
        # –ö—ç—à –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self._integration_cache: Dict[str, Dict[str, Any]] = {}
    
    async def initialize_integration(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            services_status = await self._check_services_availability()
            
            if not all(services_status.values()):
                logger.warning(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {services_status}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ö—É–∫–∏
            await self._setup_integration_hooks()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à–∏
            await self._initialize_caches()
            
            logger.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    async def enhance_passport_creation(
        self, 
        user_id: int, 
        chat_id: int, 
        passport_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = await self.context_service.get_user_context(user_id, chat_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫ –ø–∞—Å–ø–æ—Ä—Ç—É
            enhanced_data = passport_data.copy()
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if context.activity_level.value == "high":
                enhanced_data['suggested_role'] = 'active_member'
                enhanced_data['recommended_features'] = [
                    'clan_participation', 'leadership_track', 'mentoring'
                ]
            elif context.activity_level.value == "low":
                enhanced_data['suggested_role'] = 'casual_member'
                enhanced_data['recommended_features'] = [
                    'basic_tracking', 'notifications'
                ]
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–ª–∞–Ω–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
            if not context.is_clan_member:
                suggested_clans = await self._suggest_clans_for_user(context)
                enhanced_data['suggested_clans'] = suggested_clans
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            enhanced_data['personalized_settings'] = await self._generate_personalized_settings(context)
            
            return enhanced_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞: {e}")
            return passport_data
    
    async def enhance_player_binding(
        self, 
        user_id: int, 
        chat_id: int, 
        player_tag: str
    ) -> Dict[str, Any]:
        """
        –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = await self.context_service.get_user_context(user_id, chat_id)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–≤—è–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            binding_history = await self._analyze_binding_history(user_id, chat_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–ª–∞–Ω–∞–º–∏
            clan_compatibility = await self._check_clan_compatibility(player_tag, context)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            verification_recommendations = await self._generate_verification_recommendations(
                context, player_tag
            )
            
            return {
                'binding_history': binding_history,
                'clan_compatibility': clan_compatibility,
                'verification_recommendations': verification_recommendations,
                'suggested_verification_priority': self._calculate_verification_priority(context),
                'post_binding_actions': await self._suggest_post_binding_actions(context)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞: {e}")
            return {}
    
    async def enhance_clan_operations(
        self, 
        user_id: int, 
        chat_id: int, 
        operation_type: str,
        operation_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        –£–ª—É—á—à–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        
        try:
            context = await self.context_service.get_user_context(user_id, chat_id)
            
            enhanced_data = operation_data.copy()
            
            if operation_type == "join_clan":
                # –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª–∞–Ω–æ–º
                compatibility_score = await self._calculate_clan_user_compatibility(
                    context, operation_data.get('clan_tag')
                )
                enhanced_data['compatibility_score'] = compatibility_score
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
                adaptation_prediction = await self._predict_clan_adaptation(context)
                enhanced_data['adaptation_prediction'] = adaptation_prediction
            
            elif operation_type == "leave_clan":
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω —É—Ö–æ–¥–∞
                leave_analysis = await self._analyze_leave_reasons(context)
                enhanced_data['leave_analysis'] = leave_analysis
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤
                alternative_clans = await self._suggest_alternative_clans(context)
                enhanced_data['alternative_clans'] = alternative_clans
            
            elif operation_type == "clan_war_participation":
                # –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤–æ–π–Ω–µ
                war_readiness = await self._assess_war_readiness(context)
                enhanced_data['war_readiness'] = war_readiness
            
            return enhanced_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–ª–∞–Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
            return operation_data
    
    async def generate_contextual_menu(
        self, 
        user_id: int, 
        chat_id: int,
        menu_type: str = "main"
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        
        try:
            context = await self.context_service.get_user_context(user_id, chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é
            base_menu = await self.command_system.generate_contextual_menu(
                context, menu_type
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if context.has_player_binding:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
                base_menu['sections'].append({
                    'title': 'üéÆ –ò–≥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                    'commands': await self._get_game_commands_for_context(context)
                })
            
            if context.is_clan_member:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
                base_menu['sections'].append({
                    'title': 'üè∞ –ö–ª–∞–Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                    'commands': await self._get_clan_commands_for_context(context)
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏–¥–µ—Ä–æ–≤
            if context.context_type.value in ['clan_leader', 'admin']:
                base_menu['sections'].append({
                    'title': '‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                    'commands': await self._get_admin_commands_for_context(context)
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = await self._get_contextual_recommendations(context)
            if recommendations:
                base_menu['recommendations'] = recommendations
            
            return base_menu
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
            return {'sections': [], 'recommendations': []}
    
    async def handle_context_change_event(
        self, 
        user_id: int, 
        chat_id: int,
        change_type: str,
        change_data: Dict[str, Any]
    ):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        
        try:
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            self.middleware.invalidate_context_cache(user_id, chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            new_context = await self.context_service.get_user_context(user_id, chat_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if change_type == "passport_created":
                await self._handle_passport_creation_event(new_context, change_data)
            
            elif change_type == "player_bound":
                await self._handle_player_binding_event(new_context, change_data)
            
            elif change_type == "player_verified":
                await self._handle_player_verification_event(new_context, change_data)
            
            elif change_type == "clan_joined":
                await self._handle_clan_join_event(new_context, change_data)
            
            elif change_type == "clan_left":
                await self._handle_clan_leave_event(new_context, change_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—ç—à
            await self._update_integration_cache(user_id, chat_id, new_context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    async def _check_services_availability(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        
        services_status = {}
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º passport service
            services_status['passport'] = await self._ping_service(self.passport_service)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º clan service
            services_status['clan'] = await self._ping_service(self.clan_service)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º binding service
            services_status['binding'] = await self._ping_service(self.binding_service)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º context service
            services_status['context'] = await self._ping_service(self.context_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        
        return services_status
    
    async def _ping_service(self, service) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            return hasattr(service, '__class__')
        except:
            return False
    
    async def _setup_integration_hooks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—É–∫–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        logger.info("–•—É–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def _initialize_caches(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–µ–π"""
        
        self._integration_cache = {}
        logger.info("–ö—ç—à–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def _suggest_clans_for_user(self, context: UserContext) -> List[Dict[str, Any]]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞–Ω—ã
            available_clans = await self.clan_service.get_all_clans()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            suggestions = []
            for clan in available_clans:
                compatibility_score = await self._calculate_clan_user_compatibility(
                    context, clan.clan_tag
                )
                
                if compatibility_score > 0.6:  # –ü–æ—Ä–æ–≥ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    suggestions.append({
                        'clan_name': clan.clan_name,
                        'clan_tag': clan.clan_tag,
                        'compatibility_score': compatibility_score,
                        'reasons': await self._get_compatibility_reasons(context, clan)
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            suggestions.sort(key=lambda x: x['compatibility_score'], reverse=True)
            
            return suggestions[:3]  # –¢–æ–ø-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–ª–∞–Ω–æ–≤: {e}")
            return []
    
    async def _generate_personalized_settings(self, context: UserContext) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        
        settings = {
            'notifications': {
                'clan_wars': context.is_clan_member,
                'binding_updates': not context.is_verified_player,
                'achievements': True,
                'reminders': context.activity_level.value == "low"
            },
            'interface': {
                'show_tips': context.experience_level.value == "beginner",
                'compact_mode': context.activity_level.value == "high",
                'auto_suggestions': True
            },
            'privacy': {
                'show_stats': True,
                'show_clan_info': context.is_clan_member,
                'allow_mentions': True
            }
        }
        
        return settings
    
    async def _analyze_binding_history(self, user_id: int, chat_id: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏–≤—è–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–≤—è–∑–æ–∫
            binding_history = await self.binding_service.get_user_binding_history(user_id, chat_id)
            
            analysis = {
                'total_bindings': len(binding_history),
                'successful_verifications': len([b for b in binding_history if b.is_verified]),
                'average_verification_time': 0,
                'binding_patterns': [],
                'risk_factors': []
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if analysis['total_bindings'] > 1:
                analysis['binding_patterns'].append('multiple_bindings')
                
                if analysis['successful_verifications'] == 0:
                    analysis['risk_factors'].append('no_successful_verifications')
            
            return analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏–≤—è–∑–æ–∫: {e}")
            return {'total_bindings': 0, 'risk_factors': []}
    
    async def _check_clan_compatibility(self, player_tag: str, context: UserContext) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ —Å –∫–ª–∞–Ω–∞–º–∏"""
        
        compatibility = {
            'compatible_clans': [],
            'incompatible_clans': [],
            'neutral_clans': []
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ –∏–∑ API
            # player_info = await self.clash_api.get_player(player_tag)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª–∞–Ω—ã —Å–∏—Å—Ç–µ–º—ã
            all_clans = await self.clan_service.get_all_clans()
            
            for clan in all_clans:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                # –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞, –∫—É–±–∫–æ–≤ –∏ —Ç.–¥.
                compatibility['neutral_clans'].append({
                    'clan_name': clan.clan_name,
                    'clan_tag': clan.clan_tag,
                    'reason': '–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏'
                })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–ª–∞–Ω–∞–º–∏: {e}")
        
        return compatibility
    
    async def _generate_verification_recommendations(
        self, 
        context: UserContext, 
        player_tag: str
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        
        recommendations = {
            'priority_level': 'normal',
            'estimated_time': '1-3 –¥–Ω—è',
            'acceleration_tips': [],
            'requirements_check': {}
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if context.activity_level.value == "high":
            recommendations['priority_level'] = 'high'
            recommendations['estimated_time'] = '6-24 —á–∞—Å–∞'
            recommendations['acceleration_tips'].append('–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ')
        
        if context.messages_last_week > 20:
            recommendations['acceleration_tips'].append('–ê–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö')
        
        return recommendations
    
    def _calculate_verification_priority(self, context: UserContext) -> int:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        
        priority = 50  # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if context.activity_level.value == "high":
            priority += 20
        elif context.activity_level.value == "medium":
            priority += 10
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–ª–∞–Ω–µ
        if context.is_clan_member:
            priority += 15
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        priority += min(context.messages_last_week * 2, 20)
        
        return min(priority, 100)
    
    async def _suggest_post_binding_actions(self, context: UserContext) -> List[Dict[str, str]]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏"""
        
        actions = []
        
        if not context.is_clan_member:
            actions.append({
                'action': 'join_clan',
                'title': '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞–Ω—É',
                'description': '–ù–∞–π–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–ª–∞–Ω –¥–ª—è —É—á–∞—Å—Ç–∏—è'
            })
        
        actions.append({
            'action': 'set_goals',
            'title': '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏',
            'description': '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–∏ –∏–≥—Ä–æ–≤—ã–µ —Ü–µ–ª–∏'
        })
        
        actions.append({
            'action': 'explore_features',
            'title': '–ò–∑—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
            'description': '–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞'
        })
        
        return actions
    
    async def _calculate_clan_user_compatibility(
        self, 
        context: UserContext, 
        clan_tag: str
    ) -> float:
        """–†–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª–∞–Ω–æ–º"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
            clan_info = await self.clan_service.get_clan_by_tag(clan_tag)
            
            if not clan_info:
                return 0.0
            
            compatibility_score = 0.0
            
            # –ë–∞–∑–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            compatibility_score += 0.3
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if context.activity_level.value == "high":
                compatibility_score += 0.2
            elif context.activity_level.value == "medium":
                compatibility_score += 0.1
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –æ–ø—ã—Ç
            if context.experience_level.value == "advanced":
                compatibility_score += 0.2
            elif context.experience_level.value == "intermediate":
                compatibility_score += 0.1
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏
            if context.has_player_binding:
                compatibility_score += 0.2
            
            return min(compatibility_score, 1.0)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
            return 0.5
    
    async def _get_compatibility_reasons(self, context: UserContext, clan) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        
        reasons = []
        
        if context.activity_level.value == "high":
            reasons.append("–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        if context.has_player_binding:
            reasons.append("–ï—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫")
        
        if context.experience_level.value in ["intermediate", "advanced"]:
            reasons.append("–û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        return reasons
    
    async def _update_integration_cache(self, user_id: int, chat_id: int, context: UserContext):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫—ç—à–∞"""
        
        cache_key = f"{user_id}_{chat_id}"
        
        self._integration_cache[cache_key] = {
            'context': context,
            'last_updated': datetime.now(),
            'menu_cache': None,
            'recommendations_cache': None
        }
    
    async def _handle_passport_creation_event(self, context: UserContext, change_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞"""
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    
    async def _handle_player_binding_event(self, context: UserContext, change_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞"""
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context}")
    
    async def _handle_player_verification_event(self, context: UserContext, change_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞"""
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context}")
    
    async def _handle_clan_join_event(self, context: UserContext, change_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª–∞–Ω"""
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context}")
    
    async def _handle_clan_leave_event(self, context: UserContext, change_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–ª–∞–Ω–∞"""
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context}")
    
    async def _get_game_commands_for_context(self, context: UserContext) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        commands = [
            {'name': '/my_stats', 'description': '–ú–æ—è –∏–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'},
            {'name': '/progress', 'description': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞'}
        ]
        
        return commands
    
    async def _get_clan_commands_for_context(self, context: UserContext) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        commands = [
            {'name': '/clan_info', 'description': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ'},
            {'name': '/clan_wars', 'description': '–ö–ª–∞–Ω–æ–≤—ã–µ –≤–æ–π–Ω—ã'}
        ]
        
        return commands
    
    async def _get_admin_commands_for_context(self, context: UserContext) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        commands = [
            {'name': '/admin_panel', 'description': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å'},
            {'name': '/user_management', 'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'}
        ]
        
        return commands
    
    async def _get_contextual_recommendations(self, context: UserContext) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        
        recommendations = []
        
        if not context.has_player_binding:
            recommendations.append({
                'type': 'action',
                'title': '–ü—Ä–∏–≤—è–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–∞',
                'description': '–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ',
                'command': '/bind_player'
            })
        
        if not context.is_clan_member:
            recommendations.append({
                'type': 'action',
                'title': '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–ª–∞–Ω—É',
                'description': '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∫–ª–∞–Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö',
                'command': '/join_clan'
            })
        
        return recommendations


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
contextual_integration = ContextualBotIntegration()