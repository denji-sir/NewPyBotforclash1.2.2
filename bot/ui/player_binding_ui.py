"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
–§–∞–∑–∞ 4: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
"""

from typing import List, Dict, Optional, Any, Tuple
import logging
from math import ceil

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..models.passport_models import PlayerBinding, PassportInfo
from ..services.player_search_service import PlayerSearchService
from ..utils.formatting import format_player_info, format_clan_info, truncate_text

logger = logging.getLogger(__name__)


class PlayerBindingUI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤"""
    
    def __init__(self):
        self.search_service = PlayerSearchService()
    
    def create_binding_menu(self, user_id: int, has_binding: bool = False) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            has_binding: –ï—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            InlineKeyboardMarkup —Å –æ–ø—Ü–∏—è–º–∏ –ø—Ä–∏–≤—è–∑–∫–∏
        """
        builder = InlineKeyboardBuilder()
        
        if has_binding:
            # –ú–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–∏–≤—è–∑–∫–æ–π
            builder.row(
                InlineKeyboardButton(
                    text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤—è–∑–∫—É",
                    callback_data=f"view_binding:{user_id}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="üîÑ –°–º–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞",
                    callback_data=f"change_player:{user_id}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞",
                    callback_data=f"confirm_unbind_menu:{user_id}"
                )
            )
        else:
            # –ú–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
            builder.row(
                InlineKeyboardButton(
                    text="üè∞ –í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–ª–∞–Ω–∞",
                    callback_data=f"select_from_clan:{user_id}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏",
                    callback_data=f"search_by_name:{user_id}"
                ),
                InlineKeyboardButton(
                    text="üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–≥",
                    callback_data=f"manual_tag_input:{user_id}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                    callback_data=f"binding_recommendations:{user_id}"
                )
            )
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"cancel_binding:{user_id}"
            )
        )
        
        return builder.as_markup()
    
    def create_clan_members_list(
        self,
        members: List[Dict[str, Any]],
        user_id: int,
        page: int = 0,
        per_page: int = 8,
        filters: Optional[Dict] = None
    ) -> Tuple[InlineKeyboardMarkup, Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        Args:
            members: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            filters: –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            
        Returns:
            Tuple —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        """
        builder = InlineKeyboardBuilder()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        total_members = len(members)
        total_pages = ceil(total_members / per_page) if total_members > 0 else 1
        start_idx = page * per_page
        end_idx = min(start_idx + per_page, total_members)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        current_page_members = members[start_idx:end_idx]
        
        for member in current_page_members:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
            role_emoji = self._get_role_emoji(member.get('player_role', 'member'))
            trophies = member.get('player_trophies', 0)
            name = truncate_text(member.get('player_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), 20)
            
            button_text = f"{role_emoji} {name} (üíé{trophies:,})"
            
            builder.row(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"bind_clan_member:{user_id}:{member['player_tag']}"
                )
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            pagination_buttons = []
            
            if page > 0:
                pagination_buttons.append(
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ü—Ä–µ–¥.",
                        callback_data=f"clan_members_page:{user_id}:{page-1}"
                    )
                )
            
            pagination_buttons.append(
                InlineKeyboardButton(
                    text=f"üìÑ {page + 1}/{total_pages}",
                    callback_data=f"clan_members_info:{user_id}"
                )
            )
            
            if page < total_pages - 1:
                pagination_buttons.append(
                    InlineKeyboardButton(
                        text="–°–ª–µ–¥. ‚û°Ô∏è",
                        callback_data=f"clan_members_page:{user_id}:{page+1}"
                    )
                )
            
            builder.row(*pagination_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        management_buttons = [
            InlineKeyboardButton(
                text="üîß –§–∏–ª—å—Ç—Ä—ã",
                callback_data=f"clan_filters:{user_id}"
            ),
            InlineKeyboardButton(
                text="üîç –ü–æ–∏—Å–∫",
                callback_data=f"clan_search:{user_id}"
            )
        ]
        builder.row(*management_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        builder.row(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=f"back_to_binding_options:{user_id}"
            )
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_info = {
            'current_page': page,
            'total_pages': total_pages,
            'total_members': total_members,
            'showing_from': start_idx + 1 if total_members > 0 else 0,
            'showing_to': end_idx,
            'per_page': per_page,
            'applied_filters': filters or {}
        }
        
        return builder.as_markup(), pagination_info
    
    def create_search_results_keyboard(
        self,
        search_results: Dict[str, Any],
        user_id: int,
        page: int = 0
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        
        Args:
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ PlayerSearchService
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            InlineKeyboardMarkup —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        """
        builder = InlineKeyboardBuilder()
        
        clan_members = search_results.get('clan_members', [])
        global_results = search_results.get('global_results', [])
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤
        if clan_members:
            builder.row(
                InlineKeyboardButton(
                    text="üè∞ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤:",
                    callback_data=f"search_info:{user_id}"
                )
            )
            
            for member in clan_members[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                name = truncate_text(member.get('player_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), 18)
                trophies = member.get('player_trophies', 0)
                clan_name = truncate_text(member.get('clan_name', ''), 12)
                
                button_text = f"‚úÖ {name} (üíé{trophies:,}) | {clan_name}"
                
                builder.row(
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"bind_search_result:{user_id}:{member['player_tag']}"
                    )
                )
        
        # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if global_results:
            if clan_members:  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                builder.row(
                    InlineKeyboardButton(
                        text="üåç –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏:",
                        callback_data=f"search_info:{user_id}"
                    )
                )
            
            for result in global_results[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                name = truncate_text(result.get('player_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), 18)
                trophies = result.get('player_trophies', 0)
                
                button_text = f"‚ö° {name} (üíé{trophies:,})"
                
                builder.row(
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"bind_search_result:{user_id}:{result['player_tag']}"
                    )
                )
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–Ω–æ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
        total_results = len(clan_members) + len(global_results)
        if total_results > 8:
            builder.row(
                InlineKeyboardButton(
                    text=f"üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ({total_results})",
                    callback_data=f"show_all_search_results:{user_id}:{page}"
                )
            )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º
        builder.row(
            InlineKeyboardButton(
                text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
                callback_data=f"new_search:{user_id}"
            ),
            InlineKeyboardButton(
                text="üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–≥",
                callback_data=f"manual_tag_input:{user_id}"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üîô –ö –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞",
                callback_data=f"back_to_binding_options:{user_id}"
            )
        )
        
        return builder.as_markup()
    
    def create_player_validation_keyboard(
        self,
        validation_result: Dict[str, Any],
        user_id: int,
        player_tag: str
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        Args:
            validation_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            player_tag: –¢–µ–≥ –∏–≥—Ä–æ–∫–∞
            
        Returns:
            InlineKeyboardMarkup —Å –æ–ø—Ü–∏—è–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        """
        builder = InlineKeyboardBuilder()
        
        if validation_result.get('success', False):
            # –ò–≥—Ä–æ–∫ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é - –º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å
            builder.row(
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É",
                    callback_data=f"confirm_bind_player:{user_id}:{player_tag}"
                )
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            builder.row(
                InlineKeyboardButton(
                    text="üëÄ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    callback_data=f"player_detailed_info:{user_id}:{player_tag}"
                )
            )
        else:
            # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            builder.row(
                InlineKeyboardButton(
                    text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
                    callback_data=f"try_another_player:{user_id}"
                )
            )
            
            builder.row(
                InlineKeyboardButton(
                    text="üìù –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–≥",
                    callback_data=f"manual_tag_input:{user_id}"
                )
            )
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        builder.row(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É",
                callback_data=f"back_to_search:{user_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"cancel_binding:{user_id}"
            )
        )
        
        return builder.as_markup()
    
    def create_clan_filters_keyboard(self, user_id: int, current_filters: Dict) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_filters: –¢–µ–∫—É—â–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            
        Returns:
            InlineKeyboardMarkup —Å –æ–ø—Ü–∏—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        """
        builder = InlineKeyboardBuilder()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫—É–±–∫–∞–º
        trophy_filter = current_filters.get('min_trophies', None)
        trophy_text = f"üíé –ö—É–±–∫–∏ (–º–∏–Ω: {trophy_filter})" if trophy_filter else "üíé –§–∏–ª—å—Ç—Ä –ø–æ –∫—É–±–∫–∞–º"
        builder.row(
            InlineKeyboardButton(
                text=trophy_text,
                callback_data=f"filter_trophies:{user_id}"
            )
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª—è–º
        roles_filter = current_filters.get('roles', [])
        if roles_filter:
            roles_text = f"üë§ –†–æ–ª–∏ ({len(roles_filter)} –≤—ã–±—Ä–∞–Ω–æ)"
        else:
            roles_text = "üë§ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª—è–º"
        
        builder.row(
            InlineKeyboardButton(
                text=roles_text,
                callback_data=f"filter_roles:{user_id}"
            )
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏
        name_filter = current_filters.get('name_filter', '')
        if name_filter:
            name_text = f"üîç –ò–º—è: '{name_filter[:10]}...'" if len(name_filter) > 10 else f"üîç –ò–º—è: '{name_filter}'"
        else:
            name_text = "üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏"
        
        builder.row(
            InlineKeyboardButton(
                text=name_text,
                callback_data=f"filter_name:{user_id}"
            )
        )
        
        # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        if current_filters:
            builder.row(
                InlineKeyboardButton(
                    text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                    callback_data=f"clear_filters:{user_id}"
                )
            )
        
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å",
                callback_data=f"apply_filters:{user_id}"
            ),
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=f"back_to_clan_list:{user_id}"
            )
        )
        
        return builder.as_markup()
    
    def create_verification_queue_keyboard(
        self,
        unverified_bindings: List[Dict],
        admin_id: int,
        page: int = 0
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—á–µ—Ä–µ–¥—å—é –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫
        
        Args:
            unverified_bindings: –°–ø–∏—Å–æ–∫ –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            
        Returns:
            InlineKeyboardMarkup —Å –æ—á–µ—Ä–µ–¥—å—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        builder = InlineKeyboardBuilder()
        
        per_page = 5
        total_pages = ceil(len(unverified_bindings) / per_page) if unverified_bindings else 1
        start_idx = page * per_page
        end_idx = min(start_idx + per_page, len(unverified_bindings))
        
        current_page_bindings = unverified_bindings[start_idx:end_idx]
        
        for binding in current_page_bindings:
            user_name = truncate_text(binding.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), 15)
            player_name = truncate_text(binding.get('player_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), 15)
            
            button_text = f"‚úÖ {user_name} ‚Üí {player_name}"
            
            builder.row(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"verify_binding:{binding['user_id']}:{admin_id}"
                )
            )
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if total_pages > 1:
            pagination_buttons = []
            
            if page > 0:
                pagination_buttons.append(
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è",
                        callback_data=f"verify_queue_page:{admin_id}:{page-1}"
                    )
                )
            
            pagination_buttons.append(
                InlineKeyboardButton(
                    text=f"{page + 1}/{total_pages}",
                    callback_data=f"verify_queue_info:{admin_id}"
                )
            )
            
            if page < total_pages - 1:
                pagination_buttons.append(
                    InlineKeyboardButton(
                        text="‚û°Ô∏è",
                        callback_data=f"verify_queue_page:{admin_id}:{page+1}"
                    )
                )
            
            builder.row(*pagination_buttons)
        
        # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö",
                callback_data=f"verify_all_bindings:{admin_id}"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                callback_data=f"refresh_verify_queue:{admin_id}"
            )
        )
        
        return builder.as_markup()
    
    def create_binding_statistics_keyboard(self, user_id: int, is_admin: bool = False) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤—è–∑–æ–∫
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_admin: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            
        Returns:
            InlineKeyboardMarkup —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–ø—Ü–∏—è–º–∏
        """
        builder = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        builder.row(
            InlineKeyboardButton(
                text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data=f"stats_overview:{user_id}"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üè∞ –ü–æ –∫–ª–∞–Ω–∞–º",
                callback_data=f"stats_by_clans:{user_id}"
            ),
            InlineKeyboardButton(
                text="üìà –ü–æ –≤—Ä–µ–º–µ–Ω–∏",
                callback_data=f"stats_by_time:{user_id}"
            )
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if is_admin:
            builder.row(
                InlineKeyboardButton(
                    text="‚è≥ –û—á–µ—Ä–µ–¥—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                    callback_data=f"verification_queue:{user_id}"
                )
            )
            
            builder.row(
                InlineKeyboardButton(
                    text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∞–º–∏",
                    callback_data=f"admin_binding_management:{user_id}"
                )
            )
        
        builder.row(
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data=f"refresh_stats:{user_id}"
            )
        )
        
        return builder.as_markup()
    
    def _get_role_emoji(self, role: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ emoji –¥–ª—è —Ä–æ–ª–∏ –≤ –∫–ª–∞–Ω–µ"""
        role_emojis = {
            'leader': 'üëë',
            'coLeader': 'üî•',
            'elder': '‚≠ê',
            'member': 'üë§'
        }
        return role_emojis.get(role, 'üë§')
    
    def format_binding_confirmation_text(
        self,
        validation_result: Dict[str, Any]
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏
        
        Args:
            validation_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if not validation_result.get('success', False):
            return (
                f"‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞**\n\n"
                f"**–û—à–∏–±–∫–∞:** {validation_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n" + 
                "\n".join([f"‚Ä¢ {rec}" for rec in validation_result.get('recommendations', [])])
            )
        
        player_info = validation_result.get('player_info', {})
        clan_analysis = validation_result.get('clan_analysis', {})
        auto_verify = validation_result.get('auto_verify', False)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ
        text = (
            f"üéÆ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞**\n\n"
            f"üë§ **–ò–º—è:** `{player_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
            f"üè∑Ô∏è **–¢–µ–≥:** `{player_info.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
            f"‚≠ê **–£—Ä–æ–≤–µ–Ω—å:** {player_info.get('level', 'N/A')}\n"
            f"üèÜ **–ö—É–±–∫–∏:** {player_info.get('trophies', 0):,}\n"
            f"üíé **–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {player_info.get('best_trophies', 0):,}\n\n"
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ
        if clan_analysis.get('has_clan', False):
            clan_emoji = "‚úÖ" if clan_analysis.get('is_registered_clan', False) else "‚ö°"
            text += (
                f"üè∞ **–ö–ª–∞–Ω:** {clan_emoji} {clan_analysis.get('clan_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                f"üìä **–£—Ä–æ–≤–µ–Ω—å –∫–ª–∞–Ω–∞:** {clan_analysis.get('clan_level', 'N/A')}\n"
                f"üèÜ **–û—á–∫–∏ –∫–ª–∞–Ω–∞:** {clan_analysis.get('clan_points', 0):,}\n\n"
            )
        else:
            text += "üè∞ **–ö–ª–∞–Ω:** –ù–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ\n\n"
        
        # –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if auto_verify:
            text += "‚úÖ **–°—Ç–∞—Ç—É—Å:** –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω\n"
        else:
            text += "‚è≥ **–°—Ç–∞—Ç—É—Å:** –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = validation_result.get('recommendations', [])
        if recommendations:
            text += "\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            text += "\n".join([f"‚Ä¢ {rec}" for rec in recommendations])
        
        return text
    
    def format_clan_members_header(
        self,
        clan_name: str,
        pagination_info: Dict[str, Any]
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
        
        Args:
            clan_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞
            pagination_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        """
        showing_from = pagination_info.get('showing_from', 0)
        showing_to = pagination_info.get('showing_to', 0)
        total_members = pagination_info.get('total_members', 0)
        applied_filters = pagination_info.get('applied_filters', {})
        
        text = f"üè∞ **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞ {clan_name}**\n\n"
        
        if applied_filters:
            text += "üîß **–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã:**\n"
            
            if 'min_trophies' in applied_filters:
                text += f"‚Ä¢ –ö—É–±–∫–∏: –æ—Ç {applied_filters['min_trophies']:,}\n"
            
            if 'roles' in applied_filters and applied_filters['roles']:
                roles_text = ", ".join(applied_filters['roles'])
                text += f"‚Ä¢ –†–æ–ª–∏: {roles_text}\n"
            
            if 'name_filter' in applied_filters and applied_filters['name_filter']:
                text += f"‚Ä¢ –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç: '{applied_filters['name_filter']}'\n"
            
            text += "\n"
        
        text += f"üìä **–ü–æ–∫–∞–∑–∞–Ω–æ:** {showing_from}-{showing_to} –∏–∑ {total_members}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:"
        
        return text
    
    def format_search_results_header(self, search_results: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        
        Args:
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        """
        query = search_results.get('search_query', '')
        total_found = search_results.get('total_found', 0)
        clan_members_count = len(search_results.get('clan_members', []))
        global_results_count = len(search_results.get('global_results', []))
        
        text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'**\n\n"
        text += f"üìä **–ù–∞–π–¥–µ–Ω–æ:** {total_found} –∏–≥—Ä–æ–∫–æ–≤\n"
        
        if clan_members_count > 0:
            text += f"üè∞ **–í –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–∞—Ö:** {clan_members_count}\n"
        
        if global_results_count > 0:
            text += f"üåç **–î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏:** {global_results_count}\n"
        
        text += "\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∏—Å–∫—É
        recommendations = search_results.get('recommendations', [])
        if recommendations:
            text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            for rec in recommendations[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                text += f"‚Ä¢ {rec}\n"
            text += "\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:"
        
        return text