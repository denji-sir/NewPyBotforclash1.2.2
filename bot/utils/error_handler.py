"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""
import logging
import traceback
from functools import wraps
from typing import Callable, Any
from aiogram.types import Message, CallbackQuery

logger = logging.getLogger(__name__)


def error_handler(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    –ò –ª–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    """
    @wraps(func)
    async def wrapper(*args, **kwargs) -> Any:
        # –ù–∞—Ö–æ–¥–∏–º message –∏–ª–∏ callback –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        message = None
        callback = None
        
        for arg in args:
            if isinstance(arg, Message):
                message = arg
                break
            elif isinstance(arg, CallbackQuery):
                callback = arg
                message = callback.message
                break
        
        try:
            return await func(*args, **kwargs)
            
        except Exception as e:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_type = type(e).__name__
            error_message = str(e)
            command_name = func.__name__
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            logger.error(
                f"\n{'='*60}\n"
                f"‚ùå –û–®–ò–ë–ö–ê –í –ö–û–ú–ê–ù–î–ï: {command_name}\n"
                f"{'='*60}\n"
                f"–¢–∏–ø –æ—à–∏–±–∫–∏: {error_type}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}\n"
                f"Traceback:\n{traceback.format_exc()}\n"
                f"{'='*60}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            error_text = (
                f"‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã**\n\n"
                f"**–ö–æ–º–∞–Ω–¥–∞:** `{command_name}`\n"
                f"**–¢–∏–ø –æ—à–∏–±–∫–∏:** `{error_type}`\n"
                f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {error_message}\n\n"
                f"üìù –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥.\n"
                f"üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
            )
            
            try:
                if callback:
                    await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_type}", show_alert=True)
                    if message:
                        await message.reply(error_text, parse_mode="Markdown")
                elif message:
                    await message.reply(error_text, parse_mode="Markdown")
            except Exception as send_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
    
    return wrapper


def command_error_handler(command_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    
    Args:
        command_name: –ò–º—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args, **kwargs) -> Any:
            # –ù–∞—Ö–æ–¥–∏–º message –∏–ª–∏ callback
            message = None
            callback = None
            
            for arg in args:
                if isinstance(arg, Message):
                    message = arg
                    break
                elif isinstance(arg, CallbackQuery):
                    callback = arg
                    message = callback.message
                    break
            
            try:
                return await func(*args, **kwargs)
                
            except Exception as e:
                error_type = type(e).__name__
                error_message = str(e)
                func_name = command_name or func.__name__
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
                logger.error(
                    f"\n\033[91m{'='*60}\033[0m\n"
                    f"\033[91m‚ùå –û–®–ò–ë–ö–ê –í –ö–û–ú–ê–ù–î–ï: {func_name}\033[0m\n"
                    f"\033[91m{'='*60}\033[0m\n"
                    f"\033[93m–¢–∏–ø –æ—à–∏–±–∫–∏:\033[0m {error_type}\n"
                    f"\033[93m–°–æ–æ–±—â–µ–Ω–∏–µ:\033[0m {error_message}\n"
                    f"\033[93m–§—É–Ω–∫—Ü–∏—è:\033[0m {func.__name__}\n"
                    f"\033[93m–ê—Ä–≥—É–º–µ–Ω—Ç—ã:\033[0m {args}\n"
                    f"\n\033[94m–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\033[0m\n{traceback.format_exc()}\n"
                    f"\033[91m{'='*60}\033[0m"
                )
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                user_text = (
                    f"‚ùå **–û—à–∏–±–∫–∞: `{func_name}`**\n\n"
                    f"**–¢–∏–ø:** `{error_type}`\n"
                    f"**–ü—Ä–∏—á–∏–Ω–∞:** {error_message[:200]}\n\n"
                    f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
                    f"üìã –î–µ—Ç–∞–ª–∏ –≤ –ª–æ–≥–∞—Ö: `bot.log`"
                )
                
                try:
                    if callback:
                        await callback.answer(f"‚ùå {error_type}", show_alert=True)
                    if message:
                        await message.reply(user_text, parse_mode="Markdown")
                except:
                    pass
        
        return wrapper
    return decorator
