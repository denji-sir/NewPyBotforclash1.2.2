"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
"""

from typing import Union, Dict, Any, List
from datetime import datetime


def format_war_info(war_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∏–ª–∏ –ø—Ä–æ—à–ª–æ–π –≤–æ–π–Ω–µ –∫–ª–∞–Ω–∞.
    """
    if not war_data or 'state' not in war_data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–π–Ω–µ."

    state = war_data['state']
    clan_name = war_data.get('clan', {}).get('name', '–í–∞—à –∫–ª–∞–Ω')
    opponent_name = war_data.get('opponent', {}).get('name', '–°–æ–ø–µ—Ä–Ω–∏–∫')

    text = f"‚öîÔ∏è **–í–æ–π–Ω–∞ –∫–ª–∞–Ω–æ–≤: {clan_name} vs {opponent_name}**\n\n"

    if state == 'inWar':
        end_time = datetime.fromisoformat(war_data['endTime']).strftime('%H:%M %d.%m')
        text += f"**–°—Ç–∞—Ç—É—Å:** –í –±–æ—é! üí• (–¥–æ {end_time})\n"
    elif state == 'warEnded':
        result = war_data.get('result', 'unknown')
        result_text = {"win": "–ü–æ–±–µ–¥–∞ ‚úÖ", "lose": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ ‚ùå", "tie": "–ù–∏—á—å—è ü§ù"}.get(result, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
        text += f"**–°—Ç–∞—Ç—É—Å:** –í–æ–π–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç: **{result_text}**\n"
    else:
        text += f"**–°—Ç–∞—Ç—É—Å:** {state}\n"

    clan_stars = war_data.get('clan', {}).get('stars', 0)
    opponent_stars = war_data.get('opponent', {}).get('stars', 0)
    clan_destruction = war_data.get('clan', {}).get('destructionPercentage', 0)
    opponent_destruction = war_data.get('opponent', {}).get('destructionPercentage', 0)

    text += f"‚≠ê **{clan_stars}** | {clan_destruction:.2f}%  -  {opponent_destruction:.2f}% | **{opponent_stars}** ‚≠ê\n\n"
    
    # –õ—É—á—à–∏–µ –∞—Ç–∞–∫–∏
    clan_attacks = sorted([m for m in war_data.get('clan', {}).get('members', []) if m.get('attacks')], key=lambda x: -x['attacks'][0]['stars'] if x.get('attacks') else 0)
    if clan_attacks:
        text += "**üî• –õ—É—á—à–∏–µ –∞—Ç–∞–∫–∏:**\n"
        for member in clan_attacks[:3]:
            if member.get('attacks'):
                attack = member['attacks'][0]
                stars = '‚≠ê' * attack['stars'] + '‚ö´' * (3 - attack['stars'])
                text += f"- {member['name']}: {stars} ({attack['destructionPercentage']}%)\n"

    return text

def format_raid_info(raid_log: List[Dict[str, Any]], clan_tag: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–π–¥–µ —Å—Ç–æ–ª–∏—Ü—ã.
    """
    if not raid_log:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π–¥–∞—Ö —Å—Ç–æ–ª–∏—Ü—ã."

    latest_raid = raid_log[0]
    start_time = datetime.fromisoformat(latest_raid['startTime']).strftime('%d.%m.%Y')
    total_loot = latest_raid.get('capitalTotalLoot', 0)

    text = f"‚öîÔ∏è **–†–µ–π–¥ —Å—Ç–æ–ª–∏—Ü—ã –æ—Ç {start_time}**\n\n"
    text += f"**–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:** {total_loot:,} üíé\n"
    text += f"**–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∞—Ç–∞–∫:** {latest_raid.get('totalAttacks', 0)}\n"
    text += f"**–£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ —Ä–∞–π–æ–Ω–æ–≤:** {latest_raid.get('districtsDestroyed', 0)}\n\n"

    # –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–∏
    members = sorted(latest_raid.get('members', []), key=lambda x: -x.get('capitalResourcesLooted', 0))
    if members:
        text += "**üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–∏:**\n"
        for member in members[:5]:
            loot = member.get('capitalResourcesLooted', 0)
            text += f"- {member['name']}: {loot:,} üíé\n"

    return text

def format_cwl_info(cwl_data: Dict[str, Any], clan_tag: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ö–í–õ.
    """
    if not cwl_data or 'state' not in cwl_data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –õ–∏–≥–µ –í–æ–π–Ω –ö–ª–∞–Ω–æ–≤."

    state = cwl_data['state']
    season = cwl_data.get('season', 'N/A')

    text = f"üèÜ **–õ–∏–≥–∞ –í–æ–π–Ω –ö–ª–∞–Ω–æ–≤ (–°–µ–∑–æ–Ω: {season})**\n\n"

    if state == 'inWar':
        text += "**–°—Ç–∞—Ç—É—Å:** –í –±–æ—é! üî•\n"
    elif state == 'ended':
        text += "**–°—Ç–∞—Ç—É—Å:** –ó–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n"
    else:
        text += f"**–°—Ç–∞—Ç—É—Å:** {state}\n"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—É–Ω–¥–∞—Ö
    rounds = cwl_data.get('rounds', [])
    if rounds:
        text += f"**–í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤:** {len(rounds)}\n"
        current_round_index = next((i for i, r in enumerate(rounds) if r['warTags'][0] != '#0'), -1)
        if current_round_index != -1:
            text += f"**–¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥:** {current_round_index + 1}\n"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–∞—Ö –≤ –≥—Ä—É–ø–ø–µ
    clans = cwl_data.get('clans', [])
    if clans:
        text += "\n**–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã:**\n"
        for clan in clans:
            clan_name = clan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞–Ω')
            stars = 0
            # –ù–∞–π–¥–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–µ–∑–¥–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞–Ω–∞
            for r in rounds:
                for tag in r['warTags']:
                    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
                    pass # –¢—É—Ç –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–π–Ω
            text += f"- {clan_name}\n"

    return text


from typing import Union


def format_large_number(number: Union[int, float]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥
    
    Args:
        number: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        
    Examples:
        >>> format_large_number(1234)
        '1,234'
        >>> format_large_number(1234567)
        '1,234,567'
        >>> format_large_number(1000000)
        '1.0M'
        >>> format_large_number(1500000)
        '1.5M'
    """
    if number is None:
        return "0"
    
    number = int(number)
    
    # –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    if number >= 1_000_000_000:
        return f"{number / 1_000_000_000:.1f}B"
    elif number >= 1_000_000:
        return f"{number / 1_000_000:.1f}M"
    elif number >= 100_000:
        return f"{number / 1_000:.0f}K"
    elif number >= 10_000:
        return f"{number / 1_000:.1f}K"
    else:
        # –î–ª—è —á–∏—Å–µ–ª –º–µ–Ω—å—à–µ 10K –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ
        return f"{number:,}"


def format_percentage(value: float, decimals: int = 1) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ (0-100)
        decimals: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    """
    if value is None:
        return "0%"
    
    return f"{value:.{decimals}f}%"


def format_duration(seconds: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥
    
    Args:
        seconds: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        
    Examples:
        >>> format_duration(3661)
        '1—á 1–º'
        >>> format_duration(86400)
        '1–¥'
    """
    if seconds < 60:
        return f"{seconds}—Å"
    
    minutes = seconds // 60
    if minutes < 60:
        return f"{minutes}–º"
    
    hours = minutes // 60
    remaining_minutes = minutes % 60
    
    if hours < 24:
        if remaining_minutes > 0:
            return f"{hours}—á {remaining_minutes}–º"
        return f"{hours}—á"
    
    days = hours // 24
    remaining_hours = hours % 24
    
    if remaining_hours > 0:
        return f"{days}–¥ {remaining_hours}—á"
    return f"{days}–¥"


def format_trophy_range(min_trophies: int, max_trophies: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –∫—É–±–∫–æ–≤
    
    Args:
        min_trophies: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫—É–±–∫–∏
        max_trophies: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫—É–±–∫–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    """
    if min_trophies == max_trophies:
        return format_large_number(min_trophies)
    
    return f"{format_large_number(min_trophies)} - {format_large_number(max_trophies)}"


def format_war_size(team_size: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≤–æ–π–Ω—ã
    
    Args:
        team_size: –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–æ–π–Ω—ã
    """
    return f"{team_size} vs {team_size}"


def truncate_text(text: str, max_length: int = 4000) -> str:
    """
    –û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    
    return text[:max_length - 3] + "..."


def format_clan_role(role: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª—å –≤ –∫–ª–∞–Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    
    Args:
        role: –†–æ–ª—å –≤ –∫–ª–∞–Ω–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∞—è)
        
    Returns:
        str: –†–æ–ª—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å —ç–º–æ–¥–∑–∏
    """
    role_map = {
        "leader": "üëë –õ–∏–¥–µ—Ä",
        "coLeader": "üî± –°–æ-–ª–∏–¥–µ—Ä", 
        "admin": "‚≠ê –°—Ç–∞—Ä–µ–π—à–∏–Ω–∞",
        "member": "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
    }
    
    return role_map.get(role, f"‚ùì {role}")


def format_league(league_name: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏
    
    Args:
        league_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏
    """
    if not league_name:
        return "–ë–µ–∑ –ª–∏–≥–∏"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ª–∏–≥
    league_emojis = {
        "Unranked": "‚ö™",
        "Bronze": "ü•â",
        "Silver": "ü•à", 
        "Gold": "ü•á",
        "Crystal": "üíé",
        "Master": "üëë",
        "Champion": "üèÜ",
        "Titan": "‚ö°",
        "Legend": "üåü"
    }
    
    for key, emoji in league_emojis.items():
        if key.lower() in league_name.lower():
            return f"{emoji} {league_name}"
    
    return league_name


def format_war_result(is_victory: bool = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–π–Ω—ã
    
    Args:
        is_victory: True –¥–ª—è –ø–æ–±–µ–¥—ã, False –¥–ª—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è, None –¥–ª—è –Ω–∏—á—å–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    if is_victory is True:
        return "‚úÖ –ü–æ–±–µ–¥–∞"
    elif is_victory is False:
        return "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
    else:
        return "ü§ù –ù–∏—á—å—è"


def format_build_hall_level(level: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –¢–•
    
    Args:
        level: –£—Ä–æ–≤–µ–Ω—å –¢–•
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¢–•
    """
    if level <= 0:
        return "‚ùì –¢–•?"
    
    return f"üè† –¢–•{level}"


def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""
    
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown
    special_chars = ['*', '_', '`', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    
    return text


def safe_format_name(name: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞/–∫–ª–∞–Ω–∞ –¥–ª—è Markdown
    
    Args:
        name: –ò–º—è
        
    Returns:
        str: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è Markdown
    """
    if not name:
        return "???"
    
    # –£–±–∏—Ä–∞–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã
    safe_name = ""
    for char in name:
        if char.isalnum() or char in " -_.":
            safe_name += char
        else:
            safe_name += "_"
    
    return safe_name.strip()


def format_list_with_numbers(items: list, max_items: int = 10) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    
    Args:
        items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        max_items: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """
    if not items:
        return "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    
    result = ""
    for i, item in enumerate(items[:max_items], 1):
        result += f"{i}. {item}\n"
    
    if len(items) > max_items:
        result += f"... –∏ –µ—â–µ {len(items) - max_items}"
    
    return result.strip()


def format_time_ago(timestamp) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è "–Ω–∞–∑–∞–¥"
    
    Args:
        timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (datetime –æ–±—ä–µ–∫—Ç)
        
    Returns:
        str: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X –Ω–∞–∑–∞–¥"
    """
    if not timestamp:
        return "–ù–∏–∫–æ–≥–¥–∞"
    
    from datetime import datetime, timezone
    
    now = datetime.now(timezone.utc)
    if timestamp.tzinfo is None:
        # –ï—Å–ª–∏ timezone –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º UTC
        timestamp = timestamp.replace(tzinfo=timezone.utc)
    
    diff = now - timestamp
    days = diff.days
    hours = diff.seconds // 3600
    minutes = (diff.seconds % 3600) // 60
    
    if days > 0:
        return f"{days}–¥ –Ω–∞–∑–∞–¥"
    elif hours > 0:
        return f"{hours}—á –Ω–∞–∑–∞–¥"
    elif minutes > 0:
        return f"{minutes}–º –Ω–∞–∑–∞–¥"
    else:
        return "–¢–æ–ª—å–∫–æ —á—Ç–æ"


def format_user_mention(user) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    """
    if not user:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if user.username:
        return f"@{user.username}"
    
    name = user.first_name or ""
    if user.last_name:
        name += f" {user.last_name}"
    
    return name.strip() or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"


def format_player_info(player_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
    
    Args:
        player_data: –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ API
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ
    """
    if not player_data:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–µ"
    
    text = f"üë§ **{player_data.get('name', 'N/A')}**\n"
    text += f"üè∑Ô∏è –¢–µ–≥: `{player_data.get('tag', 'N/A')}`\n"
    text += f"{format_build_hall_level(player_data.get('townHallLevel', 0))}\n"
    text += f"üèÜ –ö—É–±–∫–∏: {format_large_number(player_data.get('trophies', 0))}\n"
    
    if 'clan' in player_data:
        clan = player_data['clan']
        text += f"\nüè∞ –ö–ª–∞–Ω: {clan.get('name', 'N/A')}\n"
        text += f"üìä –†–æ–ª—å: {format_clan_role(clan.get('role', 'member'))}\n"
    
    return text


def format_clan_info(clan_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
    """
    if not clan_data:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    return f"""
üè∞ **{clan_data.get('name', 'N/A')}**
üè∑ –¢–µ–≥: {clan_data.get('tag', 'N/A')}
üìä –£—Ä–æ–≤–µ–Ω—å: {clan_data.get('clanLevel', 0)}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {clan_data.get('members', 0)}/50
üèÜ –¢—Ä–æ—Ñ–µ–∏: {clan_data.get('clanPoints', 0)}
    """.strip()


def format_binding_stats(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≤—è–∑–æ–∫"""
    if not stats:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–≤—è–∑–∫–∞—Ö"
    
    return f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫:
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_bindings', 0)}
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö: {stats.get('verified_bindings', 0)}
‚Ä¢ –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö: {stats.get('unverified_bindings', 0)}
    """.strip()


def format_admin_report(report: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç—á—ë—Ç"""
    if not report:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞"
    
    lines = ["üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç—á—ë—Ç"]
    
    if 'users' in report:
        lines.append(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {report['users']}")
    if 'bindings' in report:
        lines.append(f"üîó –ü—Ä–∏–≤—è–∑–æ–∫: {report['bindings']}")
    if 'verified' in report:
        lines.append(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {report['verified']}")
    
    return "\n".join(lines)


def format_user_greeting(user_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user_data:
        return "–ü—Ä–∏–≤–µ—Ç! üëã"
    
    name = user_data.get('first_name', '–¥—Ä—É–≥')
    return f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã"


def format_contextual_help(context: dict = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å–ø—Ä–∞–≤–∫—É"""
    return """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /commands - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
‚Ä¢ /help - –ü–æ–º–æ—â—å

–ü–∞—Å–ø–æ—Ä—Ç–∞:
‚Ä¢ /passport - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø–∞—Å–ø–æ—Ä—Ç
‚Ä¢ /plist - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤

–ü—Ä–∏–≤—è–∑–∫–∏:
‚Ä¢ /bind_player - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞
‚Ä¢ /binding_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫
    """.strip()


def create_progress_bar(current: int, total: int, length: int = 10) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    
    Args:
        current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        total: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        length: –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
        
    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    """
    if total == 0:
        return "‚ñë" * length
    
    filled = int((current / total) * length)
    filled = max(0, min(filled, length))
    
    bar = "‚ñà" * filled + "‚ñë" * (length - filled)
    percentage = int((current / total) * 100)
    
    return f"{bar} {percentage}%"
