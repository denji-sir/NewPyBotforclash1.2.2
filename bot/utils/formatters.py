"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
"""

from typing import Union


def format_large_number(number: Union[int, float]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥
    
    Args:
        number: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        
    Examples:
        >>> format_large_number(1234)
        '1,234'
        >>> format_large_number(1234567)
        '1,234,567'
        >>> format_large_number(1000000)
        '1.0M'
        >>> format_large_number(1500000)
        '1.5M'
    """
    if number is None:
        return "0"
    
    number = int(number)
    
    # –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    if number >= 1_000_000_000:
        return f"{number / 1_000_000_000:.1f}B"
    elif number >= 1_000_000:
        return f"{number / 1_000_000:.1f}M"
    elif number >= 100_000:
        return f"{number / 1_000:.0f}K"
    elif number >= 10_000:
        return f"{number / 1_000:.1f}K"
    else:
        # –î–ª—è —á–∏—Å–µ–ª –º–µ–Ω—å—à–µ 10K –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ
        return f"{number:,}"


def format_percentage(value: float, decimals: int = 1) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ (0-100)
        decimals: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    """
    if value is None:
        return "0%"
    
    return f"{value:.{decimals}f}%"


def format_duration(seconds: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥
    
    Args:
        seconds: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        
    Examples:
        >>> format_duration(3661)
        '1—á 1–º'
        >>> format_duration(86400)
        '1–¥'
    """
    if seconds < 60:
        return f"{seconds}—Å"
    
    minutes = seconds // 60
    if minutes < 60:
        return f"{minutes}–º"
    
    hours = minutes // 60
    remaining_minutes = minutes % 60
    
    if hours < 24:
        if remaining_minutes > 0:
            return f"{hours}—á {remaining_minutes}–º"
        return f"{hours}—á"
    
    days = hours // 24
    remaining_hours = hours % 24
    
    if remaining_hours > 0:
        return f"{days}–¥ {remaining_hours}—á"
    return f"{days}–¥"


def format_trophy_range(min_trophies: int, max_trophies: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –∫—É–±–∫–æ–≤
    
    Args:
        min_trophies: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫—É–±–∫–∏
        max_trophies: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫—É–±–∫–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    """
    if min_trophies == max_trophies:
        return format_large_number(min_trophies)
    
    return f"{format_large_number(min_trophies)} - {format_large_number(max_trophies)}"


def format_war_size(team_size: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≤–æ–π–Ω—ã
    
    Args:
        team_size: –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–æ–π–Ω—ã
    """
    return f"{team_size} vs {team_size}"


def truncate_text(text: str, max_length: int = 4000) -> str:
    """
    –û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    
    return text[:max_length - 3] + "..."


def format_clan_role(role: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª—å –≤ –∫–ª–∞–Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    
    Args:
        role: –†–æ–ª—å –≤ –∫–ª–∞–Ω–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∞—è)
        
    Returns:
        str: –†–æ–ª—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å —ç–º–æ–¥–∑–∏
    """
    role_map = {
        "leader": "üëë –õ–∏–¥–µ—Ä",
        "coLeader": "üî± –°–æ-–ª–∏–¥–µ—Ä", 
        "admin": "‚≠ê –°—Ç–∞—Ä–µ–π—à–∏–Ω–∞",
        "member": "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
    }
    
    return role_map.get(role, f"‚ùì {role}")


def format_league(league_name: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏
    
    Args:
        league_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏
    """
    if not league_name:
        return "–ë–µ–∑ –ª–∏–≥–∏"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ª–∏–≥
    league_emojis = {
        "Unranked": "‚ö™",
        "Bronze": "ü•â",
        "Silver": "ü•à", 
        "Gold": "ü•á",
        "Crystal": "üíé",
        "Master": "üëë",
        "Champion": "üèÜ",
        "Titan": "‚ö°",
        "Legend": "üåü"
    }
    
    for key, emoji in league_emojis.items():
        if key.lower() in league_name.lower():
            return f"{emoji} {league_name}"
    
    return league_name


def format_war_result(is_victory: bool = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–π–Ω—ã
    
    Args:
        is_victory: True –¥–ª—è –ø–æ–±–µ–¥—ã, False –¥–ª—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è, None –¥–ª—è –Ω–∏—á—å–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    if is_victory is True:
        return "‚úÖ –ü–æ–±–µ–¥–∞"
    elif is_victory is False:
        return "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
    else:
        return "ü§ù –ù–∏—á—å—è"


def format_build_hall_level(level: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –¢–•
    
    Args:
        level: –£—Ä–æ–≤–µ–Ω—å –¢–•
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¢–•
    """
    if level <= 0:
        return "‚ùì –¢–•?"
    
    return f"üè† –¢–•{level}"


def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""
    
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown
    special_chars = ['*', '_', '`', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    
    return text


def safe_format_name(name: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞/–∫–ª–∞–Ω–∞ –¥–ª—è Markdown
    
    Args:
        name: –ò–º—è
        
    Returns:
        str: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è Markdown
    """
    if not name:
        return "???"
    
    # –£–±–∏—Ä–∞–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã
    safe_name = ""
    for char in name:
        if char.isalnum() or char in " -_.":
            safe_name += char
        else:
            safe_name += "_"
    
    return safe_name.strip()


def format_list_with_numbers(items: list, max_items: int = 10) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    
    Args:
        items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        max_items: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """
    if not items:
        return "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    
    result = ""
    for i, item in enumerate(items[:max_items], 1):
        result += f"{i}. {item}\n"
    
    if len(items) > max_items:
        result += f"... –∏ –µ—â–µ {len(items) - max_items}"
    
    return result.strip()


def format_time_ago(timestamp) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è "–Ω–∞–∑–∞–¥"
    
    Args:
        timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (datetime –æ–±—ä–µ–∫—Ç)
        
    Returns:
        str: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X –Ω–∞–∑–∞–¥"
    """
    if not timestamp:
        return "–ù–∏–∫–æ–≥–¥–∞"
    
    from datetime import datetime, timezone
    
    now = datetime.now(timezone.utc)
    if timestamp.tzinfo is None:
        # –ï—Å–ª–∏ timezone –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º UTC
        timestamp = timestamp.replace(tzinfo=timezone.utc)
    
    diff = now - timestamp
    days = diff.days
    hours = diff.seconds // 3600
    minutes = (diff.seconds % 3600) // 60
    
    if days > 0:
        return f"{days}–¥ –Ω–∞–∑–∞–¥"
    elif hours > 0:
        return f"{hours}—á –Ω–∞–∑–∞–¥"
    elif minutes > 0:
        return f"{minutes}–º –Ω–∞–∑–∞–¥"
    else:
        return "–¢–æ–ª—å–∫–æ —á—Ç–æ"