"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
"""

from typing import Optional


def format_user_mention(user_id: int, username: Optional[str] = None, first_name: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    """
    if username:
        return f"@{username}"
    elif first_name:
        return f"[{first_name}](tg://user?id={user_id})"
    else:
        return f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user_id})"


def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    
    Returns:
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text


def format_number(num: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    
    Args:
        num: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    """
    return f"{num:,}".replace(",", " ")


def format_percentage(value: float, decimals: int = 1) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ (0-100)
        decimals: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    """
    return f"{value:.{decimals}f}%"


def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    return text[:max_length - len(suffix)] + suffix


def format_war_info(war_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–π–Ω–µ –∫–ª–∞–Ω–∞
    
    Args:
        war_data: –î–∞–Ω–Ω—ã–µ –æ –≤–æ–π–Ω–µ
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–π–Ω–µ
    """
    if not war_data:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–π–Ω–µ"
    
    state = war_data.get('state', 'unknown')
    clan = war_data.get('clan', {})
    opponent = war_data.get('opponent', {})
    
    text = f"‚öîÔ∏è **–ö–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞**\n\n"
    text += f"üìä –°—Ç–∞—Ç—É—Å: {state}\n"
    text += f"üè∞ {clan.get('name', 'N/A')}: {clan.get('stars', 0)}‚≠ê ({clan.get('attacks', 0)} –∞—Ç–∞–∫)\n"
    text += f"üè∞ {opponent.get('name', 'N/A')}: {opponent.get('stars', 0)}‚≠ê ({opponent.get('attacks', 0)} –∞—Ç–∞–∫)\n"
    
    return text


def format_raid_info(raid_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–π–¥–∞—Ö
    
    Args:
        raid_data: –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π–¥–∞—Ö
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π–¥–∞—Ö
    """
    if not raid_data:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π–¥–∞—Ö"
    
    text = f"üèõÔ∏è **–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π–¥—ã**\n\n"
    
    if 'items' in raid_data and raid_data['items']:
        latest = raid_data['items'][0]
        text += f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–π–¥:\n"
        text += f"‚öîÔ∏è –ê—Ç–∞–∫: {latest.get('totalAttacks', 0)}\n"
        text += f"üèÜ –ù–∞–≥—Ä–∞–±–ª–µ–Ω–æ: {format_number(latest.get('capitalTotalLoot', 0))}\n"
    else:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π–¥–∞—Ö"
    
    return text


def format_cwl_info(cwl_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –õ–∏–≥–µ –í–æ–π–Ω –ö–ª–∞–Ω–æ–≤
    
    Args:
        cwl_data: –î–∞–Ω–Ω—ã–µ –æ –õ–í–ö
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –õ–í–ö
    """
    if not cwl_data:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –õ–í–ö"
    
    text = f"üèÜ **–õ–∏–≥–∞ –í–æ–π–Ω –ö–ª–∞–Ω–æ–≤**\n\n"
    text += f"üìä –°–µ–∑–æ–Ω: {cwl_data.get('season', 'N/A')}\n"
    text += f"üéñÔ∏è –õ–∏–≥–∞: {cwl_data.get('league', 'N/A')}\n"
    
    return text
