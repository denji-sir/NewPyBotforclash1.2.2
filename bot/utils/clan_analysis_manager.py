"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞–Ω–æ–≤
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞–Ω–æ–≤
"""
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime

from ..models.clan_models import ClanInfo, ClanOperationLog, DatabaseError
from ..services.clan_database_service import ClanDatabaseService, get_clan_db_service
from ..services.coc_api_service import CocApiService, get_coc_api_service
from ..services.permission_service import PermissionService, get_permission_service
from .clan_helpers import (
    calculate_clan_activity_score, 
    analyze_clan_roles,
    get_clan_health_status,
    calculate_donation_efficiency,
    format_member_list,
    generate_clan_comparison,
    get_clan_recruitment_message
)

logger = logging.getLogger(__name__)


class ClanAnalysisManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞–Ω–æ–≤"""
    
    def __init__(self):
        self.db_service = get_clan_db_service()
        self.api_service = get_coc_api_service()
        self.permission_service = get_permission_service()
        
    async def analyze_clan_performance(self, clan_tag: str, chat_id: int) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞–Ω–∞
        
        Args:
            clan_tag: –¢–µ–≥ –∫–ª–∞–Ω–∞
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∞–Ω–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω–∞
            clan = await self.db_service.get_clan_by_tag(clan_tag, chat_id)
            if not clan:
                return {'error': 'Clan not found'}
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ API
            async with self.api_service:
                members = await self.api_service.get_clan_members(clan_tag)
                clan_data = await self.api_service.get_clan(clan_tag)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            activity_data = calculate_clan_activity_score(members)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª–∏
            roles_data = analyze_clan_roles(members)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
            health_data = get_clan_health_status(clan_data.__dict__, activity_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–Ω–∞—Ç–æ–≤
            donation_data = calculate_donation_efficiency(members)
            
            return {
                'clan_info': {
                    'name': clan_data.name,
                    'tag': clan_data.tag,
                    'level': clan_data.level,
                    'points': clan_data.points,
                    'member_count': clan_data.member_count,
                    'description': clan_data.description
                },
                'activity': activity_data,
                'roles': roles_data,
                'health': health_data,
                'donations': donation_data,
                'members': members
            }
            
        except Exception as e:
            logger.error(f"Error analyzing clan performance for {clan_tag}: {e}")
            return {'error': str(e)}
            
    async def get_clan_recommendations(self, clan_tag: str, chat_id: int) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–ª–∞–Ω–∞
        
        Args:
            clan_tag: –¢–µ–≥ –∫–ª–∞–Ω–∞
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        try:
            analysis = await self.analyze_clan_performance(clan_tag, chat_id)
            
            if 'error' in analysis:
                return [f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis['error']}"]
            
            recommendations = []
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_score = analysis['activity']['activity_score']
            if activity_score < 50:
                recommendations.append("üî• –£–≤–µ–ª–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –æ—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–Ω–∞")
                recommendations.append("üíù –ü–æ–æ—â—Ä—è—Ç—å –¥–æ–Ω–∞—Ç—ã - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
            elif activity_score < 70:
                recommendations.append("‚ö° –•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ—Å—Ç–∞–≤—É
            member_count = analysis['clan_info']['member_count']
            if member_count < 20:
                recommendations.append("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - —Å—Ä–æ—á–Ω—ã–π —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥!")
            elif member_count < 35:
                recommendations.append("üë• –ù–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥")
            elif member_count < 45:
                recommendations.append("üìà –ü–æ—á—Ç–∏ –ø–æ–ª–Ω—ã–π –∫–ª–∞–Ω - –¥–æ–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–æ–ª—è–º
            roles = analysis['roles']
            if roles['admin'] < 3:
                recommendations.append("‚≠ê –ù–∞–∑–Ω–∞—á–∏—Ç—å –±–æ–ª—å—à–µ —Å—Ç–∞—Ä–µ–π—à–∏–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            
            if roles['coLeader'] < 1:
                recommendations.append("üåü –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ-–ª–∏–¥–µ—Ä–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
            elif roles['coLeader'] > 3:
                recommendations.append("‚öñÔ∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ-–ª–∏–¥–µ—Ä–æ–≤, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–µ—Ä–∞—Ä—Ö–∏—é")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–Ω–∞—Ç–∞–º
            donation_balance = analysis['donations']['donation_balance']
            if donation_balance == 'deficit':
                recommendations.append("üì§ –£–ª—É—á—à–∏—Ç—å –∫—É–ª—å—Ç—É—Ä—É –¥–æ–Ω–∞—Ç–æ–≤ - –±–æ–ª—å—à–µ –æ—Ç–¥–∞–≤–∞—Ç—å, —á–µ–º –ø–æ–ª—É—á–∞—Ç—å")
            elif donation_balance == 'surplus':
                recommendations.append("üì• –£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–æ–Ω–∞—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–Ω–∞—Ç–æ–≤
            efficiency_ratio = analysis['donations']['efficiency_ratio']
            if efficiency_ratio < 0.5:
                recommendations.append("üí∏ –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–Ω–∞—Ç–æ–≤ - –æ–±—É—á–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é
            health_recommendations = analysis['health']['recommendations']
            recommendations.extend([f"üíä {rec}" for rec in health_recommendations[:3]])
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é –∫–ª–∞–Ω–∞
            clan_level = analysis['clan_info']['level']
            if clan_level < 5:
                recommendations.append("üéÆ –ê–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∏–≥—Ä–∞—Ö –∫–ª–∞–Ω–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è")
            elif clan_level < 10:
                recommendations.append("üèÜ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –∫–ª–∞–Ω–æ–≤–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö")
            
            return recommendations[:10]  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            
        except Exception as e:
            logger.error(f"Error getting recommendations for {clan_tag}: {e}")
            return [f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}"]
            
    async def compare_clans(self, clan_tag1: str, clan_tag2: str, chat_id: int) -> Dict[str, Any]:
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –∫–ª–∞–Ω–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
        
        Args:
            clan_tag1: –¢–µ–≥ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∞–Ω–∞
            clan_tag2: –¢–µ–≥ –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∞–Ω–∞
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–ª–∞–Ω–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ–±–æ–∏—Ö –∫–ª–∞–Ω–æ–≤
            analysis1 = await self.analyze_clan_performance(clan_tag1, chat_id)
            analysis2 = await self.analyze_clan_performance(clan_tag2, chat_id)
            
            if 'error' in analysis1:
                return {'error': f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞–Ω–∞ {clan_tag1}: {analysis1['error']}"}
            if 'error' in analysis2:
                return {'error': f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞–Ω–∞ {clan_tag2}: {analysis2['error']}"}
            
            comparison = {
                'clan1': analysis1['clan_info'],
                'clan2': analysis2['clan_info'],
                'winner_categories': {},
                'summary': {}
            }
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = {
                'points': ('–û—á–∫–∏ –∫–ª–∞–Ω–∞', analysis1['clan_info']['points'], analysis2['clan_info']['points']),
                'level': ('–£—Ä–æ–≤–µ–Ω—å –∫–ª–∞–Ω–∞', analysis1['clan_info']['level'], analysis2['clan_info']['level']),
                'members': ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', analysis1['clan_info']['member_count'], analysis2['clan_info']['member_count']),
                'activity': ('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', analysis1['activity']['activity_score'], analysis2['activity']['activity_score']),
                'donations': ('–î–æ–Ω–∞—Ç—ã', analysis1['donations']['total_donated'], analysis2['donations']['total_donated']),
                'health': ('–ó–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞–Ω–∞', analysis1['health']['health_score'], analysis2['health']['health_score'])
            }
            
            clan1_wins = 0
            clan2_wins = 0
            
            for category, (name, val1, val2) in categories.items():
                if val1 > val2:
                    comparison['winner_categories'][category] = 1
                    clan1_wins += 1
                elif val2 > val1:
                    comparison['winner_categories'][category] = 2
                    clan2_wins += 1
                else:
                    comparison['winner_categories'][category] = 0  # –ù–∏—á—å—è
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if clan1_wins > clan2_wins:
                comparison['overall_winner'] = 1
                comparison['summary']['winner_name'] = analysis1['clan_info']['name']
            elif clan2_wins > clan1_wins:
                comparison['overall_winner'] = 2
                comparison['summary']['winner_name'] = analysis2['clan_info']['name']
            else:
                comparison['overall_winner'] = 0
                comparison['summary']['winner_name'] = '–ù–∏—á—å—è'
            
            comparison['summary']['clan1_wins'] = clan1_wins
            comparison['summary']['clan2_wins'] = clan2_wins
            comparison['summary']['categories'] = categories
            
            return comparison
            
        except Exception as e:
            logger.error(f"Error comparing clans {clan_tag1} and {clan_tag2}: {e}")
            return {'error': str(e)}
            
    async def get_recruitment_message(self, clan_tag: str, chat_id: int) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–∞ –≤ –∫–ª–∞–Ω
        
        Args:
            clan_tag: –¢–µ–≥ –∫–ª–∞–Ω–∞
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            analysis = await self.analyze_clan_performance(clan_tag, chat_id)
            
            if 'error' in analysis:
                return {'error': analysis['error']}
            
            clan_info = analysis['clan_info']
            activity_data = analysis['activity']
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            recruitment_msg = get_clan_recruitment_message(clan_info, activity_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return {
                'message': recruitment_msg,
                'clan_info': clan_info,
                'activity_score': activity_data['activity_score'],
                'health_status': analysis['health']['status'],
                'top_donors': analysis['donations']['top_donors'][:3]
            }
            
        except Exception as e:
            logger.error(f"Error generating recruitment message for {clan_tag}: {e}")
            return {'error': str(e)}
            
    async def get_detailed_member_analysis(self, clan_tag: str, chat_id: int) -> Dict[str, Any]:
        """
        –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
        
        Args:
            clan_tag: –¢–µ–≥ –∫–ª–∞–Ω–∞
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """
        try:
            analysis = await self.analyze_clan_performance(clan_tag, chat_id)
            
            if 'error' in analysis:
                return {'error': analysis['error']}
            
            members = analysis['members']
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            member_analysis = {
                'total_members': len(members),
                'by_role': analyze_clan_roles(members),
                'donation_stats': {
                    'top_donors': sorted(members, key=lambda x: x.get('donations', 0), reverse=True)[:10],
                    'low_donors': sorted(members, key=lambda x: x.get('donations', 0))[:5],
                    'avg_donations': sum(m.get('donations', 0) for m in members) / len(members) if members else 0
                },
                'level_stats': {
                    'highest_level': max(m.get('expLevel', 0) for m in members) if members else 0,
                    'lowest_level': min(m.get('expLevel', 0) for m in members) if members else 0,
                    'avg_level': sum(m.get('expLevel', 0) for m in members) / len(members) if members else 0
                },
                'activity_indicators': {
                    'active_donors': len([m for m in members if m.get('donations', 0) > 0]),
                    'high_level_players': len([m for m in members if m.get('expLevel', 0) > 100]),
                    'leadership_roles': len([m for m in members if m.get('role') in ['leader', 'coLeader', 'admin']])
                }
            }
            
            return member_analysis
            
        except Exception as e:
            logger.error(f"Error analyzing members for {clan_tag}: {e}")
            return {'error': str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
def get_clan_analysis_manager() -> ClanAnalysisManager:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞–Ω–æ–≤"""
    return ClanAnalysisManager()