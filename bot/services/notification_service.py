"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""
import logging
from typing import List, Optional, Dict, Any
from aiogram import Bot
from aiogram.types import Message
from aiogram.exceptions import TelegramAPIError

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def send_notification(
        self, 
        chat_id: int, 
        text: str,
        parse_mode: Optional[str] = "HTML",
        disable_notification: bool = False
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML, Markdown)
            disable_notification: –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                disable_notification=disable_notification
            )
            logger.info(f"Notification sent to chat {chat_id}")
            return True
            
        except TelegramAPIError as e:
            logger.error(f"Failed to send notification to chat {chat_id}: {e}")
            return False
    
    async def send_bulk_notifications(
        self,
        chat_ids: List[int],
        text: str,
        parse_mode: Optional[str] = "HTML"
    ) -> Dict[str, int]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤
        
        Args:
            chat_ids: –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤
            text: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        """
        success = 0
        failed = 0
        
        for chat_id in chat_ids:
            if await self.send_notification(chat_id, text, parse_mode):
                success += 1
            else:
                failed += 1
        
        logger.info(f"Bulk notifications sent: {success} success, {failed} failed")
        return {"success": success, "failed": failed}
    
    async def notify_war_start(
        self,
        chat_id: int,
        clan_name: str,
        opponent_name: str,
        war_size: int
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ö–í"""
        text = (
            f"‚öîÔ∏è <b>–ù–∞—á–∞–ª–∞—Å—å –ö–ª–∞–Ω–æ–≤–∞—è –í–æ–π–Ω–∞!</b>\n\n"
            f"üè∞ –ö–ª–∞–Ω: <b>{clan_name}</b>\n"
            f"üéØ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: <b>{opponent_name}</b>\n"
            f"üë• –†–∞–∑–º–µ—Ä: <b>{war_size} vs {war_size}</b>\n\n"
            f"–£–¥–∞—á–∏ –≤ –±–æ—é! üí™"
        )
        return await self.send_notification(chat_id, text)
    
    async def notify_war_end(
        self,
        chat_id: int,
        clan_name: str,
        result: str,
        stars: int,
        opponent_stars: int
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ö–í"""
        emoji = "üèÜ" if result == "win" else "üòî" if result == "lose" else "ü§ù"
        result_text = "–ü–æ–±–µ–¥–∞!" if result == "win" else "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ" if result == "lose" else "–ù–∏—á—å—è"
        
        text = (
            f"{emoji} <b>–ö–ª–∞–Ω–æ–≤–∞—è –í–æ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üè∞ –ö–ª–∞–Ω: <b>{clan_name}</b>\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{result_text}</b>\n"
            f"‚≠ê –ó–≤–µ–∑–¥—ã: <b>{stars} - {opponent_stars}</b>\n"
        )
        return await self.send_notification(chat_id, text)
    
    async def notify_raid_weekend_start(
        self,
        chat_id: int,
        clan_name: str
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–π–¥–æ–≤—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö"""
        text = (
            f"üèõÔ∏è <b>–ù–∞—á–∞–ª–∏—Å—å –†–µ–π–¥–æ–≤—ã–µ –í—ã—Ö–æ–¥–Ω—ã–µ!</b>\n\n"
            f"üè∞ –ö–ª–∞–Ω: <b>{clan_name}</b>\n"
            f"‚öîÔ∏è –í—Ä–µ–º—è –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏—Ü—É –∫–ª–∞–Ω–∞!\n\n"
            f"–£–¥–∞—á–Ω—ã—Ö —Ä–µ–π–¥–æ–≤! üí∞"
        )
        return await self.send_notification(chat_id, text)
    
    async def notify_raid_weekend_end(
        self,
        chat_id: int,
        clan_name: str,
        total_loot: int,
        raids_completed: int
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–π–¥–æ–≤—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö"""
        text = (
            f"üèõÔ∏è <b>–†–µ–π–¥–æ–≤—ã–µ –í—ã—Ö–æ–¥–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!</b>\n\n"
            f"üè∞ –ö–ª–∞–Ω: <b>{clan_name}</b>\n"
            f"üí∞ –ù–∞–≥—Ä–∞–±–ª–µ–Ω–Ω–æ–µ –∑–æ–ª–æ—Ç–æ: <b>{total_loot:,}</b>\n"
            f"‚öîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ä–µ–π–¥–æ–≤: <b>{raids_completed}</b>\n"
        )
        return await self.send_notification(chat_id, text)
    
    async def notify_achievement_unlocked(
        self,
        chat_id: int,
        user_id: int,
        achievement_name: str,
        achievement_description: str,
        points: int
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        text = (
            f"üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>@user</a>\n"
            f"üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: <b>{achievement_name}</b>\n"
            f"üìù {achievement_description}\n"
            f"‚≠ê –û—á–∫–∏: <b>+{points}</b>\n"
        )
        return await self.send_notification(chat_id, text)
    
    async def notify_daily_baseline_update(
        self,
        chat_id: int,
        success_count: int,
        failed_count: int
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–∞–∑–∏—Å–æ–≤"""
        text = (
            f"üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–∞–∑–∏—Å–æ–≤</b>\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{success_count}</b>\n"
            f"‚ùå –û—à–∏–±–æ–∫: <b>{failed_count}</b>\n"
        )
        return await self.send_notification(chat_id, text, disable_notification=True)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_notification_service: Optional[NotificationService] = None


def init_notification_service(bot: Bot) -> NotificationService:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global _notification_service
    _notification_service = NotificationService(bot)
    return _notification_service


def get_notification_service() -> NotificationService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global _notification_service
    if _notification_service is None:
        raise RuntimeError("Notification service not initialized. Call init_notification_service() first.")
    return _notification_service
