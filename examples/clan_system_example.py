"""
–ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞–Ω–æ–≤
"""
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from bot.config.clan_config import init_clan_config, get_coc_api_keys
from bot.services.clan_system_manager import init_clan_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–ª–∞–Ω–æ–≤"""
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = init_clan_config(
        coc_api_keys=[
            "YOUR_COC_API_KEY_1",
            "YOUR_COC_API_KEY_2",  # –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        ],
        database_path="data/clans.db",
        max_clans_per_chat=10
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    validation_errors = config.validate()
    if validation_errors:
        logger.error("Configuration errors:")
        for error in validation_errors:
            logger.error(f"  - {error}")
        return
    
    # 2. –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token="YOUR_BOT_TOKEN")
    dp = Dispatcher(storage=MemoryStorage())
    
    try:
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∫–ª–∞–Ω–æ–≤
        logger.info("üöÄ Initializing clan system...")
        clan_manager = await init_clan_system(
            bot=bot,
            dp=dp,
            coc_api_keys=config.coc_api_keys,
            db_path=config.database_path
        )
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = await clan_manager.get_system_status()
        logger.info(f"üìä System status: {status}")
        
        # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        logger.info("‚úÖ Starting bot polling...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå Error starting bot: {e}")
        raise
    finally:
        await bot.session.close()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())